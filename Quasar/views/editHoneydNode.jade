//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2012
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout 

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  script(type="text/javascript", src="scripts/portset.js")

  script
    var currentInterface;
    var pfile;

    function SaveNode()
    {
        var node = {profile : document.getElementById("profile").value
            , portSet : document.getElementById("portSetList").value
            , intface : currentInterface
            , oldName : "#{oldName}"
            , ipType : document.getElementById("ipType").value
            , ip : document.getElementById("ip0").value + "." + document.getElementById("ip1").value + "." + document.getElementById("ip2").value + "." + document.getElementById("ip3").value
            , mac : document.getElementById("mac0").value + ":" + document.getElementById("mac1").value + ":" + document.getElementById("mac2").value + ":" + document.getElementById("mac3").value + ":" + document.getElementById("mac4").value + ":" + document.getElementById("mac5").value
        };

        now.SaveHoneydNode(node, saveNodeCallback);
    }

    function populateVendorList(profile)
    {
        pfile = profile;
        document.getElementById("vendorList").innerHTML = "";
        for (var vendor in profile.ethernet)
        {
            var v = profile.ethernet[vendor].vendor;
            var option = document.createElement('option');
            option.innerHTML = v;
            document.getElementById("vendorList").appendChild(option);
        }

        document.getElementById("portSetList").innerHTML = "";
        for (var portset in profile.portSets)
        {
            var v = profile.portSets[portset].setName;
            var option = document.createElement('option');
            option.innerHTML = v;
            if (v == "#{portSet}")
            {
                option.selected = true;
            }

            document.getElementById("portSetList").appendChild(option);
        }
        
        portsetSelectionChanged();
    }
    
    function generateDefaultRows(tcp, udp, icmp)
    {
      var tr0 = document.createElement('tr');
      var td0 = document.createElement('td');
      td0.innerHTML = 'default';
      var td1 = document.createElement('td');
      td1.innerHTML = 'tcp';
      var td2 = document.createElement('td');
      td2.innerHTML = tcp;
      tr0.appendChild(td0);
      tr0.appendChild(td1);
      tr0.appendChild(td2);
      document.getElementById('portsetHook').appendChild(tr0);
      
      var tr1 = document.createElement('tr');
      var td3 = document.createElement('td');
      td3.innerHTML = 'default';
      var td4 = document.createElement('td');
      td4.innerHTML = 'udp';
      var td5 = document.createElement('td');
      td5.innerHTML = udp;
      tr1.appendChild(td3);
      tr1.appendChild(td4);
      tr1.appendChild(td5);
      document.getElementById('portsetHook').appendChild(tr1);
      
      var tr2 = document.createElement('tr');
      var td6 = document.createElement('td');
      td6.innerHTML = 'default';
      var td7 = document.createElement('td');
      td7.innerHTML = 'icmp';
      var td8 = document.createElement('td');
      td8.innerHTML = icmp;
      tr2.appendChild(td6);
      tr2.appendChild(td7);
      tr2.appendChild(td8);
      document.getElementById('portsetHook').appendChild(tr2);
    }
    
    function generateExceptionRow(num, proto, behav)
    {
      var tr0 = document.createElement('tr');
      var td0 = document.createElement('td');
      td0.innerHTML = num;
      var td1 = document.createElement('td');
      td1.innerHTML = proto;
      var td2 = document.createElement('td');
      td2.innerHTML = behav;
      tr0.appendChild(td0);
      tr0.appendChild(td1);
      tr0.appendChild(td2);
      document.getElementById('portsetHook').appendChild(tr0);
    }
    
    function portsetSelectionChanged()
    {
      while(document.getElementById('portsetHook').hasChildNodes())
      {
        document.getElementById('portsetHook').removeChild(document.getElementById('portsetHook').lastChild);
      }
      var desired = document.getElementById('portSetList').options[document.getElementById('portSetList').selectedIndex].value;
      var lightboxProfile = document.getElementById('profile').options[document.getElementById('profile').selectedIndex].value;
      now.GetPortSets(lightboxProfile, function(portset){
        for(var i in portset)
        {
          if(desired == portset[i].setName)
          {
            generateDefaultRows(portset[i].TCPBehavior, portset[i].UDPBehavior, portset[i].ICMPBehavior);
            for(var port in portset[i].TCPExceptions)
            {
              generateExceptionRow(portset[i].TCPExceptions[port].portNum, portset[i].TCPExceptions[port].protocol, portset[i].TCPExceptions[port].behavior);
            }
            for(var port in portset[i].UDPExceptions)
            {
              generateExceptionRow(portset[i].UDPExceptions[port].portNum, portset[i].UDPExceptions[port].protocol, portset[i].UDPExceptions[port].behavior);
            }
          }
        }
      });
    }

    function profileChanged()
    {
        now.GetProfile(document.getElementById("profile").value, populateVendorList);
    }

    function saveNodeCallback(err)
    {
      if(err != null)
      {
        alert("Unable to complete operation due to error: " + err);
        window.location = "/configHoneydNodes";
        return;
      }
     now.IsHaystackUp(checkIfRestartNeeded); 
    }

    function checkIfRestartNeeded(haystackUp)
    {
      if (haystackUp)
      {
        var restartHaystack = confirm("You must restart the haystack for this to take effect. Restart it now?");
        if (restartHaystack)
        {
          now.RestartHaystack();
        }
      }

      window.location = "/configHoneydNodes";
    }

    function ipTypeChanged()
    {
      var ipEditEnabled;
      var macEditEnabled;

      if (document.getElementById("ipType").value == "DHCP")
      {
        ipEditEnabled = true;
      } else {
        ipEditEnabled = false;
      }

      for (var i = 0; i < 4; i++)
      {
        document.getElementById("ip" + i).disabled = ipEditEnabled;
      }
     }
    
    function checkOnlyOne(checkedBox)
    {
      var forLength = document.getElementById("length").getAttribute("value");
      
      var checkAgainst = checkedBox.getAttribute("id");
      currentInterface = checkedBox.value;
      
      if(forLength == 1)
      {
        checkedBox.checked = true;
        return;
      }
      
      for(var i = 0; i < forLength; i++)
      {
        if(checkAgainst !== ("if" + i))
        {
          document.getElementById("if" + i).checked = false;
        }
      }
      
      if(!checkedBox.checked)
      {
        checkedBox.checked = true; 
      }  
    }

    function GenerateMac()
    {
        var vendor = document.getElementById("vendorList").value;
        now.GenerateMACForVendor(vendor, MACAddressCb);
    }

    function MACAddressCb(mac)
    {
        if (mac == null)
        {
            alert("Unable to get MAC Address");
            return;
        }

        var splitMac = mac.split(":");
        for (var i = 0; i < 6; i++)
        {
            document.getElementById("mac" + i).value = splitMac[i];
        }
    }
   
    function init()
    {
        now.ready( function()
        {
            profileChanged();
            checkOnlyOne(document.getElementById("if0"));
        });
    }
    
block content
  br
  h2 Editing Honeyd Node "#{oldName}"

  input(type="hidden", name="oldName", value="#{oldName}")

  label Profile
  select#profile(name="profile", onchange="profileChanged()")
    each p, i in profiles
      if p == profile
        option(SELECTED) #{p}
      else
        option #{p}
  br
  br
  
  label Portset
  select#portSetList(name="profile", onchange='portsetSelectionChanged()')
  br
  br
  div(style="height: 200px; overflow-y: scroll;")
    table(border='1')
      thead
        th(style='background-color: #d0e9fc;') Port Number
        th(style='background-color: #d0e9fc;') Protocol
        th(style='background-color: #d0e9fc;') Behavior
      tbody#portsetHook
  br

  label Network Interface
  table
    thead
      tr 
    tbody
    - if(INTERFACES.length == 1)
      tr 
        td
          input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onchange="checkOnlyOne(if0)")
          #{INTERFACES[0]}
    - else
      - for (var i = 0; i < INTERFACES.length; i++)
          tr 
            td
              - if (String(interface) == String(INTERFACES[i]))
                input(type="checkbox", value=INTERFACES[i], id="if#{i}", name="interface", checked, width=10, onchange="checkOnlyOne(if#{i})")
                #{INTERFACES[i]} (Alias: #{interfaceAliases[i]})
              - else
                input(type="checkbox", value=INTERFACES[i], id="if#{i}", name="interface", width=10, onchange="checkOnlyOne(if#{i})")
                #{INTERFACES[i]} (Alias: #{interfaceAliases[i]})

  hidden(id="length", value=INTERFACES.length)
 
  br
  br
  label IP Address Range Type
  select#ipType(name="ipType", onChange="ipTypeChanged()")
    if ip == 'DHCP'
      option(SELECTED) DHCP
    else
      option DHCP

    if ip == 'DHCP'
      option IP Address
    else
      option(SELECTED) IP Address

  br
  label IP address
  - for (var i = 0; i < 4; i++)
    - if (ip == 'DHCP')
      input.ip(id = "ip" + i,type="number", name="#{"ip" + i}", min="0", max="255", required="true", value="1", disabled="disabled")
    - else
      input.ip(id = "ip" + i,type="number", name="#{"ip" + i}", min="0", max="255", required="true", value="#{ip.split(".")[i]}")
  


  br
  br
  label &nbsp
  a(class="button", href="#", onclick="GenerateMac()") Generate new MAC
  br
  br
  label Ethernet Vendor
  select#vendorList(name"vendorList")

  br
  label MAC Address
  - for (var i = 0; i < 6; i++)
    - if (mac == 'RANDOM')
      input(id = "mac" + i, type="text", name="#{"mac" + i}", pattern="[0-9a-f]{2}", required="true", value="00", disabled="disabled", style="width: 25px")
    - else
      input(id = "mac" + i, type="text", name="#{"mac" + i}", pattern="[0-9a-f]{2}", required="true", value="#{mac.split(":")[i]}", style="width: 25px")


  br
  br
  input(type="Submit",value="Confirm Node Edits", onclick="SaveNode();")
