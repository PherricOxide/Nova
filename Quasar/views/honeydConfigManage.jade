//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2012
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  style(type="text/css")
    a.selectedProfile, a.unselectedProfile {
        display: block;
        font-size: 12px;
        font-weight: bold;
        border: 1px solid black;
        padding: 2px;
        margin: 5px;
        height: 100%;
    }

    a.unselectedProfile:hover {
        background-color: #F1CC91;
        clear: both;
    }

    a.selectedProfile {
        background-color: #E8A02F;
    }

    a.unselectedProfile {
        background-color: #E4F2FF;
    }

    ul {
        margin-bottom: 20px;
        display: block; 
        list-style-type: none;
    }

    #treeDiv {
        display: inline-block;
    }

    li {
        -moz-user-select: none;
        -webkit-user-select: none;
        list-style-type: none;
    }
    
  script(type="text/javascript", src="scripts/NovaPiChart.js")
  script
    var configurationList = !{JSON.stringify(configurations)};
    var theDoc = document;
    var profilesArray = {};
    var saveProfileObjs = {};
    var currentConfig = "#{current}";
    var lightboxProfile;
    var getSummaryOrNot = true;

    function closeLightbox()
    {
      enableBackground(theDoc.getElementById('setup'));
      
      theDoc.getElementById('lightbox').style.display = 'none';
      theDoc.getElementById('setup').style.opacity = '1.0';
      
      while(theDoc.getElementById('cloneMe').hasChildNodes())
      {
        theDoc.getElementById('cloneMe').removeChild(theDoc.getElementById('cloneMe').lastChild);
      }
      
      rmLb = false;
    }
    
    function newConfiguration(configName, cloneInfo)
    {
      var cloneConfig = cloneInfo;
      
      if(cloneInfo == undefined)
      {
        console.log('Creating empty configuration ' + configName);
      }
      else
      {
        console.log('Creating clone configuration ' + configName + ' based on ' + cloneInfo);
      }
    }
    
    function populateConfigSelect(configs)
    {
      if(theDoc.getElementById('configurations').hasChildNodes())
      {
        while(theDoc.getElementById('configurations').hasChildNodes())
        {
          theDoc.getElementById('configurations').removeChild(theDoc.getElementById('configurations').lastChild);
        }
      }
      
      if(configs == undefined || configs == '')
      {
        console.log('no configs sent');
        var option = theDoc.createElement('option');
        
        option.value = 'None';
        option.innerHTML = 'None';
        option.id = 'None';
        theDoc.getElementById('configurations').appendChild(option);
      }
      else
      {
        var selected = false;
        for(var i in configs)
        {
          if(configs[i] != '' && configs[i] != undefined)
          {
            var option = theDoc.createElement('option');
            
            if(!selected && configs[i] == currentConfig)
            {
              option.selected = 'selected';
              selected = true;
            }
            
            option.value = configs[i];
            option.innerHTML = configs[i];
            option.id = configs[i];
            theDoc.getElementById('configurations').appendChild(option);
          }
        }
        
        GetConfigurationSummary();
      }
    }
    
    function GetConfigurationSummary(configArg)
    {
      switchConfiguration();
      var config;
      profilesArray = {};
      
      while(theDoc.getElementById('appendHook').hasChildNodes())
      {
        theDoc.getElementById('appendHook').removeChild(theDoc.getElementById('appendHook').lastChild);
      }
      while(theDoc.getElementById('treeDiv').hasChildNodes())
      {
        theDoc.getElementById('treeDiv').removeChild(theDoc.getElementById('treeDiv').lastChild);
      }
      while(theDoc.getElementById('piChart').hasChildNodes())
      {
        theDoc.getElementById('piChart').removeChild(theDoc.getElementById('piChart').lastChild);
      }
      
      var label = theDoc.createElement('label');
      label.innerHTML = 'Loading...';
      theDoc.getElementById('treeDiv').appendChild(label);
      
      var label1 = theDoc.createElement('label');
      label1.innerHTML = 'Loading...';
      theDoc.getElementById('piChart').appendChild(label1);
      
      if(configArg == undefined)
      {
        var element = theDoc.getElementById('configurations');
        config = element.options[element.selectedIndex].value;
      }
      else
      {
        config = configArg;
        currentConfig = configArg;
      }
      
      if(typeof now.SwitchConfigurationTo == 'function')
      {
        now.SwitchConfigurationTo(config); 
      }
      else
      {
        console.log('now.SwitchConfigurationTo(configName) is not defined, doing nothing');
        return;
      }
      
      if(typeof now.GetConfigSummary == 'function')
      {
        now.GetConfigSummary(config, function(scriptProfileBindings, profileObj, profiles, nodes){
          // manipulate elements here (i.e. pi charts, text, tables, etc.)
          // Will all be contained in the object parseMe that will use the 
          // object literal notation of javascript to allow the server side
          // to do the calculations, and then send exactly the data required to
          // the browser.
          saveProfileObjs = profileObj;
          for(var i in scriptProfileBindings)
          {
            var tr = theDoc.createElement('tr');
            var td0 = theDoc.createElement('td');
            var td1 = theDoc.createElement('td');
            var scriptName = theDoc.createElement('div');
            
            var profilesPorts = theDoc.createElement('div');
                        
            scriptName.innerHTML = i;
            profilesPorts.innerHTML = scriptProfileBindings[i];
            td0.appendChild(scriptName);
            td1.appendChild(profilesPorts);
            tr.appendChild(td0);
            tr.appendChild(td1);
            theDoc.getElementById('appendHook').appendChild(tr);
          }
          
          if(scriptProfileBindings.length == 0)
          {
            var tr = theDoc.createElement('tr');
            var td0 = theDoc.createElement('td0');
            var td1 = theDoc.createElement('td1');
            var label0 = theDoc.createElement('div');
            var label1 = theDoc.createElement('div');
            label0.innerHTML = 'N/A';
            label1.innerHTML = 'N/A';
            td0.appendChild(label0);
            td1.appendChild(label1);
            tr.appendChild(td0);
            tr.appendChild(td1);
            theDoc.getElementById('appendHook').appendChild(tr);
          }
          
          for(var i in profileObj)
          {
            var profile = {};
            profile.name = profileObj[i].name;
            profile.parent = profileObj[i].parent;
            profile.children = [];
            profile.isSelected = false;
            profile.listElement = null;
            profilesArray[profile.name] = profile;
          }
          
          for(var i in profilesArray)
          {
            for(var j in profilesArray)
            {
              if(profilesArray[j].parent == profilesArray[i].name)
              {
                profilesArray[i].children.push(profilesArray[j].name);
              }
            }
          }
          
          var treeDiv = theDoc.getElementById('treeDiv');
          
          while(treeDiv.hasChildNodes())
          {
            treeDiv.removeChild(treeDiv.lastChild);
          }
          
          var drawNode = function(profile, parentDOMNode){
            var li = theDoc.createElement('li');
            var a = theDoc.createElement('a');
            
            profilesArray[profile].listElement = a;
            a.innerHTML = profile;
            a.className = 'unselectedProfile';
            a.setAttribute('onclick', 'onProfileClicked("' + profile + '")');
            
            li.appendChild(a);
            parentDOMNode.appendChild(li);
            
            if(profilesArray[profile].children.length)
            {
              var ul = theDoc.createElement('ul');
              li.appendChild(ul);  
            }
            
            for(var i = 0; i < profilesArray[profile].children.length; i++)
            {
              drawNode(profilesArray[profilesArray[profile].children[i]].name, ul);
            }
          }
          
          drawNode("default", treeDiv);
          
          var nodesPerProfile = {};
          var piChartRender = [];
          
          while(theDoc.getElementById('piChart').hasChildNodes())
          {
            theDoc.getElementById('piChart').removeChild(theDoc.getElementById('piChart').lastChild);
          }
          
          for(var i in nodes)
          {
            if(nodesPerProfile[nodes[i].pfile] === undefined)
            {
              nodesPerProfile[nodes[i].pfile] = 1;
            }
            else
            {
              nodesPerProfile[nodes[i].pfile]++;
            }
          }
          
          for(var pfile in nodesPerProfile)
          {
            var p = {};
            p.name = pfile;
            p.value = nodesPerProfile[pfile];
            piChartRender.push(p);
          }
          
          var pi = new NovaPiChart('piChart', 200);
          pi.Render(piChartRender);
        });
      }
      else
      {
        console.log('now.GetConfigSummary(configName, callback) is not defined, doing nothing');
        return;
      }
      setTimeout(function(){
        getSummaryOrNot = true;
      }, 2000);
    }
    
    function showLightBox(divIndex)
    {
      disableBackground(theDoc.getElementById('setup'));
      
      theDoc.getElementById('setup').style.opacity = '0.5';
      theDoc.getElementById('lightbox').style.display = 'block';
      
      if(divIndex == '0')
      {
        theDoc.getElementById('addConfigForm').style.display = 'block';
        theDoc.getElementById('newName').value = '';
        theDoc.getElementById('cloneConfigForm').style.display = 'none';
        theDoc.getElementById('profileInfo').style.display = 'none';
      }
      else if(divIndex == '1')
      {
        theDoc.getElementById('addConfigForm').style.display = 'none';
        theDoc.getElementById('cloneConfigForm').style.display = 'block';
        theDoc.getElementById('newNameClone').value = '';
        theDoc.getElementById('profileInfo').style.display = 'none';
        
        for(var i in configurationList)
        {
          if(configurationList[i] != '' && configurationList[i] != undefined)
          {
            var option = theDoc.createElement('option');
            
            option.value = configurationList[i];
            option.innerHTML = configurationList[i];
            option.id = configurationList[i];
            theDoc.getElementById('cloneMe').appendChild(option);
          }
        }
      }
      else if(divIndex == '2')
      {
        theDoc.getElementById('addConfigForm').style.display = 'none';
        theDoc.getElementById('cloneConfigForm').style.display = 'none';
        theDoc.getElementById('newNameClone').value = '';
        theDoc.getElementById('newName').value = '';
        theDoc.getElementById('profileInfo').style.display = 'block';
      }
      else
      {
        console.log('Unknown divIndex, doing nothing');
        closeLightbox();
      }
    }
    
    function checkExistingName(configName)
    {
      for(var i in configurationList)
      {
        if(configurationList[i] == configName)
        {
          return true;
        }
      }
      
      return false;
    }
    
    function checkParametersAdd()
    {
      if(theDoc.getElementById('newName').value == '')
      {
        alert('Must give a new name for New Configurations');
        return false;
      }
      else if(checkExistingName(theDoc.getElementById('newName').value) == true)
      {
        alert('Cannot add cloned configuration that has the same name as a present configuration');
        return false;
      }
      else
      {
        return true;
      }
    }
    
    function checkParametersClone()
    { 
      if(theDoc.getElementById('newNameClone').value == '')
      {
        alert('Must give a new name for Cloned Configurations');
        return false;
      }
      else if(checkExistingName(theDoc.getElementById('newNameClone').value) == true)
      {
        alert('Cannot add cloned configuration that has the same name as a present configuration');
        return false;
      }
      else
      {
        return true;
      }      
    }
    
    function removeConfig()
    {
      var configToRemove = theDoc.getElementById('configurations').value;
      
      if(configToRemove == 'default')
      {
        alert('Cannot remove default configuration');
        return;
      }
      else if(confirm('Are you sure you want to remove configuration ' + configToRemove + '? This cannot be undone.'))
      {
        if(typeof now.RemoveConfiguration == 'function')
        {
          now.RemoveConfiguration(configToRemove, function(name){
            theDoc.getElementById('default').selected = true;
            theDoc.getElementById('configurations').removeChild(theDoc.getElementById(name));
            
            for(var i in configurationList)
            {
              if(configurationList[i] == name)
              {
                configurationList[i] = undefined;
              }
            }
            
            for(var i in saveProfileObjs)
            {
              if(saveProfileObjs[i].name == name)
              {
                saveProfileObjs[i] = undefined;
              }
            }
            
            GetConfigurationSummary();
          });
        }
        else
        {
          alert('Could not remove configuration, now.RemoveConfiguration not found');
        }
      }
      else
      {
        return;
      }
    }
    
    function onProfileClicked(profile)
    {
      while(theDoc.getElementById('vendors').hasChildNodes())
      {
        theDoc.getElementById('vendors').removeChild(theDoc.getElementById('vendors').lastChild);
      }
      
      while(theDoc.getElementById('portsetHook').hasChildNodes())
      {
        theDoc.getElementById('portsetHook').removeChild(theDoc.getElementById('portsetHook').lastChild);
      }
      
      lightboxProfile = saveProfileObjs[profile].name;
      
      showLightBox('2');
      
      theDoc.getElementById('profileName').innerHTML = saveProfileObjs[profile].name + ' (OS: ' + saveProfileObjs[profile].os + ')';
      theDoc.getElementById('dropPercent').innerHTML = 'Packet Drop Percentage: ' + saveProfileObjs[profile].packetDrop;
      
      for(var i in saveProfileObjs[profile].vendors)
      {
        var tr = theDoc.createElement('tr');
        var td0 = theDoc.createElement('td');
        var td1 = theDoc.createElement('td');
        
        td0.innerHTML = saveProfileObjs[profile].vendors[i].name;
        td1.innerHTML = saveProfileObjs[profile].vendors[i].count;
        
        tr.appendChild(td0);
        tr.appendChild(td1);
        theDoc.getElementById('vendors').appendChild(tr);
      }

      var selectedSet = false;

      while(theDoc.getElementById('portsetSelect').hasChildNodes())
      {
        theDoc.getElementById('portsetSelect').removeChild(theDoc.getElementById('portsetSelect').lastChild); 
      }
      now.GetPortSets(profile, function(portset){
        for(var i in portset)
        {
          var option = theDoc.createElement('option');
          option.value = portset[i].setName;
          option.innerHTML = portset[i].setName;
          theDoc.getElementById('portsetSelect').appendChild(option);
          if(!selectedSet)
          {
            option.selected = true;
            selectedSet = true;
            generateDefaultRows(portset[i].TCPBehavior, portset[i].UDPBehavior, portset[i].ICMPBehavior);
            for(var port in portset[i].TCPExceptions)
            {
              generateExceptionRow(portset[i].TCPExceptions[port].portNum, portset[i].TCPExceptions[port].protocol, portset[i].TCPExceptions[port].behavior);
            }
            for(var port in portset[i].UDPExceptions)
            {
              generateExceptionRow(portset[i].UDPExceptions[port].portNum, portset[i].UDPExceptions[port].protocol, portset[i].UDPExceptions[port].behavior);
            }
          }
        }
      });
      
      if(saveProfileObjs[profile].fixedOrRange == 'fixed')
      {
        if(saveProfileObjs[profile].uptimeValue != '')
        {
          theDoc.getElementById('fixedOrUptime').innerHTML = 'Fixed Uptime Value: ' + saveProfileObjs[profile].uptimeValue;
        }
        else
        {
          theDoc.getElementById('fixedOrUptime').innerHTML = 'Fixed Uptime Value: None';
        }
      }
      else if(saveProfileObjs[profile].fixedOrRange == 'range')
      {
        theDoc.getElementById('fixedOrUptime').innerHTML = 'Uptime Value Range: ' + saveProfileObjs[profile].uptimeValueMin + ' to ' + saveProfileObjs[profile].uptimeValueMax;
      }
      else
      {
        console.log('fixedOrRange not found');
        closeLightbox();
        return;
      }
      
    }
    
    function getConfig()
    {
      return document.getElementById('configurations').value;
    }
    
    function confirmHaystackRestart()
    {
      now.IsHaystackUp(function(status){
        if(status == true && confirm("Restart the Haystack with current configuration " + getConfig() + "?"))
        {
          now.WriteHoneydConfig(function(){
            now.RestartHaystack();
          });
        }
        else
        {
          return;
        }
      });
    }
    
    function switchConfiguration()
    {
      if(typeof now.SwitchConfigurationTo == 'function')
      {
        var configSelect = document.getElementById('configurations');
        var config = configSelect.options[configSelect.selectedIndex].value;
        now.SwitchConfigurationTo(config);
      }
    }
    
    function disableBackground(source)
    {
      var disableUs = source.childNodes;
      for(var i in disableUs)
      {
        if(typeof disableUs[i] == 'object' && disableUs[i].tagName != undefined)
        {
          disableUs[i].disabled = true;
          if(disableUs[i].hasChildNodes())
          {
            disableBackground(disableUs[i]);
          }
        }
      }
    }

    function enableBackground(source)
    {
      var enableUs = source.childNodes;
      for(var i in enableUs)
      {
        if(typeof enableUs[i] == 'object' && enableUs[i].tagName != undefined)
        {
          enableUs[i].disabled = false;
          if(enableUs[i].hasChildNodes())
          {
            enableBackground(enableUs[i]);
          }
        }
      }
    }
    
    var rmLb = false;
    
    function handleOnclick(e)
    {
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      var loc = document.location.href;
      if(loc.indexOf('/suspects') != -1)
      {
        removeContextMenu(); 
      }
      if(rmLb && checkIfLightboxChild(source) == 'false' && (loc.indexOf('/autoConfig') == -1))
      {
        closeLightbox();
      }
      else if(document.getElementById('lightbox').style.display == 'block')
      {
        rmLb = true;
      }
    }
    
    function checkIfLightboxChild(source)
    {
      if(source.id != 'lightbox' && source.tagName != 'HTML')
      {
        return checkIfLightboxChild(source.parentNode);
      }        
      else if(source.id == 'lightbox')
      {
        return 'true';
      }
      else if(source.tagName == 'HTML')
      {
        return 'false';
      }
    }
    
    function generateDefaultRows(tcp, udp, icmp)
    {
      var tr0 = theDoc.createElement('tr');
      var td0 = theDoc.createElement('td');
      td0.innerHTML = 'default';
      var td1 = theDoc.createElement('td');
      td1.innerHTML = 'tcp';
      var td2 = theDoc.createElement('td');
      td2.innerHTML = tcp;
      tr0.appendChild(td0);
      tr0.appendChild(td1);
      tr0.appendChild(td2);
      theDoc.getElementById('portsetHook').appendChild(tr0);
      
      var tr1 = theDoc.createElement('tr');
      var td3 = theDoc.createElement('td');
      td3.innerHTML = 'default';
      var td4 = theDoc.createElement('td');
      td4.innerHTML = 'udp';
      var td5 = theDoc.createElement('td');
      td5.innerHTML = udp;
      tr1.appendChild(td3);
      tr1.appendChild(td4);
      tr1.appendChild(td5);
      theDoc.getElementById('portsetHook').appendChild(tr1);
      
      var tr2 = theDoc.createElement('tr');
      var td6 = theDoc.createElement('td');
      td6.innerHTML = 'default';
      var td7 = theDoc.createElement('td');
      td7.innerHTML = 'icmp';
      var td8 = theDoc.createElement('td');
      td8.innerHTML = icmp;
      tr2.appendChild(td6);
      tr2.appendChild(td7);
      tr2.appendChild(td8);
      theDoc.getElementById('portsetHook').appendChild(tr2);
    }
    
    function generateExceptionRow(num, proto, behav)
    {
      var tr0 = theDoc.createElement('tr');
      var td0 = theDoc.createElement('td');
      td0.innerHTML = num;
      var td1 = theDoc.createElement('td');
      td1.innerHTML = proto;
      var td2 = theDoc.createElement('td');
      td2.innerHTML = behav;
      tr0.appendChild(td0);
      tr0.appendChild(td1);
      tr0.appendChild(td2);
      theDoc.getElementById('portsetHook').appendChild(tr0);
    }
    
    function redoGrid()
    {
      while(theDoc.getElementById('portsetHook').hasChildNodes())
      {
        theDoc.getElementById('portsetHook').removeChild(theDoc.getElementById('portsetHook').lastChild);
      }
      var desired = theDoc.getElementById('portsetSelect').options[theDoc.getElementById('portsetSelect').selectedIndex].value;
      now.GetPortSets(lightboxProfile, function(portset){
        for(var i in portset)
        {
          if(desired == portset[i].setName)
          {
            generateDefaultRows(portset[i].TCPBehavior, portset[i].UDPBehavior, portset[i].ICMPBehavior);
            for(var port in portset[i].TCPExceptions)
            {
              generateExceptionRow(portset[i].TCPExceptions[port].portNum, portset[i].TCPExceptions[port].protocol, portset[i].TCPExceptions[port].behavior);
            }
            for(var port in portset[i].UDPExceptions)
            {
              generateExceptionRow(portset[i].TCPExceptions[port].portNum, portset[i].TCPExceptions[port].protocol, portset[i].TCPExceptions[port].behavior);
            }
          }
        }
      });
    }
    
    function init(){
        now.ready(function()
        {
          populateConfigSelect(configurationList);
        });
    };
  
block content
  div#setup(onclick='handleOnclick(event);')
    h2 Edit Configurations
    div#addNewConfig
      button#addConfig(onclick='showLightBox("0")', title='Create a new configuration group from scratch') Add Group
      button#cloneConfig(onclick='showLightBox("1")', title='Create a new configuration group by cloning an existing configuration') Clone Group
      br
      br
      button(onclick="window.location='/autoConfig'", title='Run the haystack autoconfiguration tool to create honeypots that mimic an existing network') Create Group From Network Scan

      br
      br

    div#treeAndPiContainer(style="border: 3px solid black; display: inline-block; margin: 5px 5px 5px 5px; text-align: center")
      h1 Current Group
      select#configurations(onchange='GetConfigurationSummary()')
      button#removeConfig(onclick='removeConfig()', title='Delete the currently selected group') Delete Group
      
      div(style="margin-top: 20px")
      hr
      h1 Current Profile Configuration
      button(onclick="window.location='/configHoneydProfiles'") Edit Profiles
      br
      br
      br
      div#treeDiv
        label Loading...
    
      div(style="margin-top: 20px")
      hr
      h1 Current Node Configuration
      button(onclick="window.location='/configHoneydNodes'") Edit Nodes
      br
      br
      br
      div#piChart

      div(style="margin-top: 20px")
      hr
      h1 Current Script Usage
      button(onclick="window.location='/scripts'") Edit Scripts
      br
      br
      br
      table(border='1', id='sizeAnchor')
        thead
          tr
            th(style='background-color: #d0e9fc;') Scripts
            th(style='background-color: #d0e9fc;') Profile:Port Binding
        tbody#appendHook      
  
  div#lightbox(class='white_content')
    div#addConfigForm
      form(method='post', id='addConfig', onsubmit='return checkParametersAdd();')
        label Name For New Configuration 
        br
        input#newName(name='newName', onkeypress='if(event.keyCode == 13){document.getElementById("addConfig").submit()}')
        br
        button#submitAdd Submit
    div#cloneConfigForm
      form(method='post', id='cloneConfig', onsubmit='return checkParametersClone();')
        label Select Configuration to Clone:
        br
        select#cloneMe(name='cloneSelect')
        br
        label Name For Cloned Configuration
        br
        input#newNameClone(name='newNameClone', onkeypress='if(event.keyCode == 13){document.getElementById("cloneConfig").submit()}')
        br
        button#submitClone Submit
    div#profileInfo
      h1#profileName(style='font-weight: bold;')
      h2 Misc. Information
      div(style='border: 2px solid #E8A02F; width: 250px')
        label#dropPercent
        br
        label#fixedOrUptime
        br
      br
      h2 Ethernet Info      
      table(border='1 solid')
        thead
          th(style='background-color: #d0e9fc;') Vendor
          th(style='background-color: #d0e9fc;') Count
        tbody#vendors
      br
      h2 Port Sets
      br
      select#portsetSelect(onchange='redoGrid()', style='width: 200px')
      br
      br
      div#tablePages(style="width: 100%; display: block;")
      br
      div(style="width:100%; height: 200px; overflow-y: scroll;")
        table(border='1')
          thead
            tr
              th(style='background-color: #d0e9fc;') Port Number
              th(style='background-color: #d0e9fc;') Protocol
              th(style='background-color: #d0e9fc;') Behavior
          tbody#portsetHook
      br
    button#closeLB(onclick='closeLightbox()') Close
