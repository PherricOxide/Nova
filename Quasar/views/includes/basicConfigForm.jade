//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

script
  var servicePrefs = '#{SERVICE_PREFERENCES}';
  var loaded = false;
  
  
  
  function changeDisabled()
  {
    if(document.getElementById("default").checked)
    {
      for(var i = 0; i < document.getElementById("length").getAttribute("value"); i++)
      {
        document.getElementById("if" + i).checked = true;
        document.getElementById("if" + i).disabled = true;
        document.getElementById("DEFAULT").value = "true";
      }
    }
    else
    {
      for(var i = 0; i < document.getElementById("length").getAttribute("value"); i++)
      {
        document.getElementById("if" + i).disabled = false;
        document.getElementById("DEFAULT").value = "false";
      }
    }
  }
  
  function checkAtLeastOne()
  {
    var numNotChecked = 0;
    
    for(var i = 0; i < document.getElementById("length").getAttribute("value"); i++)
    {
      if(!document.getElementById("if" + i).checked)
      {
        numNotChecked++;
      }
    }
    
    if(numNotChecked == document.getElementById("length").getAttribute("value"))
    {
      document.getElementById("if0").checked = true;
    }
  }
  
  function checkOnlyOne(which)
  {
    var numNotChecked = 0;
    
    for(var i = 0; i < document.getElementById("doppel_length").getAttribute("value"); i++)
    {
      if(!document.getElementById("dif" + i).checked)
      {
        numNotChecked++;
      }
      else if(document.getElementById("dif" + i).checked && ("dif" + i) !== which)
      {
        document.getElementById("dif" + i).checked = false;
      }
    }
    
    if(numNotChecked == document.getElementById("doppel_length").getAttribute("value"))
    {
      document.getElementById("dif0").checked = true;
    }
  }

  function setServicePreferences()
  {
    document.getElementById("sp").value = servicePrefs;
  }
  
  function fillServicePrefDiv()
  {
    var arr = [];
    arr = servicePrefs.split(':');
    
    var syslogLevel = arr[1][0];
    var emailLevel = arr[2][0];
    var sysMod = ((arr[1][1] == "-" || arr[1][1] == "+") ? arr[1][1] : "");
    var emailMod = ((arr[2][1] == "-" || arr[2][1] == "+") ? arr[2][1] : "");
    
    var syslogSection = document.createElement("div");
    syslogSection.id = "syslogDiv";
    
    var syslogLabel = document.createElement("label");
    syslogLabel.value = "Syslog";
    syslogLabel.innerHTML = "Syslog at";
    
    var syslogLevelSelect = document.createElement("select");
    syslogLevelSelect.id = "syslogLevelSelect";
    syslogLevelSelect.setAttribute('onchange', 'onValueChange()');
    
    var syslogModSelect = document.createElement("select");
    syslogModSelect.id = 'syslogModSelect';
    syslogModSelect.setAttribute('onchange', 'onValueChange()');
    
    var options = ["EMERGENCY", "ALERT", "CRITICAL", "ERROR", "WARNING", "NOTICE", "INFO", "DEBUG"];
    var mods = ["", "+", "-"];
    
    for(var i = 0; i < options.length; i++)
    {
      var option = document.createElement("option");
      option.value = (options.length - i - 1);
      option.id = options[i];
      option.innerHTML = options[i];
      
      if((options.length - i - 1) == syslogLevel)
      {
        option.selected = true;
      }
      
      syslogLevelSelect.appendChild(option);
    }
    
    for(var i = 0; i < mods.length; i++)
    {
      var option = document.createElement("option");
      option.value = mods[i];
      option.id = mods[i];
      
      switch(mods[i])
      {
        case '': option.innerHTML = "only";
                 option.id = "NA";
                 break;
        case '+': option.innerHTML = "or higher";
                  break;
        case '-': option.innerHTML = "or lower";
                  break;
      }
      
      if(mods[i] == sysMod)
      {
        option.selected = true;
      }
      
      syslogModSelect.appendChild(option);
    }
    
    syslogSection.appendChild(syslogLabel);
    syslogSection.appendChild(syslogLevelSelect);
    syslogSection.appendChild(syslogModSelect);
    
    for(var i = 0; i < options.length; i++)
    {
      var option = document.createElement("option");
      option.value = (options.length - i - 1);
      option.id = options[i];
      option.innerHTML = options[i];
      
    }
    
    for(var i = 0; i < mods.length; i++)
    {
      var option = document.createElement("option");
      option.value = mods[i];
      option.id = mods[i];
      
      switch(mods[i])
      {
        case '': option.innerHTML = "only";
                 option.id = "NA";
                 break;
        case '+': option.innerHTML = "or higher";
                  break;
        case '-': option.innerHTML = "or lower";
                  break;
      }
      
    }
    
    var emailSection = document.createElement("div");
    emailSection.id = "emailDiv";
    
    var emailLabel = document.createElement("label");
    emailLabel.value = "email";
    emailLabel.innerHTML = "Email alerts at";
    
    var emailLevelSelect = document.createElement("select");
    emailLevelSelect.id = "emailLevelSelect";
    emailLevelSelect.setAttribute('onchange', 'onValueChange()');
    
    var emailModSelect = document.createElement("select");
    emailModSelect.id = 'emailModSelect';
    emailModSelect.setAttribute('onchange', 'onValueChange()');
    
    for(var i = 0; i < options.length; i++)
    {
      var option = document.createElement("option");
      option.value = (options.length - i - 1);
      option.id = options[i];
      option.innerHTML = options[i];
      
      if((options.length - i - 1) == emailLevel)
      {
        option.selected = true;
      }
      
     emailLevelSelect.appendChild(option);
    }
    
    for(var i = 0; i < mods.length; i++)
    {
      var option = document.createElement("option");
      option.value = mods[i];
      option.id = mods[i];
      
      switch(mods[i])
      {
        case '': option.innerHTML = "only";
                 option.id = "NA";
                 break;
        case '+': option.innerHTML = "or higher";
                  break;
        case '-': option.innerHTML = "or lower";
                  break;
      }
      
      if(mods[i] == emailMod)
      {
        option.selected = true;
      }
      
      emailModSelect.appendChild(option);
    }
    
    emailSection.appendChild(emailLabel);
    emailSection.appendChild(emailLevelSelect);
    emailSection.appendChild(emailModSelect);
    
    document.getElementById("servicePrefs").appendChild(syslogSection);
    document.getElementById("servicePrefs").appendChild(emailSection);
  }
  
  function onValueChange()
  {
    var element;
    var newServicePrefString = "0:";
    
    element = document.getElementById("syslogLevelSelect");
    newServicePrefString += element.options[element.selectedIndex].value;
    element = document.getElementById("syslogModSelect");
    var checkSysMod = element.options[element.selectedIndex].value;

    newServicePrefString += (checkSysMod != "NA" ? checkSysMod : "");
    newServicePrefString += ";1:";
    
    element = document.getElementById("emailLevelSelect");
    newServicePrefString += element.options[element.selectedIndex].value;
    
    element = document.getElementById("emailModSelect");
    var checkEmailMod = element.options[element.selectedIndex].value;
    newServicePrefString += (checkEmailMod != "NA" ? checkEmailMod : "");
    newServicePrefString += ";";
    servicePrefs = newServicePrefString;
    setServicePreferences();
  }
  
  function changeSMTPAuth()
  {
    if(document.getElementById("SMTP_USEAUTH").checked)
    {
      document.getElementById("SMTP_USEAUTH").value = "1";
      document.getElementById("SMTP_PORT").value = "#{SMTP_PORT}";
      document.getElementById("SMTP_USER").removeAttribute('readonly');
      document.getElementById("SMTP_USER").removeAttribute('style');
      document.getElementById("SMTP_PASS").removeAttribute('readonly');
      document.getElementById("SMTP_PASS").removeAttribute('style');
    }
    else
    {
      document.getElementById("SMTP_USEAUTH").value = "0";
      document.getElementById("SMTP_PORT").value = "25";
      document.getElementById("SMTP_USER").setAttribute('readonly', true);
      document.getElementById("SMTP_PASS").setAttribute('readonly', true);
      document.getElementById("SMTP_USER").setAttribute('style', 'font-style: italic; color: grey');
      document.getElementById("SMTP_PASS").setAttribute('style', 'font-style: italic; color: grey');
    }
  }
  
  function init()
  {
  now.ready(function()
  {
    if(loaded)
    {
      return;
    }
    else
    {
      loaded = true;
    }
    
    if(document.getElementById("sp") !== undefined)
    {
      setServicePreferences();
      fillServicePrefDiv();
      changeSMTPAuth();
    }
  });
  }

h2 Email Notifications
label Enable email alerts?
if(EMAIL_ALERTS_ENABLED == 1)
  input(type="checkbox", id="EMAIL_ALERTS_ENABLED", name="EMAIL_ALERTS_ENABLED", value=EMAIL_ALERTS_ENABLED, checked)
else
  input(type="checkbox", id="EMAIL_ALERTS_ENABLED", name="EMAIL_ALERTS_ENABLED", value=EMAIL_ALERTS_ENABLED)
br
br

label Use SMTP Authentication?
if(SMTP_USEAUTH == "true")
  input(type="checkbox", id="SMTP_USEAUTH", name="SMTP_USEAUTH", value=SMTP_USEAUTH, onclick="changeSMTPAuth()", checked)
else
  input(type="checkbox", id="SMTP_USEAUTH", name="SMTP_USEAUTH", value=SMTP_USEAUTH, onclick="changeSMTPAuth()")
br
br

label SMTP Address
input.wide(name="SMTP_ADDR", value=SMTP_ADDR)
br

label SMTP Port
input.wide(type="number", min="0", max="65536", name="SMTP_PORT", id="SMTP_PORT", value=SMTP_PORT)
br

label SMTP Domain
input.wide(name="SMTP_DOMAIN", id="SMTP_DOMAIN", value=SMTP_DOMAIN)
br

label SMTP Username
input.wide(name="SMTP_USER",  id="SMTP_USER", value=SMTP_USER)
br

label SMTP Password
input.wide(type="password", name="SMTP_PASS", id="SMTP_PASS", value=SMTP_PASS)
br

label Email Recipients
input.wide(name="RECIPIENTS", value=RECIPIENTS)
  br
br

h2 Logger Settings
div(id="servicePrefs")
  input(id="sp", name="SERVICE_PREFERENCES", value="", readonly=true, type="hidden")
br

    
h2 Ethernet Interfaces
- if (DEFAULT == "true")
  div
    input(type="checkbox", value="default", id="default", onclick="changeDisabled()", checked, width=10)
    span Listen on all available interfaces
  - for (var i = 0; i < INTERFACES.length; i++)
    - if(INTERFACES[i].checked == 1)
      div
        input(type="checkbox", value=INTERFACES[i].iface, id="if#{i}", name="INTERFACE", width=10, disabled=true, onclick="checkAtLeastOne()", checked)
        #{INTERFACES[i].iface} (Alias: #{INTERFACE_ALIASES[i]})
    - else
      div
        input(type="checkbox", value=INTERFACES[i].iface, id="if#{i}", name="INTERFACE", width=10, onclick="checkAtLeastOne()", disabled=true)
        #{INTERFACES[i].iface} (Alias: #{INTERFACE_ALIASES[i]})
- else
  div
    input(type="checkbox", value="default", id="default", onclick="changeDisabled()", width=10)
    span Listen on all available interfaces
  - for (var i = 0; i < INTERFACES.length; i++)
    - if(INTERFACES[i].checked == 1)
      div
        input(type="checkbox", value=INTERFACES[i].iface, id="if#{i}", name="INTERFACE", width=10, onclick="checkAtLeastOne()", checked)
        #{INTERFACES[i].iface} (Alias: #{INTERFACE_ALIASES[i]})
    - else
      div
        input(type="checkbox", value=INTERFACES[i].iface, id="if#{i}", name="INTERFACE", width=10, onclick="checkAtLeastOne()")
        #{INTERFACES[i].iface} (Alias: #{INTERFACE_ALIASES[i]})
        
 hidden(id="length", value=INTERFACES.length) 
 input(type="hidden", name="DEFAULT", id="DEFAULT", value=DEFAULT)

br
label Enable Doppelganger?
if(DM_ENABLED == 1)
  input(type="checkbox", id="DM_ENABLED", name="DM_ENABLED", value=DM_ENABLED, checked)
else
  input(type="checkbox", id="DM_ENABLED", name="DM_ENABLED", value=DM_ENABLED)
br

br
Label Doppelganger Interface
br
- for (var i = 0; i < DOPPELGANGER_INTERFACE.length; i++)
  - if(DOPPELGANGER_INTERFACE[i].checked == 1)
    div    
      input(type="checkbox", value=DOPPELGANGER_INTERFACE[i].iface, id="dif#{i}", name="DOPPELGANGER_INTERFACE", width=10, onclick="checkOnlyOne('dif#{i}')", checked) 
      #{DOPPELGANGER_INTERFACE[i].iface}
  - else
    div 
      input(type="checkbox", value=DOPPELGANGER_INTERFACE[i].iface, id="dif#{i}", name="DOPPELGANGER_INTERFACE", width=10, onclick="checkOnlyOne('dif#{i}')") 
      #{DOPPELGANGER_INTERFACE[i].iface}
          
hidden(id="doppel_length", value=DOPPELGANGER_INTERFACE.length)
br

