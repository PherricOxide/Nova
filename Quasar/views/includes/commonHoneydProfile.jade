//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2012
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

script
        var ports = {};
        var lastPortSet = "";
        var loadedName;
        var profile;
        var origProfile;
        var portList = new function() {};
        var newProfile = "#{newProfile}";
        var portIndexes = [];

        // Configuration details for the scripts
        var scriptConfigurations = {};
        var currentLightboxIndex = 0;

        var loaded = false;

        var currentName;
        if (newProfile == "true")
        {
                currentName = "#{parentName}";
                loadedName = currentName;
                //console.log("Creating child of profile " + currentName);
        } else {
                currentName = "#{oldName}";
                loadedName = currentName;
                //console.log("Editing profile " + currentName);
        }

        var inheritanceChanged = function() {};
        var scriptSelectionChanged = function() {};
        var uptimeTypeChanged = function() {};
        var deletePort = function() {};
        var addPort = function(port) {};
        var portBehaviorChanged = function() {};
        var configureScript = function() {};
        var saveChanges = function() {};
        var savedChanges = function() {};
        var checkIfRestartNeeded = function() {};

        var openLightbox = function()
        {
            document.getElementById('setup').style.opacity = '0.5';
            document.getElementById('lightbox').style.display = 'block';
        }

        var closeLightbox = function()
        {
            var table = document.getElementById("configureScriptTable")
            console.log(table);
            scriptConfigurations[currentLightboxIndex] = {};
            for (var i = 0; i < table.children.length; i++)
            {
               if (table.children[i].tagName === "TR")
               {
                    scriptConfigurations[currentLightboxIndex][table.children[i].children[0].innerHTML] = table.children[i].children[1].children[0].value;
               }
            }


            document.getElementById('lightbox').style.display = 'none';
            document.getElementById('setup').style.opacity = '1';
        }

        // Make the HTML view reflect the internal model
        var refreshVendorsView = function()
        {
                var vendorDiv = document.getElementById("ethernetVEndors");
                dojo.empty(vendorDiv);

                // Populate the table header
                var headerRow = document.createElement("tr");
                var headerName = document.createElement("th");
                headerName.innerHTML = "Ethernet Vendor";

                var headerCount = document.createElement("th");
                headerCount.innerHTML = "Count";

                headerRow.appendChild(headerName);
                headerRow.appendChild(headerCount);
                vendorDiv.appendChild(headerRow);

                // Populate the table rows
                for (var i in profile.ethernet)
                {
                        var vendorRow = document.createElement("tr");

                        // Vendor name cell
                        var vendorNameCell = document.createElement("td");
                        var vendorName = document.createElement("input");
                        vendorNameCell.appendChild(vendorName);
                        
                        vendorName.id = "vendorName" + i;
                        vendorName.value = profile.ethernet[i].vendor;
                        vendorName.setAttribute('readonly', true);

                        // Vendor count cell
                        var vendorCountCell = document.createElement("td");
                        var vendorCount = document.createElement("input");
                        vendorCountCell.appendChild(vendorCount);
                        vendorCount.onchange = function(i, vendorCount) {return function() {changedEthernetVendorCount(i, vendorCount.value)}}(i, vendorCount);
                        
                        vendorCount.id = "vendorCount" + i;
                        
                        if (navigator.userAgent.indexOf("MSIE") == "-1") {
                                vendorCount.type = "number";
                        }
                        vendorCount.min = 0;
                        vendorCount.value = profile.ethernet[i].count;
                        
                       
                        // Vendor delete button
                        var vendorDeleteCell = document.createElement("td");
                        var vendorDelete = document.createElement("button");
                        vendorDeleteCell.appendChild(vendorDelete);

                        vendorDelete.innerHTML = "Delete";
                        vendorDelete.onclick = function(i){return function(){deleteEthernetVendor(i);}}(i)

                        vendorRow.appendChild(vendorNameCell);
                        vendorRow.appendChild(vendorCountCell);
                        vendorRow.appendChild(vendorDeleteCell);
                                
                        vendorDiv.appendChild(vendorRow);

                }
        };

        var changedEthernetVendorCount = function(vendorIndex, vendorCount)
        {
                profile.ethernet[vendorIndex].count = vendorCount;
        };

        var addEthernetVendor = function(vendorName, vendorCount)
        {
                // Check for duplicates
                for (var i in profile.ethernet)
                {
                        if (profile.ethernet[i].vendor == vendorName)
                        {
                                alert("Vendor already exists. Can not have duplicates.");
                                return;
                        }
                }
                profile.ethernet.push({vendor: vendorName, count: vendorCount});
                refreshVendorsView();
        };

        var deleteEthernetVendor = function(vendorIndex)
        {
                profile.ethernet.splice(vendorIndex, 1); 
                refreshVendorsView();
        };

        var updatePortsModel = function()
        {
            var TCPExceptions = new Array();
            var UDPExceptions = new Array();
            ports.size = portIndexes.length;
            for (var i = 0; i < portIndexes.length; i++) 
            {
                var port = {};
                port.portNum = dojo.byId("portNum" + portIndexes[i]).value;

                port.scriptConfiguration = scriptConfigurations[portIndexes[i]];

                switch (Number(dojo.byId("portBehavior" + portIndexes[i]).value)) 
                {
                    case 0: port.behavior = "closed"; break; 
                    case 1: port.behavior = "filtered"; break;
                    case 2: port.behavior = "open"; break;
                    case 3: port.behavior = "script"; break;
                    case 4: port.behavior = "tarpit open"; break;
                    case 5: port.behavior = "tarpit script"; break;
                }

                if (port.behavior == "script")
                {
                    port.scriptName = dojo.byId("portScriptDrop" + portIndexes[i]).value;
                } else {
                    port.scriptName = "";
                }

                port.protocol = dojo.byId("portType" + portIndexes[i]).value;

                if (port.protocol == "tcp")
                {
                    TCPExceptions.push(port);
                } else {
                    UDPExceptions.push(port);
                }
            }
            for (var i in profile.portSets)
            {
                if (profile.portSets[i].setName == lastPortSet)
                {
                    profile.portSets[i].TCPExceptions = TCPExceptions;
                    profile.portSets[i].UDPExceptions = UDPExceptions;
                    profile.portSets[i].TCPBehavior = dojo.byId("defaultTCPAction").value;
                    profile.portSets[i].UDPBehavior = dojo.byId("defaultUDPAction").value;
                    profile.portSets[i].ICMPBehavior = dojo.byId("defaultICMPAction").value;
                    break;
                }
            }

        };

        var updatePortSetLists = function()
        {
            dojo.empty(document.getElementById("portSetSelection"));
            if (profile.portSets.length != 0)
            {
                dojo.byId("portSetDiv").style.display = "block";
                document.getElementById("portSetSelection").disabled = false;
                for (var i in profile.portSets)
                {
                    var option = document.createElement("option");
                    option.value = profile.portSets[i].setName;
                    option.innerHTML = profile.portSets[i].setName;
                    document.getElementById("portSetSelection").appendChild(option);
                }
            } else {
                dojo.byId("portSetDiv").style.display = "none";
            }
            portSetSelectionChanged();
        };

        var deletePortset = function()
        {
            var setName = dojo.byId("portSetSelection").value;
            
            for (var i in profile.portSets)
            {
                if (profile.portSets[i].setName == setName)
                {
                    profile.portSets.splice(i, 1);
                    break;
                }
            }
          
            updatePortSetLists();
        };

        var renamePortset = function()
        {
          var oldName = dojo.byId('portSetSelection').value;
          var newName = dojo.byId('newPortsetName').value;
          var profile = dojo.byId('name').value;
          now.RenamePortset(profile, oldName, newName, function(){
            location.reload(true);
          });
        }

        var addNewPortset = function addNewPortSet()
        {
            var setName = dojo.byId("newPortSetName").value;

            if (setName == "")
            {
                alert("Port sets must have a name.");
                return;
            }

            for (var i in profile.portSets)
            {
                if (profile.portSets[i].setName == setName)
                {
                    alert("A port set by that name already exists");
                    return;
                }
            }

            var portSet = {setName: setName
                , ICMPBehavior: "filtered"
                , TCPBehavior: "filtered"
                , UDPBehavior: "filtered"
                , TCPExceptions: []
                , UDPExceptions: []
            }

            // Push to the profile object
            profile.portSets.push(portSet);

            updatePortsModel();

            // Add into the port set dropdown box
            updatePortSetLists();

            // Set is as the current portset
            document.getElementById("portSetSelection").value = setName;
            portSetSelectionChanged();
        };
        // Currently edited port set has changed
        var portSetSelectionChanged = function()
        {
            if (lastPortSet != "")
            {
                updatePortsModel();
            }

            lastPortSet = document.getElementById("portSetSelection").value;

            var newPortSet = document.getElementById("portSetSelection").value;

            dojo.empty("portTable");
            scriptConfigurations = {};

            portIndexes = [];
            for (var i in profile.portSets)
            {
                if (profile.portSets[i].setName == newPortSet)
                {
                    dojo.byId("defaultICMPAction").value = profile.portSets[i].ICMPBehavior;
                    dojo.byId("defaultTCPAction").value = profile.portSets[i].TCPBehavior;
                    dojo.byId("defaultUDPAction").value = profile.portSets[i].UDPBehavior;
                        
                    for (var port in profile.portSets[i].TCPExceptions)
                    {
                        addPort(profile.portSets[i].TCPExceptions[port]);
                    }

                    for (var port in profile.portSets[i].UDPExceptions)
                    {
                        addPort(profile.portSets[i].UDPExceptions[port]);
                    }
                }
            }
        };


        function selectItemByValue(elmnt, value)
        {
                for(var i=0; i < elmnt.options.length; i++)
                {
                        if(elmnt.options[i].value == value)
                        {
                        elmnt.selectedIndex = i;
                        }
                }
        }

        function init()
        {
        require(["dijit/registry", "dijit/form/FilteringSelect"], function()
        {
                function obj() {};
                saveChanges = function()
                {

                        var ethVendorList = [];

                        profile.oldName = "#{oldName}";
                        profile.parentProfile = dojo.byId("parentName").value;
                        profile.name = dojo.byId("name").value;


                        profile.personality = dojo.byId("personality").value;
                        profile.dropRate = dojo.byId("dropRate").value;
                        profile.uptimeMin = dojo.byId("uptimeMin").value;

                        if (dojo.byId("uptimeType").selectedIndex == 0)
                        {
                                profile.uptimeMax = dojo.byId("uptimeMin").value;
                        }  else {
                                profile.uptimeMax = dojo.byId("uptimeMax").value;
                        }


                        profile.isPersonalityInherited = dojo.byId("inheritPersonality").checked;
                        profile.isDropRateInherited = dojo.byId("inheritDropRate").checked;
                        profile.isUptimeInherited = dojo.byId("inheritUptime").checked;
                        updatePortsModel();

                        now.WouldProfileSaveDeleteNodes(profile, function(result)
                        {
                            var userConfirmed = true;
                            if (result == true)
                            {
                                userConfirmed = confirm("Warning: this will delete nodes that used deleted portsets");
                            }

                                if (userConfirmed)
                                {
                                    //need conditional here for add vs. edit, false == edit, true == add
                                    try {
                                        now.SaveProfile(profile, savedChanges);
                                    } catch (err)
                                    {
                                        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
                                        console.log("err was: " + err);
                                    }
                                }

                        });

                };

                savedChanges = function(err) 
                {
                    if (err == null)
                    {
                        window.location="/configHoneydProfiles";
                        now.IsHaystackUp(checkIfRestartNeeded); 
                    } else {
                        alert("Unable to save profile: " + err);
                    }
                };


                 checkIfRestartNeeded = function(haystackUp)
                 {
                    if (haystackUp)
                    {
                        var restartHaystack = confirm("You must restart the haystack for this to take effect. Restart it now?");
                        if (restartHaystack)
                        {
                            now.RestartHaystack();
                        }
                    }

                    window.location="/configHoneydProfiles";
                };

                addPort = function(port) 
                {
                        if (port == undefined) 
                        {
                                port = {};
                                port.portNum = 0;
                                port.protocol = "tcp";
                                port.behavior = "open";
                                port.isInherited = false;
                                port.scriptName = "NA";
                                port.scriptConfiguration = {};
                        }

                        var portDiv = dojo.byId("portTable");
                        var portUID;

                        if (portIndexes.length > 0) 
                        {
                                portUID = portIndexes[portIndexes.length - 1] + 1;
                        }
                        else
                        {
                                portUID = 0;
                        }

                        portIndexes.push(portUID);
                        scriptConfigurations[portUID] = port.scriptConfiguration;

                        //var row = "<tr id='portRow" + portUID + "'>";
                        var row = document.createElement("tr");
                        row.id = "portRow" + portUID;


                        //row += "<td><input id='portNum" + portUID + "' type='number' min=1 max=65535 value=" + port.portNum + "> </td>";
                        var numContainer = document.createElement("td");
                        var numInput = document.createElement("input");
                        if (navigator.userAgent.indexOf("MSIE") == "-1") {
                                numInput.type = 'number';
                        }
                        numInput.id = 'portNum' + portUID;
                        numInput.min = 1;
                        numInput.max = 65535;
                        numInput.value = port.portNum;
                        numContainer.appendChild(numInput);
                        row.appendChild(numContainer);
                                
                        //row += "<td><select id ='portType";
                        var typeContainer = document.createElement("td");
                        var typeSelect = document.createElement("select");
                        typeSelect.id = 'portType' + portUID;

                        options = ["udp", "tcp"];
                        for(j = 0; j < options.length; j++)
                        {
                                var option = document.createElement("option");
                                option.value = options[j];
                                option.innerHTML = options[j];
                                if(port.protocol == options[j])
                                {
                                        option.selected = true;
                                }
                                typeSelect.appendChild(option);
                        }

                        typeContainer.appendChild(typeSelect);
                        row.appendChild(typeContainer);

                        //row += "<td><select onchange='portBehaviorChanged()' id='portBehavior" + portUID + "'>";
                        var behaviorContainer = document.createElement("td");
                        var behaviorSelect = document.createElement("select");
                        behaviorSelect.id = 'portBehavior' + portUID;
                        behaviorSelect.onchange = portBehaviorChanged;
                        
                         
                        options = ["closed", "filtered", "open", "script", "tarpit open", "tarpit script"];
                        longOptions = ["Closed: Respond with TCP RST or ICMP Port Error", "Filter: Drop packets and do not respond", "Open: Establish incoming connections", "Script: Emulate a service", "Open with tarpit", "Script with tarpit"];
                        
                        for (j = 0; j < options.length; j++) 
                        {
                                if (port.behavior == options[j]) 
                                {
                                        //row += "<option value='" + j + "' SELECTED>" + longOptions[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.value = j;
                                        option.selected = true;
                                        option.innerHTML = longOptions[j];
                                        behaviorSelect.appendChild(option);
                                } 
                                else 
                                {
                                        //row += "<option value='" + j + "'>" + longOptions[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.value = j;
                                        option.innerHTML = longOptions[j];
                                        behaviorSelect.appendChild(option);
                                }
                        }

                        //row += "</select></td>";
                        behaviorContainer.appendChild(behaviorSelect);
                        row.appendChild(behaviorContainer);



                        var scriptContainer = document.createElement("td");
                        var scriptSelect = document.createElement("select");
                        scriptSelect.id = 'portScriptDrop' + portUID;
                        scriptSelect.setAttribute("onchange", 'scriptSelectionChanged(' + portUID + ')');

                        //row += "<td><select id='portScriptDrop";
                        //row += portUID;
                        //row += "'>"; 
                        var scripts = "#{scripts}";
                        options = scripts.split(",");
                        matchingScriptFound = false;

                        for (j = 0; j < options.length; j++) 
                        {
                                if (port.scriptName == options[j]) 
                                {
                                        //row += "<option SELECTED>" + options[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.selected = true;
                                        option.innerHTML = options[j];
                                        scriptSelect.appendChild(option);
                                        matchingScriptFound = true;
                                } 
                                else 
                                {
                                        //row += "<option>" + options[j] + "</option>";
                                        var option = document.createElement("option");
                                        option.innerHTML = options[j];
                                        scriptSelect.appendChild(option);
                                }
                        }

                        // Have a blank option if no script is selected
                        if (!matchingScriptFound) 
                        {
                                //row += "<option disabled='true' SELECTED>NA</option>";
                                var option = document.createElement("option");
                                option.disabled = true;
                                option.selected = true;
                                option.innerHTML = 'NA';
                                scriptSelect.appendChild(option);
                        } 
                        else 
                        {
                                //row += "<option disabled='true'>NA</option>";
                                var option = document.createElement("option");
                                option.disabled = true;
                                option.innerHTML = 'NA';
                                scriptSelect.appendChild(option);
                        }
                        
                        scriptContainer.appendChild(scriptSelect);
                        row.appendChild(scriptContainer);

                        var configureContainer = document.createElement("td");
                        var configureButton = document.createElement("button");
                        configureButton.setAttribute('type', 'button');
                        configureButton.setAttribute('onclick', 'configureScript(' + portUID + ')');
                        configureButton.innerHTML = "Configure";
                        configureButton.id = "configureButton" + portUID;
                        configureContainer.appendChild(configureButton);
                        row.appendChild(configureContainer);

                        // Delete button 
                        var buttonContainer = document.createElement("td");
                        var deleteButton = document.createElement("button");
                        deleteButton.setAttribute('type', 'button');
                        deleteButton.setAttribute('onclick', 'deletePort(' + portUID + ')');
                        deleteButton.innerHTML = 'Delete';
                        buttonContainer.appendChild(deleteButton);
                        row.appendChild(buttonContainer);

                        //row += "</tr>";

                        dojo.byId("portTable").appendChild(row);

                        portBehaviorChanged();
                };


                uptimeTypeChanged = function() 
                {
                        if (dojo.byId("uptimeType").selectedIndex == 0) 
                        {
                                dojo.byId("uptimeMax").style.display = "none";
                                document.getElementById("uptimeLabel").innerHTML = "Uptime";
                        } 
                        else 
                        {
                                dojo.byId("uptimeMax").style.display = "block"; 
                                document.getElementById("uptimeLabel").innerHTML = "Uptime Range";
                        }
                };

                configureScript = function(portIndex)
                {
                    currentLightboxIndex = portIndex;
                    var scriptName = document.getElementById('portScriptDrop' + portIndex).value;
                    if (scriptName === "NA")
                    {
                        return;
                    }

                    try {

                        now.GetScript(scriptName, function(script)
                        {
                            dojo.empty("configureScript");
                            var table = document.getElementById("configureScript").appendChild(document.createElement("TABLE"));
                            table.id = "configureScriptTable";
                            
                            var optionCount = 0;
                            for (var option in script.GetOptions)
                            {
                                var tr = table.appendChild(document.createElement("TR"));
                                var keyData = tr.appendChild(document.createElement("TD"));
                                var valueData = tr.appendChild(document.createElement("TD"));
                                var valueSelect = valueData.appendChild(document.createElement("SELECT"));

                                for (var i = 0; i < script.GetOptions[option].length; i++)
                                {
                                    var selectOption = document.createElement("OPTION");
                                    selectOption.text = script.GetOptions[option][i];
                                    valueSelect.add(selectOption, null);

                                    if (scriptConfigurations[portIndex][option] === script.GetOptions[option][i])
                                    {
                                        selectOption.selected = true;
                                    }
                                }

                                
                                keyData.innerHTML = option;
                                

                                optionCount++;

                            }
                            
                            if (optionCount == 0)
                            {
                                alert("No configuration options for the selected script");
                                return;
                            }

                            openLightbox();
                        });

                    } catch (err) {
                        console.log("Error was: " + err);
                    }
                };

                portBehaviorChanged = function()
                {
                        for (var i = 0; i < portIndexes.length; i++) 
                        {
                                if (dojo.byId("portBehavior" + portIndexes[i]).value == "3" || dojo.byId("portBehavior" + portIndexes[i]).value == "5") 
                                {
                                        dojo.byId("portScriptDrop" + portIndexes[i]).disabled = false;
                                        dojo.byId("configureButton" + portIndexes[i]).style.display = "block";
                                } 
                                else 
                                {
                                        dojo.byId("portScriptDrop" + portIndexes[i]).disabled = true;
                                        dojo.byId("configureButton" + portIndexes[i]).style.display = "none";
                                }
                        }
                };

                deletePort = function(portUID) 
                {
                        var row = dojo.byId("portRow" + portUID);
                        row.parentNode.removeChild(row);
                        var idx = portIndexes.indexOf(portUID);
                        if (idx != -1) 
                        {
                                portIndexes.splice(idx, 1);
                        }
                        updatePortsModel();
                };

                inheritanceChanged = function() 
                {
                        if (dojo.byId("personality").disabled = dojo.byId("inheritPersonality").checked) 
                        {
                                dojo.byId("personality").value = origProfile.personality;
                                dijit.byId("personality").setDisabled(true);
                        } 
                        else
                        {
                                dijit.byId("personality").setDisabled(false);
                        }

                        if (dojo.byId("dropRate").disabled = dojo.byId("inheritDropRate").checked) 
                        {
                                dojo.byId("dropRate").value = origProfile.dropRate;
                        }

                        if (dojo.byId("uptimeMin").disabled = dojo.byId("inheritUptime").checked) 
                        {
                                dojo.byId("uptimeMin").value = origProfile.uptimeMin;
                        }

                        if (dojo.byId("uptimeMax").disabled = dojo.byId("inheritUptime").checked) 
                        {
                                dojo.byId("uptimeMax").value = origProfile.uptimeMax;
                        }

                        if (dojo.byId("uptimeType").disabled = dojo.byId("inheritUptime").checked) 
                        {
                                if (origProfile.uptimeMin == origProfile.uptimeMax) 
                                {
                                        dojo.byId("uptimeType").selectedIndex = 0;
                                } 
                                else 
                                {
                                        dojo.byId("uptimeType").selectedIndex = 1; 
                                }
                        }

                        uptimeTypeChanged();
                };

                scriptSelectionChanged = function(portIndex) {
                    // Clear the port configuration options
                    scriptConfigurations[portIndex] = {};


                    // TODO Internet Explore doesn't support select element .value
                    var scriptName = document.getElementById("portScriptDrop" + portIndex).value;

                    // Populate the defaults
                    now.GetScript(scriptName, function(script)
                    {
                        for (var option in script.GetOptions)
                        {
                            scriptConfigurations[portIndex][option] = script.GetOptions[option][0];
                        }
                    });
                };

                now.ready(function()
                {
                        if (loaded) 
                        {
                                return;
                        } 
                        else 
                        {
                                loaded = true;
                        }
                        
                        try {
                        now.GetProfile(currentName, function(pfile)
                        {
                                if (pfile == undefined)
                                {
                                        alert("ERROR: Unable to fetch the requested profile information.");
                                        window.location="/configHoneydProfiles";
                                        return;
                                }
                                else
                                {
                                        console.log(pfile);
                                }

                                profile = pfile;
                                origProfile = pfile;

                                if (newProfile == "true") 
                                {
                                        dojo.byId("name").value = "New Profile";
                                        dojo.byId("parentName").value = "#{parentName}";
                                        dojo.byId("inheritPersonality").checked = true;
                                        dojo.byId("inheritDropRate").checked = true; 
                                        dojo.byId("inheritUptime").checked = true; 

                                        // We don't want copies of the port sets (or do we?)
                                        profile.portSets = [];
                                } 
                                else 
                                {
                                        dojo.byId("name").value = profile.name;
                                        if(profile.name == "default")
                                        {
                                          dojo.byId("row1").style.display = 'none';
                                        }
                                        else
                                        {
                                          dojo.byId("parentName").value = profile.parentProfile;
                                        }
                                        dojo.byId("inheritPersonality").checked = profile.isPersonalityInherited;
                                        dojo.byId("inheritDropRate").checked = profile.isDropRateInherited;
                                        dojo.byId("inheritUptime").checked = profile.isUptimeInherited;
                                }

                                dojo.byId("personality").value = profile.personality;
                                dojo.byId("uptimeMin").value = profile.uptimeMin;
                                dojo.byId("uptimeMax").value = profile.uptimeMax;

                                if (profile.uptimeMin != profile.uptimeMax)
                                {
                                        dojo.byId("uptimeType").selectedIndex = 1;
                                        uptimeTypeChanged();
                                }


                                dojo.byId("dropRate").value = profile.dropRate;

                                // Populate the port set options
                                updatePortSetLists();
                                
                                portSetSelectionChanged();

                                refreshVendorsView();
                                inheritanceChanged();
                        });

                        } catch(err)
                        {
                            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
                            console.log("err was: " + err);
                        }  
                });
        });
        }


