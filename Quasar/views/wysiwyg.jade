////============================================================================
//// Name        : wysiwyg.jade
//// Copyright   : DataSoft Corporation 2011-2013
////  Nova is free software: you can redistribute it and/or modify
////   it under the terms of the GNU General Public License as published by
////   the Free Software Foundation, either version 3 of the License, or
////   (at your option) any later version.
////
////   Nova is distributed in the hope that it will be useful,
////   but WITHOUT ANY WARRANTY; without even the implied warranty of
////   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
////   GNU General Public License for more details.
////
////   You should have received a copy of the GNU General Public License
////   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
////============================================================================

extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="wysiwyg.css", media="screen")
  script(type='text/javascript', src='scripts/jquery-ui-1.10.1.custom.js')
  script(type='text/javascript', src='scripts/jquery.ui.selectable.js')
  script(type='text/javascript', src='https://flexicontent.googlecode.com/svn-history/r1517/trunk/com_flexicontent_v2.x/site/librairies/fancybox/lib/jquery.mousewheel-3.0.6.pack.js')
  script
    window.jQuery.ui || document.write('<script type="text/javascript" src="scripts/jquery-ui-1.10.1.custom.js"><\\/script>');
    window.jQuery.mousewheel || document.write('<script type="text/javascript" src="scripts/jquery-mousewheel.min.js"><\\/script>');
    var configurationList = !{JSON.stringify(configurations)};
    var nodeList = !{JSON.stringify(nodes)};
    var interfaces = !{JSON.stringify(interfaces)};
    var currentConfig = '#{current}';
    var theDoc = document;
    var haveMac = [];
    var profilesArray = new Array();
    var $topology = '';
    var $dragMe = '';
    var $hoverInfo = '';
    var $profileInfo = '';
    var $context = '';
    var $modalSplit = '';
    var clicked = false;
    var selectedProfile = undefined;
    var nodeTopology = {};
    var nodeCount = {};
    var eleCount = 0;
    var zoom = {width:50, height:50};
    var oldX = 0;
    var oldY = 0;
    var selected = [];
    var topoDrag = false;
    var noclick = false;
    
    function setUpSelects()
    {
      var configSelect = $('#configurations');
      for(var i in configurationList)
      {
        if(configurationList[i] != '' && configurationList[i] != undefined)
        {
          var option = theDoc.createElement('option');
          option.value = configurationList[i];
          option.innerHTML = configurationList[i];
          option.id = configurationList[i];
          configSelect.append(option);
        }
      }
    }
    
    function showProfileInfo(e)
    {
      if(!clicked)
      {
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        $('#name').html(source.innerHTML);
        now.GetProfile(source.innerHTML, function(profile){
          var $vendors = $('#vendors');
          var $portSets = $('#portSets');
          var $interfaces = $('#interfaces');
          
          $vendors.empty();
          $portSets.empty();
          $interfaces.empty();
          
          for(var i in profile.ethernet)
          {
            var option = theDoc.createElement('option');
            option.innerHTML = profile.ethernet[i].vendor;
            $vendors.append(option);
          }
          for(var i in profile.portSets)
          {
            var option = theDoc.createElement('option');
            option.innerHTML = profile.portSets[i].setName;
            $portSets.append(option);
          }
          for(var i in interfaces)
          {
            var option = theDoc.createElement('option');
            option.innerHTML = interfaces[i];
            $interfaces.append(option);
          }
          
          var pointerCss = {top:($(source).position().top + $(source).height()),
                            left:($(source).position().left + $(source).outerWidth() + 20)};
                            
          $profileInfo.css(pointerCss).fadeIn(200, function(){
          });
        });
      }
    }
    
    function hideProfileInfo(e)
    {
      if(!clicked)
      {
        if(e == undefined)
        {
          $profileInfo.fadeOut(200, function(){
          });
          return;
        }
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        if($('#profilesHook').find(source) && source.tagName == 'TD')
        {
          return;
        }
        else
        {
          $profileInfo.fadeOut(200, function(){
          });
        }
      }
    }
    
    function profileClicked(e)
    {
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      if(clicked && source.innerHTML != selectedProfile)
      {
        return;
      }
      else if(clicked && source.innerHTML == selectedProfile)
      {
        $(source).css('background-color', '');
        selectedProfile = undefined;
        clicked = false
        $profileInfo.fadeOut(200, function(){
        });
        return;
      }
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      $(source).css('background-color', '#E8A02F');
      selectedProfile = source.innerHTML;
      clicked = true;
    }
    
    function updateDragHeader()
    {
      var set = $('#nodeNumber').val();
      $('#setNumNodes').html(set);
    }
  
    function clearProfileSelected()
    {
      $('#profilesHook').find('td').css('background-color', '');
      selectedProfile = undefined;
    }
    
    function repopulateProfilesList(cb)
    {
      currentConfig = $('#configurations').val();
      
      if(typeof now.GetConfigSummary == 'function')
      {
        now.GetConfigSummary(currentConfig, function(scriptProfileBindings, profileObj, profiles, nodes){
          var profHook = $('#profilesHook');
          profHook.empty();
          
          var endDex = profileObj.length;
          
          for(var i in profileObj)
          {
            if(profileObj[i].name != 'default')
            {
              var profile = {};
              profile.name = profileObj[i].name;
              profile.parent = profileObj[i].parent;
              profile.children = [];
              profilesArray[profile.name] = profile;
              var append = theDoc.createElement('tr');
              var td0 = theDoc.createElement('td');
              td0.innerHTML = profile.name;
              td0.onclick = profileClicked;
              append.appendChild(td0);
              profHook.append(append);
            }
          }
          
          profHook.find('td').first().toggleClass('first');
          if(profHook.find('td').size() >= 3)
          {
            profHook.find('td').slice(1, -1).toggleClass('middle');
          }
          profHook.find('td').last().toggleClass('last');
          
          for(var i in profilesArray)
          {
            for(var j in profilesArray)
            {
              if(profilesArray[j].parent == profilesArray[i].name)
              {
                profilesArray[i].children.push(profilesArray[j].name);
              }
            }
          }
          cb && cb()
        });
      }
    }
    
    function saveSelectedParameters()
    {
      clicked = false;
      $dragMe.draggable('enable');
      var dragMeCss = {border:'2px solid black',
                       opacity:'1'};
      $dragMe.css(dragMeCss);
      hideProfileInfo();
      var profileObject = {};
      profileObject.selectedProfile = selectedProfile;
      placeBackgroundImage($dragMe, selectedProfile);
      profileObject.count = $('#nodeNumber').val();
      profileObject.portset = $('#portSets').val();
      profileObject.vendor = $('#vendors').val();
      profileObject.iface = $('#interfaces').val();
      profileObject.ip = $('#allocationType').val();
      if(profileObject.ip != 'DHCP')
      {
        profileObject.ip = {ip1:$('#ip1').val(), ip2:$('#ip2').val(), ip3:$('#ip3').val(), ip4:$('#ip4').val()};
      }
      
      nodeTopology[eleCount] = profileObject;
    }
    
    function showIpBlock()
    {
      if($('#allocationType').val() != 'DHCP')
      {
        $('#ipBlock').css('display', 'block');
      }
      else
      {
        $('#ipBlock').css('display', 'none');
      }
    }
    
    function adjustColumns()
    {
      var $sameHeightDivs = $('.sameHeight');
      var maxHeight = 0;
      $sameHeightDivs.each(function(){
        maxHeight = Math.max(maxHeight, $(this).outerHeight());
      });
      $sameHeightDivs.css({height: maxHeight + 'px'});
    }
    
    function handleCanvasEleHover(e, ui)
    {
      if(e.type == 'mouseenter')
      {
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        var hoverInfoCss = {top:($(source).position().top),
                            left:(($(source).position().left + $(source).outerWidth()) + 10)};
        var titleCss = {'font-weight':'bold', 'font-size':'18px'};
        
        $('#hoverName').css(titleCss).html($(source).data('profile'));
        $('#hoverPortset').html('');
        $('#hoverVendor').html('');
        $('#hoverInterface').html('');
        $('#hoverAddress').html('');
        
        if(nodeTopology[source.id] != undefined && !$(source).data('preexisting'))
        {
          $('#hoverPortset').html(nodeTopology[source.id].portset);
          $('#hoverVendor').html(nodeTopology[source.id].vendor);
          $('#hoverInterface').html(nodeTopology[source.id].iface);
          
          if(nodeTopology[source.id].ip != 'DHCP')
          {
            var address = '';
            for(var i in nodeTopology[source.id].ip)
            {
              address += nodeTopology[source.id].ip[i] + '.';
            }
            address = address.substring(0, address.length - 1);
            $('#hoverAddress').html('IP Range starting at: ' + address);
          }
          else
          {
            $('#hoverAddress').html('DHCP');
          }
        }
        else
        {
          if($(source).data('mac') != undefined)
          {
            var splitMac = $(source).data('mac');
            var mac = splitMac.split(',')[0];
            for(var i in nodeList)
            {
              if(nodeList[i].mac == mac)
              {
                $('#hoverInterface').html(nodeList[i].interface);
                $('#hoverPortset').html(nodeList[i].portset);
                $('#hoverVendor').html(nodeList[i].vendor);
                if(nodeList[i].ip != 'DHCP')
                {
                  $('#hoverAddress').html('IP Range starting at: ' + nodeList[i].ip);
                }
                else
                {
                  $('#hoverAddress').html(nodeList[i].ip);
                }
                break;
              }
            }
          }
        }
        
        $hoverInfo.css(hoverInfoCss).fadeIn(200, function(){
        });
      }
      else if(e.type == 'mouseleave')
      {
        $hoverInfo.fadeOut(200, function(){
        });
      }
      else if(e.type == 'drag')
      {
        $hoverInfo.fadeOut(150, function(){
        });
        $contextMenu.fadeOut(150, function(){
        });
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
        var dx = x - oldX;
        var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
        var dy = y - oldY;
        
        if($(source).attr('class') != undefined && $(source).attr('class').indexOf('ui-selected') != -1)
        {
          $('.ui-selected').not($(source)).each(function(){
            var relX = parseInt(dx) + parseInt($(this).css('left'));
            if(relX > $topology.outerWidth() - 100)
            {
              relX = $topology.outerWidth() - 100;
            }
            else if(relX < 0)
            {
              relX = 0;
            }
            var relY = parseInt(dy) + parseInt($(this).css('top'));
            if(relY > $topology.outerHeight() - zoom.height)
            {
              relY = $topology.outerHeight() - zoom.height;
            }
            else if(relY < 0)
            {
              relY = 0;
            }
            var adjustPos = {left:relX, top:relY};
            $(this).css(adjustPos);    
          });
        }
        oldX = x;
        oldY = y;
      }
      else if(e.type == 'dragstop')
      {
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        var hoverInfoCss = {top:($(source).position().top),
                            left:($(source).position().left + $(source).outerWidth()) + 10};
        $hoverInfo.css(hoverInfoCss).fadeIn(200, function(){
        });
      }
    }
    
    function canvasElementOnclick(e)
    {
      if(!noclick)
      {
        e.stopImmediatePropagation();
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
       
        if(source.tagName != 'DIV')
        {
          source = source.parentNode;
        }
        if($(source).attr('class').indexOf('ui-selected') != -1)
        {
          $(source).css('border', '').removeClass('ui-selected');
          for(var i in selected)
          {
            if(selected[i] == source)
            {
              delete selected[i];
            }
          }
        }
        else
        {
          $(source).css('border', '1px ridge red').addClass('ui-selected');
          selected.push(source);
        }
      }
      else
      {
        noclick = false;
      }
    }
    
    function addNodeToCanvas(nodeObj, type, left, top, xEleCount, yEleCount, splitData)
    {
      var div = theDoc.createElement('div');
      
      var x = 0;
      var y = 0;
      
      if(left != undefined && top != undefined)
      {
        x = left;
        y = top;
      }
      
      $(div)
      .click(function(e){
        canvasElementOnclick(e);
      })
      .draggable({tolerance: 'pointer',
        cursorAt: {top:25,left:15},
        cursor: 'move',
        containment:'#nodeCanvas',
        revert: 'invalid'});

      if(xEleCount != undefined && yEleCount != undefined)
      {
        y = (yEleCount * zoom.height);
        x = (xEleCount * zoom.width);
        
        if(x > $topology.outerWidth())
        {
          yEleCount += 1;
          xEleCount = 0;
          y = (yEleCount * zoom.width);
          x = (xEleCount * zoom.width);
        }
      }
      
      var prepopCss = {position:'absolute', left:(x + 'px'), top:(y + 'px')};
      $(div).data('profile', nodeObj.selectedProfile)
            .data('preexisting', true)
            .css(prepopCss)
            .css(zoom)
            .attr('class', 'ui-draggable canvasElement');
      if(nodeObj.mac != undefined && type == 'prepop')
      {
        $(div).data('mac', nodeObj.mac);
      }
      else if(type == 'split')
      {
        $(div).data('mac', splitData.splNodeMacs);
      }
      placeBackgroundImage($(div), nodeObj.selectedProfile);
      setCanvasElementEventHandlers(div);
      
      div.id = eleCount;
      
      var text = theDoc.createElement('label');
      text.innerHTML = nodeObj.count;
      text.style.fontSize = '18px';
      text.id = eleCount + 'text';
      div.appendChild(text);
      
      if(type == 'drop')
      {
        var ipType = '';
        var ip1, ip2, ip3, ip4 = '0';
        if(nodeTopology[eleCount].ip != 'DHCP')
        {
          ip1 = nodeTopology[eleCount].ip.ip1;
          ip2 = nodeTopology[eleCount].ip.ip2;
          ip3 = nodeTopology[eleCount].ip.ip3;
          ip4 = nodeTopology[eleCount].ip.ip4;
        }
        else
        {
          ipType = 'DHCP';
        }
        var profile = nodeTopology[eleCount].selectedProfile;
        var portset = nodeTopology[eleCount].portset.toString();
        var vendor = nodeTopology[eleCount].vendor;
        var ethInterface = nodeTopology[eleCount].iface;
        var count = nodeTopology[eleCount].count.toString();
        now.createHoneydNodes(ipType, ip1, ip2, ip3, ip4, profile, portset, vendor, ethInterface, count);
        
        nodes = [];
        var setMAC = [];

        now.GetNodes(function(nodesList){
          nodes = nodesList;
          var add = true;
          for(var i in nodes)
          {
            add = true;
            for(var j in haveMac)
            {
              if(haveMac[j] == nodes[i].mac)
              {
                add = false;
                break;
              }
            }
            if(add)
            {
              haveMac.push(nodes[i].mac);
              setMAC.push(nodes[i].mac);
            } 
          }
          $(div).data('mac', setMAC.join());
          nodeTopology[eleCount].mac = setMAC.join();
          nodeTopology[eleCount].coordinates = {x:x, y:y};
          $topology.append(div);

          eleCount += 1;
        });
      }
      else if(type == 'prepop')
      {
        var macSplit = nodeObj.mac.split(',')[0];
      
        for(var j in nodeList)
        {
          if(nodeList[j].mac == macSplit)
          {
            nodeTopology[eleCount] = {};
            nodeTopology[eleCount].iface = nodeList[j].interface;
            nodeTopology[eleCount].count = nodeObj.count.toString();
            nodeTopology[eleCount].portset = nodeList[j].portset.toString();
            nodeTopology[eleCount].vendor = nodeList[j].vendor;
            nodeTopology[eleCount].ip = nodeList[j].ip;
            nodeTopology[eleCount].selectedProfile = nodeObj.selectedProfile;
            nodeTopology[eleCount].mac = nodeObj.mac;
            nodeTopology[eleCount].coordinates = {x:x, y:y};
            break;
          }
        }
        
        $topology.append(div);
        eleCount += 1;
      }
      else if(type == 'split')
      {
        $(splitData.src).data('mac', splitData.srcNodeMacs);
        $('#' + splitData.src.id + 'text').html(splitData.srcCount);
        nodeTopology[splitData.src.id].count = splitData.srcCount;
        
        var testMac = splitData.splNodeMacs.split(',')[0];
        for(var j in nodes)
        {
          if(nodes[j].mac == testMac)
          {
            nodeTopology[eleCount] = {};
            nodeTopology[eleCount].iface = nodes[j].interface;
            nodeTopology[eleCount].count = splitData.splCount;
            nodeTopology[eleCount].portset = nodes[j].portset.toString();
            nodeTopology[eleCount].vendor = nodes[j].vendor;
            nodeTopology[eleCount].ip = nodes[j].ip;
            nodeTopology[eleCount].selectedProfile = nodeObj.selectedProfile;
            nodeTopology[eleCount].mac = splitData.splNodeMacs;
            nodeTopology[eleCount].coordinates = {x:x, y:y};
            break;
          }
        }
        $topology.append(div);
        eleCount += 1;
      }
      else
      {
        return undefined;
      }
      if(xEleCount != undefined)
      {
        xEleCount += 1;
        return {xCount:xEleCount, yCount:yEleCount};
      }
      return undefined;
    }
    
    function prepopulateCanvasWithNodes()
    {
      var xEleCount = 0;
      var yEleCount = 0;
      var eleCountUpdate = {};
      
      now.ReadWysiwygTopology(function(topo){
        var findOtherNodesList = [];
        if(topo != undefined && topo.length > 0)
        {
          for(var i in topo)
          {
            findOtherNodesList.push(topo[i].mac);
            
            eleCountUpdate = addNodeToCanvas(topo[i], 'prepop', undefined, undefined, xEleCount, yEleCount);
            if(eleCountUpdate != undefined)
            {
              xEleCount = eleCountUpdate.xCount;
              yEleCount = eleCountUpdate.yCount;
            }
            else
            {
              eleCountUpdate = {};
            }
          }
        }
        else
        {
          for(var i in nodeList)
          {
            haveMac.push(nodeList[i].mac);
            var key = nodeList[i].pfile + nodeList[i].portset + nodeList[i].interface + nodeList[i].ip;
            if(nodeCount[key] == undefined)
            {
              nodeCount[key] = {};
              nodeCount[key].count = 1;
              nodeCount[key].mac = nodeList[i].mac;
              nodeCount[key].selectedProfile = nodeList[i].pfile;
            }
            else
            {
              nodeCount[key].count += 1;
              nodeCount[key].mac += ',' + nodeList[i].mac;
            }
          }
          for(var i in nodeCount)
          {
            eleCountUpdate = addNodeToCanvas(nodeCount[i], 'prepop', undefined, undefined, xEleCount, yEleCount);
            if(eleCountUpdate != undefined)
            {
              xEleCount = eleCountUpdate.xCount;
              yEleCount = eleCountUpdate.yCount;
            }
            else
            {
              eleCountUpdate = {};
            }
          }
          nodeCount = {};
        }
      });
    }
    
    function placeBackgroundImage(ele, profile)
    {
      var append = ' no-repeat center, #E4F2FF';
      if(profile == undefined)
      {
        ele.css('background', 'url("images/wysiwyg/unknown_75.png")' + append);
        ele.find('label').css('color', 'white');
        return;
      }
      now.GetProfile(profile, function(pfile){
        var pers = pfile.personality;
        if(pers.indexOf('Windows') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/win_75.png")' + append);
        }
        else if(pers.indexOf('OpenBSD') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/openbsd_75.png")' + append);
        }
        else if(pers.indexOf('Linux') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/linux_75.png")' + append);
          ele.find('label').css('color', 'white');
        }
        else if(pers.indexOf('Mac OS X') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/macosx_75.png")' + append);
        }
        else
        {
          ele.css('background', 'url("images/wysiwyg/unknown_75.png")' + append);
          ele.find('label').css('color', 'white');
        }
      });
    }
    
    function handleOffscreenIndicators()
    {
      var width = $topology.outerWidth();
      var height = $topology.outerHeight();
      $('.canvasElement').each(function(){
        if(parseInt($(this).css('left')) > width)
        {
          if(theDoc.getElementById(this.id + 'osir') == undefined)
          {
            var div = theDoc.createElement('div');
            div.className = 'offscreenIndicatorRight';
            div.id = this.id + 'osir';
            var pos = {left:width, top:$(this).css('top')};
            $(div).css(pos);
            $topology.append(div);
          }
          else
          {
            var pos = {top:$(this).css('top')};
            $('#' + this.id + 'osir').css(pos);
          }
        }
        else if(parseInt($(this).css('left')) + zoom.width <= 0)
        {
          if(theDoc.getElementById(this.id + 'osil') == undefined)
          {
            var div = theDoc.createElement('div');
            div.className = 'offscreenIndicatorLeft';
            div.id = this.id + 'osil';
            var pos = {left:-20, top:$(this).css('top')};
            $(div).css(pos);
            $topology.append(div);
          }
          else
          {
            var pos = {top:$(this).css('top')};
            $('#' + this.id + 'osil').css(pos);
          }
        }
        else if(parseInt($(this).css('top')) < -zoom.width)
        {
          if(theDoc.getElementById(this.id + 'osit') == undefined)
          {
            var div = theDoc.createElement('div');
            div.className = 'offscreenIndicatorTop';
            div.id = this.id + 'osit';
            var pos = {left:$(this).css('left'), top:0};
            $(div).css(pos);
            $topology.append(div);
          }
          else
          {
            var pos = {left:$(this).css('left')};
            $('#' + this.id + 'osit').css(pos);
          }
        }
        else if(parseInt($(this).css('top')) > height)
        {
          if(theDoc.getElementById(this.id + 'osib') == undefined)
          {
            var div = theDoc.createElement('div');
            div.className = 'offscreenIndicatorBottom';
            div.id = this.id + 'osib';
            var pos = {left:$(this).css('left'), top:height - 45};
            $(div).css(pos);
            $topology.append(div);
          }
          else
          {
            var pos = {left:$(this).css('left')};
            $('#' + this.id + 'osib').css(pos);
          }
        }
        if(parseInt($(this).css('top')) > 0)
        {
          $('#' + this.id + 'osit').remove();
        }
        if(parseInt($(this).css('top')) < height)
        {
          $('#' + this.id + 'osib').remove();
        }
        if(parseInt($(this).css('left')) < width - zoom.width)
        {
          $('#' + this.id + 'osir').remove();
        }
        if(parseInt($(this).css('left')) >= 0)
        {
          $('#' + this.id + 'osil').remove();
        }
      });
    }
    
    function setCanvasElementEventHandlers(ele)
    {
      $(ele)
        .on('dragstop', function(e){
          handleCanvasEleHover(e);
          $('.ui-selected').css('border', '').removeClass('ui-selected');
          $(this).on('mouseenter', function(e){
            e.stopImmediatePropagation();
            handleCanvasEleHover(e);
          })
          .on('mouseleave', function(e){
            e.stopImmediatePropagation();
            handleCanvasEleHover(e);
          })
        })
        .on('mouseenter', function(e){
          e.stopImmediatePropagation();
          handleCanvasEleHover(e);
        })
        .on('mouseleave', function(e){
          e.stopImmediatePropagation();
          handleCanvasEleHover(e);
        })
        .on('drag', function(e, ui){
          e.stopImmediatePropagation();
          handleCanvasEleHover(e, ui);
          $(this).off('mouseleave');
          $(this).off('mouseenter');
        })
        .on('dragstart', function(e, ui){
          oldX = ui.helper.offset().left - $('#nodeCanvas').offset().left;
          oldY = ui.helper.offset().top - $('#nodeCanvas').offset().top;
          if($(this).attr('class').indexOf('ui-selected') == -1)
          {
            clearSelectedCanvas();
          }
        })
        .on('contextmenu', function(e){
          e.preventDefault();
          $hoverInfo.fadeOut(200);
          toggleContextMenu(e);
        });
    }
    
    function toggleContextMenu(e)
    {
      $hoverInfo.fadeOut(200, function(){
      });
      
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      
      if(source.className.indexOf('canvasElement') == -1)
      {
        return;
      }
      
      $(source).off('mouseenter').css('border', '1px ridge red').addClass('ui-selected');
      
      selected.push(source);
      
      var left = $(source).css('left');
      var top = $(source).css('top');
      
      if($contextMenu.is(':hidden'))
      {
        var $delN = $('#deleteNodes');
        var $mergeN = $('#mergeNodes');
        var $splitN = $('#splitNodes');
        
        if(($('.ui-selected').size() > 1) && ($(source).attr('class').indexOf('ui-selected') != -1))
        {
          $delN.removeClass('single');
          $mergeN.on('click', function(e){
            var profiles = [];
            $('.ui-selected').each(function(){
              mergeSelected(source);
            });
          }).show();
          $splitN.hide();
        }
        else if(($('.ui-selected').size() == 1) && ($(source).attr('class').indexOf('ui-selected') != -1))
        {
          $splitN.hide();
          if(parseInt($('#' + source.id + 'text').html()) > 1)
          {
            $splitN.on('click', function(e){
              splitSelected(source);
            }).show();
            $delN.removeClass('single');
          }
          else
          {
            $delN.addClass('single');
          }
          $mergeN.hide();
        }
        
        $delN.on('click', function(e){
          deleteSelected();
        });
        
        var cmCss = {left: (parseInt(left) + (zoom.width / 2)),
                     top: (parseInt(top) + (zoom.width / 2))};
                     
        $contextMenu.css(cmCss).fadeIn(200, function(){
        });
        cmCss.left += (zoom.width / 2);
        $modalSplit.css(cmCss);
      }
    }
    
    function splitSelected(ele)
    {
      $('#rangeDiv').empty();
      var text = theDoc.createElement('p');
      var slider = theDoc.createElement('input');
      slider.id = 'splitRange';
      slider.setAttribute('type', 'range');
      if(slider.type == 'range')
      {
        $(text).html('Use the slider to split the nodes into two groups:');
        $(slider).attr('step', 1);
        $(slider).attr('min', 1);
        $(slider).attr('max', (parseInt($('#' + ele.id + 'text').html()) - 1));
        $(slider).attr('value', Math.floor(parseInt($('#' + ele.id + 'text').html()) / 2));
        var counter = theDoc.createElement('label');
        counter.id = 'updateMe';
        counter.innerHTML = Math.floor(parseInt($('#' + ele.id + 'text').html()) / 2) + ', ' + (parseInt($('#' + ele.id + 'text').html()) - Math.floor(parseInt($('#' + ele.id + 'text').html()) / 2));
        var container = theDoc.createElement('div');
        var bottom = theDoc.createElement('label');
        bottom.id = 'bottom';
        var top = theDoc.createElement('label');
        top.id = 'top';
        $(bottom).html('1');
        $(top).html($('#' + ele.id + 'text').html());
        $(container).append(bottom);
        $(container).append(slider);
        $(container).append(top);
        
        function updateCounter(id)
        {
          $('#updateMe').html($('#splitRange').val() + ', ' + ($('#' + id + 'text').html() - $('#splitRange').val()));
        }
        
        $(slider).on('change', function(){updateCounter(ele.id)});
        
        $('#rangeDiv').append(text);
        $('#rangeDiv').append(counter);
        $('#rangeDiv').append(container);
        
        $('#splitAccept').on('click', function(){
          var y = parseInt($(ele).css('top'));
          var x = parseInt($(ele).css('left')) + 50;
          var splitData = {};
          var splitEnd = parseInt($('#splitRange').val());
          var getSplitMacs = $(ele).data('mac').split(',');
          var group1Macs = [];
          var group2Macs = [];
          var nodeObj = {};
          nodeObj.selectedProfile = $(ele).data('profile');
          
          splitData.src = ele;
          
          for(var i = 0; i < splitEnd; i++)
          {
            group1Macs.push(getSplitMacs[i]);
          }
          for(var i = splitEnd; i < getSplitMacs.length; i++)
          {
            group2Macs.push(getSplitMacs[i]);
          }
          
          splitData.srcNodeMacs = group1Macs.join();
          splitData.splNodeMacs = group2Macs.join();
          var newCount = parseInt($('#' + ele.id + 'text').html()) - parseInt($('#splitRange').val());
          splitData.splCount = newCount.toString();
          splitData.srcCount = $('#splitRange').val();
          nodeObj.count = splitData.splCount;
          
          addNodeToCanvas(nodeObj, 'split', x, y, undefined, undefined, splitData);
          
          $modalSplit.dialog('close');
        });
        $modalSplit.dialog('open');
      }
      else
      {
        $(text).html('Use the input box to split the nodes into two groups:');
        $(slider).attr('min', 1);
        $(slider).attr('max', (parseInt($('#' + ele.id + 'text').html()) - 1));
        $(slider).attr('value', Math.floor(parseInt($('#' + ele.id + 'text').html()) / 2));
        var counter = theDoc.createElement('label');
        counter.id = 'updateMe';
        counter.innerHTML = Math.floor(parseInt($('#' + ele.id + 'text').html()) / 2) + ', ' + (parseInt($('#' + ele.id + 'text').html()) - Math.floor(parseInt($('#' + ele.id + 'text').html()) / 2));
        var container = theDoc.createElement('div');
        $(container).append(bottom);
        $(container).append(slider);
        $(container).append(top);
        
        function updateCounter(id)
        {
          if($('#splitRange').val() > $('#splitRange').attr('max') || $('#splitRange').val() < 1)
          {
            $('#splitRange').val('1');
          }
          $('#updateMe').html($('#splitRange').val() + ', ' + ($('#' + id + 'text').html() - $('#splitRange').val()));
        }
        
        $(slider).on('change', function(){updateCounter(ele.id)});
        
        $('#rangeDiv').append(text);
        $('#rangeDiv').append(counter);
        $('#rangeDiv').append(container);
        
        $('#splitAccept').on('click', function(){
          var y = parseInt($(ele).css('top'));
          var x = parseInt($(ele).css('left')) + 50;
          var splitData = {};
          var splitEnd = parseInt($('#splitRange').val());
          var getSplitMacs = $(ele).data('mac').split(',');
          var group1Macs = [];
          var group2Macs = [];
          var nodeObj = {};
          nodeObj.selectedProfile = $(ele).data('profile');
          nodeObj.count = $('#splitRange').val();
          
          splitData.src = ele;
          
          for(var i = 0; i < splitEnd; i++)
          {
            group1Macs.push(getSplitMacs[i]);
          }
          for(var i = splitEnd; i < getSplitMacs.length; i++)
          {
            group2Macs.push(getSplitMacs[i]);
          }
          
          splitData.srcNodeMacs = group1Macs.join();
          splitData.splNodeMacs = group2Macs.join();
          var newCount = parseInt($('#' + ele.id + 'text').html()) - parseInt($('#splitRange').val());
          console.log('newCount == ' + newCount);
          splitData.srcCount = newCount.toString();
          splitData.splCount = $('#splitRange').val();
          
          addNodeToCanvas(nodeObj, 'split', x, y, undefined, undefined, splitData);
          
          $modalSplit.dialog('close');
        });
        $modalSplit.dialog('open');
      }
    }
    
    function mergeSelected(base)
    {
      var div = theDoc.createElement('div');
      var baseProfile = $(base).data('profile');
      var baseMac = $(base).data('mac').split(',')[0];
      var baseVendor = '';
      var basePortset = '';
      var baseIp = '';
      var baseInterface = '';
      
      for(var i in nodeList)
      {
        if(baseMac == nodeList[i].mac)
        {
          baseVendor = nodeList[i].vendor;
          basePortset = nodeList[i].portset;
          baseIp = nodeList[i].ip;
          baseInterface = nodeList[i].iface;
          break;
        }
      }
      
      var keepGoing = true;
      var id = '';
      $('ui-selected').each(function(){
        id = $(this).attr('id');
        console.log('id == ' + id);
        if(!keepGoing)
        {
          return;
        }
        if($(this).data('profile') != baseProfile || nodeTopology[id].vendor != baseVendor
           || nodeTopology[id].portset != basePortset || nodeTopology[id].ip != baseIp
           || nodeTopology[id].iface != baseInterface)
        {
          alert('In order to merge nodes, all nodes to merge must have the same general characteristics');
          keepGoing = false;
          return;
        }
      });
      if(keepGoing)
      {
        console.log('Would be merging');
        // If there was no problem, merge the nodes, remove the two old ones and put in the
        // aggregate WYSIWYG node
      }
      else
      {
        console.log('keepGoing was false, not merging');
        return;
      }
    }
    
    function deleteSelected()
    {
      var deleteNodes = [];
      $('.ui-selected').each(function(){
        if(nodeTopology[$(this).attr('id')] != undefined)
        {
          delete nodeTopology[$(this).attr('id')];
        }
        var splitMac = $(this).data('mac').split(',');
        for(var i in splitMac)
        {
          deleteNodes.push(splitMac[i]);
        }
        $(this).remove();
      });
      
      now.deleteNodes(deleteNodes);
    }
    
    function clearSelectedCanvas()
    {
      for(var i in selected)
      {
        $(selected[i]).removeClass('ui-selected');
        $(selected[i]).css('border', '');
      }
      $('.canvasElement').on('mouseenter', function(e){
        e.stopImmediatePropagation();
        handleCanvasEleHover(e);
      });
      $contextMenu.fadeOut(200);
      selected = [];
    }
    
    $(function(){
      $dragMe = $('#dragMe');
      $hoverInfo = $('#hoverInfo');
      $hoverInfo.hide();
      $profileInfo = $('#profileInfo');
      $profileInfo.hide();
      $contextMenu = $('#nodeContextMenu');
      $contextMenu.hide();
      $topology = $('#nodeCanvas');
      $modalSplit = $('#modalDialog');
      $modalSplit.dialog({
        appendTo: '#container',
        height: 180,
        width: 200,
        draggable: true,
        autoOpen: false,
        closeOnEscape: true,
        modal: true,
        show: 200,
        hide: 200
      })
      .on('dialogdrag', function(e, ui){
        
      })
      .on('dialogdragstop', function(e, ui){
        $modalSplit.hide();
      })
      
      $(document).keydown(function(e){
        if(e.keyCode == 46)
        {
          deleteSelected();
        }
      });
      
      $topology
        .css('width', '1')
        .selectable({appendTo:'#nodeCanvas',
                     distance:30,
                     cancel:'.canvasElement',
                     filter:'.canvasElement'})
        .on('selectablestart', function(e, ui){
          e.preventDefault();
          $('.canvasElement').off('mouseenter');
        })
        .on('selectableselecting', function(e, ui){
          selected.push(ui.selecting);
          $(ui.selecting).css('border', '1px ridge red');
        })
        .on('selectableunselecting', function(e, ui){
          for(var i in selected)
          {
            if(selected[i] == ui.unselecting)
            {
              delete selected[i];
            }
          }
          $(ui.unselecting).css('border', '');
        })
        .on('selectablestop', function(e, ui){
          $('.canvasElement').on('mouseenter', function(e){
            e.stopImmediatePropagation();
            handleCanvasEleHover(e);
          });
        })
        .mousewheel(function(e, delta){
          $('.canvasElement').each(function(){
            var d = parseInt(delta);
            var bWidth = isNaN(parseInt($(this).css('border-width'))) ? 0 : parseInt($(this).css('border-width'));
            if(((parseInt($(this).outerWidth()) <= parseInt(25 + bWidth)) && d < 0)
            || ((parseInt($(this).outerWidth()) >= parseInt(75 + bWidth)) && d > 0))
            {
              return;
            }
            else
            {
              var width = parseInt($(this).outerWidth()) + parseInt(delta) - 2;
              var height = parseInt($(this).outerHeight()) + parseInt(delta) - 2;
              zoom = {width:width, height:height};
              $(this).css(zoom);
            }
          });
        })
        .mousedown(function(e){
          if(e.which == 2)
          {
            topoDrag = true;
            $topology.css('cursor', 'move');
            oldX = e.clientX;
            oldY = e.clientY;
            $topology.off('mouseenter');
          }
          return false;
        })
        .mouseup(function(e){
          if(e.which == 2)
          {
            topoDrag = false;
            $topology.css('cursor', '');
            $topology.on('mouseenter', function(){
              e.stopImmediatePropagation();
              handleCanvasEleHover(e);
            });
          }
        })
        .mouseout(function(e){
          if(e.which == 2)
          {
            topoDrag = false;
            $topology.css('cursor', '');
            $topology.on('mouseenter', function(){
              e.stopImmediatePropagation();
              handleCanvasEleHover(e);
            });
          }
        })
        .mousemove(function(e){
          if(topoDrag)
          {
            var relX = (e.clientX - oldX);
            var relY = (e.clientY - oldY);
            $('.canvasElement').each(function(){
              var newPos = {left:parseInt($(this).css('left')) + parseInt(relX),
                            top:parseInt($(this).css('top')) + parseInt(relY)};
              $(this).css(newPos);
            });
            handleOffscreenIndicators();
            oldX = e.clientX;
            oldY = e.clientY;
          }
        });
                
      now.ready(function(){
        setUpSelects();
        updateDragHeader();
        
        var draggableOptions = {helper:'clone',
                                tolerance: 'pointer',
                                cursorAt: {top:25,left:15},
                                cursor: 'move',
                                containment:'#nodeCanvas',
                                revert: 'invalid'};
        
        $dragMe.draggable(draggableOptions);
        $dragMe.on('dragstart', function(event, ui){
          var evt = (event ? event : window.event);
          var source = evt.target || evt.srcElement;
          source.style.opacity = '0.4';
        });
        
        $dragMe.on('dragstop', function(event, ui){
          var evt = (event ? event : window.event);
          var source = evt.target || evt.srcElement;
          var dragMeCss = {border:'2px dashed black',
                           opacity:'0.4'};
          $dragMe.css(dragMeCss);
        });
        
        $dragMe.draggable('disable');
        var dragMeCss = {border:'2px dashed black',
                         opacity:'0.4'};
        $dragMe.css(dragMeCss);
        
        var droppableOptions = {accept:'.ui-draggable'};
        
        $topology.droppable(droppableOptions);
        $topology.on('dropover', function(event, ui){
          $topology.addClass('over');
        });
        
        $topology.on('dropout', function(event, ui){
          $topology.removeClass('over');
        });
        
        $topology.on('drop', function(event, ui){
          noclick = true;
          $topology.removeClass('over');
          $dragMe.draggable('disable');
          placeBackgroundImage($dragMe);
          var dragMeCss = {border:'2px dashed black',
                           opacity:'0.4'};
          $dragMe.css(dragMeCss);
          
          if(ui.draggable.attr('class').indexOf('canvasElement') == -1 && ui.draggable.attr('class').indexOf('ui-dialog') == -1)
          {
            var nodeObj = {};
            nodeObj.selectedProfile = selectedProfile;
            nodeObj.count = $('#nodeNumber').val();
            
            clearProfileSelected();
            
            var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
            var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
            addNodeToCanvas(nodeObj, 'drop', x, y);
          }
          else if(ui.draggable.attr('class').indexOf('canvasElement') != -1 && ui.draggable.attr('class').indexOf('ui-dialog') == -1)
          {
            var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
            var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
            var index = ui.draggable.attr('id');
            
            nodeTopology[index].coordinates = {x:x, y:y};
          }
          
        });
              
        repopulateProfilesList(function(){
          prepopulateCanvasWithNodes();
        });
      });
      setTimeout(function(){adjustColumns();}, 1000);
    });
    
    $(window).resize(function(){
      handleOffscreenIndicators();
    });
    
    window.addEventListener('unload', function(){
      now.WriteWysiwygTopology(nodeTopology, function(){
        console.log('WriteWysiwygTopology finished');
      });
    });
    
block content
  div#pageWrap(onmouseover='hideProfileInfo(event)')
    h1 Haystack WYSIWYG
    div#modalDialog(title='Split Nodes')
      div#rangeDiv
      button#splitAccept Split Nodes
    div#profileInfo
      div#pres
        label#name
        br
        br
        label Port Sets
        select#portSets
        br
        label Ethernet Vendors
        select#vendors
        br
        label Ethernet Interfaces
        select#interfaces
        br
        label Ip Address Allocation Type
        select#allocationType(onchange='showIpBlock()')
          option DHCP
          option IP Range
        br
        div#ipBlock(style='display: none;')
          input#ip1(type='number', min='0', max='255', value='0', step='1')
          input#ip2(type='number', min='0', max='255', value='0', step='1')
          input#ip3(type='number', min='0', max='255', value='0', step='1')
          input#ip4(type='number', min='0', max='255', value='0', step='1')
        br
        button(onclick='saveSelectedParameters()') Save Parameters
    div#container
      div#dragBar(class='sameHeight')
        bre
        label Configurations
        br
        select#configurations(onchange='repopulateProfilesList()')
        br
        br
        label Number of nodes 
        input#nodeNumber(type='number', min='1', max='50', value='1', onchange='updateDragHeader()')
        br
        label Profiles
        br
        table
          tbody#profilesHook(onmouseover='showProfileInfo(event)')
        br
        br
        div#dragMe(class='notDraggableYet')
          header#setNumNodes
      div#nodeCanvas(class='sameHeight', onclick='clearSelectedCanvas()')
        div#nodeContextMenu
          div#deleteNodes Delete Selected
          div#mergeNodes Merge Selected
          div#splitNodes Split Selected
        div#hoverInfo
          div#pres
            label#hoverName
            br
            br
            label Port Set: 
            div#hoverPortset
            br
            label Ethernet Vendor: 
            div#hoverVendor
            br
            label Ethernet Interface: 
            div#hoverInterface
            br
            label Ip Address Allocation Type: 
            div#hoverAddress
            
