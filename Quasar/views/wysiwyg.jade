////============================================================================
//// Name        : wysiwyg.jade
//// Copyright   : DataSoft Corporation 2011-2013
////  Nova is free software: you can redistribute it and/or modify
////   it under the terms of the GNU General Public License as published by
////   the Free Software Foundation, either version 3 of the License, or
////   (at your option) any later version.
////
////   Nova is distributed in the hope that it will be useful,
////   but WITHOUT ANY WARRANTY; without even the implied warranty of
////   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
////   GNU General Public License for more details.
////
////   You should have received a copy of the GNU General Public License
////   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
////============================================================================

extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="wysiwyg.css", media="screen")
  script(type='text/javascript', src='scripts/jquery-ui-1.10.1.custom.js')
  script(type='text/javascript', src='scripts/jquery.ui.selectable.js')
  script(type='text/plain', src='https://flexicontent.googlecode.com/svn-history/r1517/trunk/com_flexicontent_v2.x/site/librairies/fancybox/lib/jquery.mousewheel-3.0.6.pack.js')
  script
    window.jQuery.ui || document.write('<script type="text/javascript" src="scripts/jquery-ui-1.10.1.custom.js"><\\/script>');
    window.jQuery.mousewheel || document.write('<script type="text/javascript" src="scripts/jquery-mousewheel.min.js"><\\/script>');
    var configurationList = !{JSON.stringify(configurations)};
    var nodeList = !{JSON.stringify(nodes)};
    var interfaces = !{JSON.stringify(interfaces)};
    var currentConfig = '#{current}';
    var theDoc = document;
    var profilesArray = new Array();
    var $topology = '';
    var $dragMe = '';
    var $hoverInfo = '';
    var clicked = false;
    var selectedProfile = undefined;
    var nodesToCreate = {};
    var nodesToDelete = {};
    var nodeCount = {};
    var eleCount = 0;
    var drawElements = {};
    var oldX = 0;
    var oldY = 0;
    var selected = [];
    var topoDrag = false;
    
    function setUpSelects()
    {
      var configSelect = $('#configurations');
      for(var i in configurationList)
      {
        if(configurationList[i] != '' && configurationList[i] != undefined)
        {
          var option = theDoc.createElement('option');
          option.value = configurationList[i];
          option.innerHTML = configurationList[i];
          option.id = configurationList[i];
          configSelect.append(option);
        }
      }
    }
    
    function showProfileInfo(e)
    {
      if(!clicked)
      {
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        $('#name').html(source.innerHTML);
        now.GetProfile(source.innerHTML, function(profile){
          var $vendors = $('#vendors');
          var $portSets = $('#portSets');
          var $interfaces = $('#interfaces');
          
          $vendors.empty();
          $portSets.empty();
          $interfaces.empty();
          
          for(var i in profile.ethernet)
          {
            var option = theDoc.createElement('option');
            option.innerHTML = profile.ethernet[i].vendor;
            $vendors.append(option);
          }
          for(var i in profile.portSets)
          {
            var option = theDoc.createElement('option');
            option.innerHTML = profile.portSets[i].setName;
            $portSets.append(option);
          }
          for(var i in interfaces)
          {
            var option = theDoc.createElement('option');
            option.innerHTML = interfaces[i];
            $interfaces.append(option);
          }
          
          var pointerCss = {top:($(source).position().top + $(source).height()),
                            left:($(source).position().left + $(source).outerWidth() + 20)};
                            
          $profileInfo.css(pointerCss).fadeIn(200, function(){
          });
        });
      }
    }
    
    function hideProfileInfo(e)
    {
      if(!clicked)
      {
        if(e == undefined)
        {
          $profileInfo.fadeOut(200, function(){
          });
          return;
        }
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        if($('#profilesHook').find(source) && source.tagName == 'TD')
        {
          return;
        }
        else
        {
          $profileInfo.fadeOut(200, function(){
          });
        }
      }
    }
    
    function profileClicked(e)
    {
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      if(clicked && source.innerHTML != selectedProfile)
      {
        return;
      }
      else if(clicked && source.innerHTML == selectedProfile)
      {
        $(source).css('background-color', '');
        selectedProfile = undefined;
        clicked = false
        $profileInfo.fadeOut(200, function(){
        });
        return;
      }
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      $(source).css('background-color', '#E8A02F');
      selectedProfile = source.innerHTML;
      clicked = true;
    }
    
    function updateDragHeader()
    {
      var set = $('#nodeNumber').val();
      $('#setNumNodes').html(set);
    }
  
    function clearProfileSelected()
    {
      $('#profilesHook').find('td').css('background-color', '');
      selectedProfile = undefined;
    }
    
    function repopulateProfilesList(cb)
    {
      currentConfig = $('#configurations').val();
      
      if(typeof now.GetConfigSummary == 'function')
      {
        now.GetConfigSummary(currentConfig, function(scriptProfileBindings, profileObj, profiles, nodes){
          var profHook = $('#profilesHook');
          profHook.empty();
          
          var endDex = profileObj.length;
          
          for(var i in profileObj)
          {
            if(profileObj[i].name != 'default')
            {
              var profile = {};
              profile.name = profileObj[i].name;
              profile.parent = profileObj[i].parent;
              profile.children = [];
              profilesArray[profile.name] = profile;
              var append = theDoc.createElement('tr');
              var td0 = theDoc.createElement('td');
              td0.innerHTML = profile.name;
              td0.onclick = profileClicked;
              append.appendChild(td0);
              profHook.append(append);
            }
          }
          
          profHook.find('td').first().toggleClass('first');
          if(profHook.find('td').size() >= 3)
          {
            profHook.find('td').slice(1, -1).toggleClass('middle');
          }
          profHook.find('td').last().toggleClass('last');
          
          for(var i in profilesArray)
          {
            for(var j in profilesArray)
            {
              if(profilesArray[j].parent == profilesArray[i].name)
              {
                profilesArray[i].children.push(profilesArray[j].name);
              }
            }
          }
          cb && cb()
        });
      }
    }
    
    function createNodes()
    {
      for(var i in nodesToCreate)
      {
        var ipType = nodesToCreate[i].ipType;
        var ip1, ip2, ip3, ip4 = '0';
        if(nodesToCreate[i].ipType != 'DHCP')
        {
          ip1 = nodesToCreate[i].ip.ip1;
          ip2 = nodesToCreate[i].ip.ip2;
          ip3 = nodesToCreate[i].ip.ip3;
          ip4 = nodesToCreate[i].ip.ip4;
        }
        var profile = nodesToCreate[i].selectedProfile;
        var portset = nodesToCreate[i].portset;
        var vendor = nodesToCreate[i].vendor;
        var ethInterface = nodesToCreate[i].iface;
        var count = nodesToCreate[i].count;  
        now.createHoneydNodes(ipType, ip1, ip2, ip3, ip4, profile, portset, vendor, ethInterface, count); 
      }
      nodesToCreate = {};
    }
    
    function saveSelectedParameters()
    {
      clicked = false;
      $dragMe.draggable('enable');
      var dragMeCss = {border:'2px solid black',
                       opacity:'1'};
      $dragMe.css(dragMeCss);
      hideProfileInfo();
      var profileObject = {};
      profileObject.selectedProfile = selectedProfile;
      placeBackgroundImage($dragMe, selectedProfile);
      profileObject.count = $('#nodeNumber').val();
      profileObject.portset = $('#portSets').val();
      profileObject.vendor = $('#vendors').val();
      profileObject.iface = $('#interfaces').val();
      profileObject.ipType = $('#allocationType').val();
      if(profileObject.ipType != 'DHCP')
      {
        profileObject.ip = {ip1:$('#ip1').val(), ip2:$('#ip2').val(), ip3:$('#ip3').val(), ip4:$('#ip4').val()};
      }
      nodesToCreate[eleCount] = profileObject;
    }
    
    function showIpBlock()
    {
      if($('#allocationType').val() != 'DHCP')
      {
        $('#ipBlock').css('display', 'block');
      }
      else
      {
        $('#ipBlock').css('display', 'none');
      }
    }
    
    function adjustColumns()
    {
      var $sameHeightDivs = $('.sameHeight');
      var maxHeight = 0;
      $sameHeightDivs.each(function(){
        maxHeight = Math.max(maxHeight, $(this).outerHeight());
      });
      $sameHeightDivs.css({height: maxHeight + 'px'});
    }
    
    function handleCanvasEleHover(e, ui)
    {
      if(e.type == 'mouseenter')
      {
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        var hoverInfoCss = {top:($(source).position().top),
                            left:($(source).position().left + $(source).outerWidth()) + 10};
        var titleCss = {'font-weight':'bold', 'font-size':'18px'};
        
        $('#hoverName').css(titleCss).html($(source).data('title'));
        
        if(nodesToCreate[source.id] != undefined)
        {
          $('#hoverPortset').html(nodesToCreate[source.id].portset);
          $('#hoverVendor').html(nodesToCreate[source.id].vendor);
          $('#hoverInterface').html(nodesToCreate[source.id].iface);
          
          if(nodesToCreate[source.id].ipType != 'DHCP')
          {
            var address = '';
            for(var i in nodesToCreate[source.id].ip)
            {
              address += nodesToCreate[source.id].ip[i] + '.';
            }
            address = address.substring(0, address.length - 1);
            $('#hoverAddress').html('IP Range starting at: ' + address);
          }
          else
          {
            $('#hoverAddress').html('DHCP');
          }
        }
        $hoverInfo.css(hoverInfoCss).fadeIn(200, function(){
        });
      }
      else if(e.type == 'mouseleave')
      {
        $hoverInfo.fadeOut(200, function(){
        });
      }
      else if(e.type == 'drag')
      {
        $hoverInfo.fadeOut(200, function(){
        });
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
        var dx = x - oldX;
        var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
        var dy = y - oldY;
        
        if($(source).attr('class') != undefined && $(source).attr('class').indexOf('ui-selected') != -1)
        {
          $('.ui-selected').not($(source)).each(function(){
            var relX = parseInt(dx) + parseInt($(this).css('left'));
            if(relX > $topology.outerWidth() - 100)
            {
              relX = $topology.outerWidth() - 100;
            }
            else if(relX < 0)
            {
              relX = 0;
            }
            var relY = parseInt(dy) + parseInt($(this).css('top'));
            if(relY > $topology.outerHeight() - 50)
            {
              relY = $topology.outerHeight() - 50;
            }
            else if(relY < 0)
            {
              relY = 0;
            }
            var adjustPos = {left:relX, top:relY};
            $(this).css(adjustPos);    
          });
        }
        oldX = x;
        oldY = y;
      }
      else if(e.type == 'dragstop')
      {
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        var hoverInfoCss = {top:($(source).position().top),
                            left:($(source).position().left + $(source).outerWidth()) + 10};
        $hoverInfo.css(hoverInfoCss).fadeIn(200, function(){
        });
      }
    }
    
    function prepopulateCanvasWithNodes()
    {
      var xEleCount = 0;
      var yEleCount = 0;
      for(var i in nodeCount)
      {
        var div = theDoc.createElement('div');
              
        $(div).draggable({tolerance: 'pointer',
                          cursorAt: {top:25, left:10},
                          cursor: 'move',
                          containment:'#nodeCanvas',
                          revert: 'invalid'});
        
        var y = (yEleCount * 50);
        var x = (xEleCount * 50);
        
        if(x > $topology.outerWidth())
        {
          yEleCount += 1;
          xEleCount = 0;
          y = (yEleCount * 50);
          x = (xEleCount * 50);
        }
        
        div.setAttribute('class', 'ui-draggable canvasElement');
        div.style.left = x + 'px';
        div.style.top = y + 'px';
        div.style.position = 'absolute';
        $(div).data('title', i);
        placeBackgroundImage($(div), i);
        $(div)
        .on('dragstop', function(e){
          handleCanvasEleHover(e);
          $(this).on('mouseenter', function(e){
            e.stopImmediatePropagation();
            handleCanvasEleHover(e);
          })
          .on('mouseleave', function(e){
            e.stopImmediatePropagation();
            handleCanvasEleHover(e);
          })
        })
        .on('mouseenter', function(e){
          e.stopImmediatePropagation();
          handleCanvasEleHover(e);
        })
        .on('mouseleave', function(e){
          e.stopImmediatePropagation();
          handleCanvasEleHover(e);
        })
        .on('drag', function(e, ui){
          e.stopImmediatePropagation();
          handleCanvasEleHover(e, ui);
          $(this).off('mouseleave');
          $(this).off('mouseenter');
        })
        .on('dragstart', function(e, ui){
          oldX = ui.helper.offset().left - $('#nodeCanvas').offset().left;
          oldY = ui.helper.offset().top - $('#nodeCanvas').offset().top;
          if($(this).attr('class').indexOf('ui-selected') == -1)
          {
            clearSelectedCanvas();
          }
        });
        
        div.id = eleCount;
        
        var text = theDoc.createElement('label');
        text.innerHTML = nodeCount[i];
        text.style.fontSize = '18px';
        text.id = eleCount + 'text';
        div.appendChild(text);
  
        $topology.append(div);
        
        var push = {x:x, y:y, count:nodeCount[i]};
        drawElements[eleCount] = push;
        eleCount += 1;
        xEleCount += 1;
      }
    }
    
    function placeBackgroundImage(ele, profile)
    {
      var append = ' no-repeat center';
      if(profile == undefined)
      {
        ele.css('background', 'url("images/wysiwyg/unknown_75.png")' + append);
        ele.find('label').css('color', 'white');
        return;
      }
      now.GetProfile(profile, function(pfile){
        var pers = pfile.personality;
        if(pers.indexOf('Windows') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/win_75.png")' + append);
        }
        else if(pers.indexOf('OpenBSD') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/openbsd_75.png")' + append);
        }
        else if(pers.indexOf('Linux') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/linux_75.png")' + append);
          ele.find('label').css('color', 'white');
        }
        else if(pers.indexOf('Mac OS X') != -1)
        {
          ele.css('background', 'url("images/wysiwyg/macosx_75.png")' + append);
        }
        else
        {
          ele.css('background', 'url("images/wysiwyg/unknown_75.png")' + append);
          ele.find('label').css('color', 'white');
        }
      });
    }
    
    function debugDrop(x, y, count)
    {
        var div = theDoc.createElement('div');
              
        $(div).draggable({tolerance: 'pointer',
                          cursorAt: {top:25, left:10},
                          cursor: 'move',
                          containment:'#nodeCanvas',
                          revert: 'invalid'});
        
        div.setAttribute('class', 'canvasElement ui-draggable');
        div.style.left = x + 'px';
        div.style.top = y + 'px';
        div.style.position = 'absolute';
        $(div).data('title', 'test');
        div.setAttribute('onmouseenter', 'handleCanvasEleHover(event)');
        div.setAttribute('onmouseleave', 'handleCanvasEleHover(event)');
        div.id = count;
        
        var text = theDoc.createElement('label');
        text.innerHTML = count;
        text.style.fontSize = '18px';
        text.id = count + 'text';
        div.appendChild(text);
  
        $topology.append(div);
    }
    
    function handleOffscreenIndicators()
    {
      var width = $topology.outerWidth();
      var height = $topology.outerHeight();
      $('.canvasElement').each(function(){
        console.log(this.id + '.css("left") + 50 == ' + parseInt($(this).css("left") + 50));
        console.log('top == ' + $(this).css('top'));
        if(parseInt($(this).css('left')) > width)
        {
          if(theDoc.getElementById(this.id + 'osir') == undefined)
          {
            console.log('creating osil for ' + this.id);
            var div = theDoc.createElement('div');
            div.className = 'offscreenIndicatorRight';
            div.id = this.id + 'osir';
            var pos = {left:width, top:$(this).css('top')};
            $(div).css(pos);
            $topology.append(div);
          }
          else
          {
            var pos = {top:$(this).css('top')};
            $('#' + this.id + 'osir').css(pos);
          }
        }
        else if(parseInt($(this).css('left')) + 50 <= 0)
        {
          if(theDoc.getElementById(this.id + 'osil') == undefined)
          {
            console.log('creating osil for ' + this.id);
            var div = theDoc.createElement('div');
            div.className = 'offscreenIndicatorLeft';
            div.id = this.id + 'osil';
            var pos = {left:-20, top:$(this).css('top')};
            $(div).css(pos);
            $topology.append(div);
          }
          else
          {
            var pos = {top:$(this).css('top')};
            $('#' + this.id + 'osil').css(pos);
          }
        }
        if(parseInt($(this).css('left')) < width - 50)
        {
          console.log('deleting #' + this.id + 'osir');
          $('#' + this.id + 'osir').remove();
        }
        if(parseInt($(this).css('left')) >= 0)
        {
          console.log('deleting #' + this.id + 'osil');
          $('#' + this.id + 'osil').remove();
        }
      });
    }
    
    function clearSelectedCanvas()
    {
      for(var i in selected)
      {
        $(selected[i]).removeClass('ui-selected');
        $(selected[i]).css('border', '');
      }
      selected = [];
    }
    
    $(function(){
      $profileInfo = $('#profileInfo');
      $profileInfo.hide();
      $topology = $('#nodeCanvas');
      $topology.css('width', '1')
               .selectable({appendTo:'#nodeCanvas',
                            distance:30,
                            cancel:'.canvasElement',
                            filter:'.canvasElement'})
               .on('selectablestart', function(e, ui){
                 console.log('selectablestart');
                 e.preventDefault();
                 $('.canvasElement').off('mouseenter');
               })
               .on('selectableselecting', function(e, ui){
                 console.log('selecting ' + $(ui.selecting).data('title'));
                 selected.push(ui.selecting);
                 $(ui.selecting).css('border', '1px ridge red');
               })
               .on('selectableunselecting', function(e, ui){
                 console.log('unselecting ' + $(ui.unselecting).data('title'));
                 for(var i in selected)
                 {
                   if(selected[i] == ui.unselecting)
                   {
                     delete selected[i];
                   }
                 }
                 $(ui.unselecting).css('border', '');
               })
               .on('selectablestop', function(e, ui){
                 console.log('selectablestop');
                 $('.canvasElement').on('mouseenter', function(e){
                   e.stopImmediatePropagation();
                   handleCanvasEleHover(e);
                 });
               })
               .mousewheel(function(e, delta){
                 $('.canvasElement').each(function(){
                   if(($(this).outerWidth() <= (25 + parseInt($(this).css('border-width'))) && delta < 0)
                   || ($(this).outerWidth() > (75 + parseInt($(this).css('border-width'))) && delta > 0))
                   {
                     return;
                   }
                   var width = parseInt($(this).outerWidth()) + parseInt(delta) - 2;
                   var height = parseInt($(this).outerHeight()) + parseInt(delta) - 2;
                   var zoom = {width:width, height:height};
                   $(this).css(zoom);
                 });
               })
              .mousedown(function(e){
                if(e.which == 2)
                {
                  topoDrag = true;
                  $topology.css('cursor', 'move');
                  oldX = e.clientX;
                  oldY = e.clientY;
                  $topology.off('mouseenter');
                }
              })
              .mouseup(function(e){
                if(e.which == 2)
                {
                  topoDrag = false;
                  $topology.css('cursor', '');
                  $topology.on('mouseenter', function(){
                    e.stopImmediatePropagation();
                    handleCanvasEleHover(e);
                  });
                }
              })
              .mouseout(function(e){
                if(e.which == 2)
                {
                  topoDrag = false;
                  $topology.css('cursor', '');
                  $topology.on('mouseenter', function(){
                    e.stopImmediatePropagation();
                    handleCanvasEleHover(e);
                  });
                }
              })
              .mousemove(function(e){
                if(topoDrag && e.which == 2)
                {
                  var relX = (e.clientX - oldX);
                  var relY = (e.clientY - oldY);
                  $('.canvasElement').each(function(){
                    var newPos = {left:parseInt($(this).css('left')) + parseInt(relX),
                                  top:parseInt($(this).css('top')) + parseInt(relY)};
                    $(this).css(newPos);
                  });
                  handleOffscreenIndicators();
                  oldX = e.clientX;
                  oldY = e.clientY;
                }
              });
                
      $dragMe = $('#dragMe');
      $hoverInfo = $('#hoverInfo');
      $hoverInfo.hide();
      now.ready(function(){
        setUpSelects();
        updateDragHeader();
        
        var draggableOptions = {helper:'clone',
                                tolerance: 'pointer',
                                cursorAt: {top:25,left:15},
                                cursor: 'move',
                                containment:'#nodeCanvas',
                                revert: 'invalid'};
                                
        $dragMe.draggable(draggableOptions);
        $dragMe.on('dragstart', function(event, ui){
          var evt = (event ? event : window.event);
          var source = evt.target || evt.srcElement;
          source.style.opacity = '0.4';
        });
        
        $dragMe.on('dragstop', function(event, ui){
          var evt = (event ? event : window.event);
          var source = evt.target || evt.srcElement;
          var dragMeCss = {border:'2px dashed black',
                           opacity:'0.4'};
          $dragMe.css(dragMeCss);
        });
        
        $dragMe.draggable('disable');
        var dragMeCss = {border:'2px dashed black',
                         opacity:'0.4'};
        $dragMe.css(dragMeCss);
        
        var droppableOptions = {accept:'.ui-draggable'};
        
        $topology.droppable(droppableOptions);
        $topology.on('dropover', function(event, ui){
          $topology.addClass('over');
        });
        
        $topology.on('dropout', function(event, ui){
          $topology.removeClass('over');
        });
        
        $topology.on('drop', function(event, ui){
          $topology.removeClass('over');
          $dragMe.draggable('disable');
          placeBackgroundImage($dragMe);
          var dragMeCss = {border:'2px dashed black',
                           opacity:'0.4'};
          $dragMe.css(dragMeCss);
          
          if(ui.draggable.attr('class').indexOf('canvasElement') == -1)
          {
            var title = selectedProfile;
            
            clearProfileSelected();
            
            var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
            var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
            
            var div = theDoc.createElement('div');
            
            $(div).draggable({tolerance: 'pointer',
                              cursorAt: {top:25,left:15},
                              cursor: 'move',
                              containment:'#nodeCanvas',
                              revert: 'invalid'});
            
            div.setAttribute('class', 'canvasElement ui-draggable');
            $(div).removeClass('ui-draggable-dragging');
            // Need to compensate for the width of the already-appended elements, 
            // as they seem to affect the css left value.
            div.style.left = (x - (eleCount * 50)) + 'px';
            div.style.top = y + 'px';
            div.style.position = 'absolute';
            $(div).data('profile', title);
            div.setAttribute('onmouseenter', 'handleCanvasEleHover(event)');
            div.setAttribute('onmouseleave', 'handleCanvasEleHover(event)');
            div.id = eleCount;
            placeBackgroundImage($(div), title);
            
            $(div).on('dragstop', function(e){
               handleCanvasEleHover(e);
              $(this).on('mouseenter', function(e){
                e.stopImmediatePropagation();
                handleCanvasEleHover(e);
              })
              .on('mouseleave', function(e){
                e.stopImmediatePropagation();
                handleCanvasEleHover(e);
              })
            })
            .on('mouseenter', function(e){
              e.stopImmediatePropagation();
              handleCanvasEleHover(e);
            })
            .on('mouseleave', function(e){
              e.stopImmediatePropagation();
              handleCanvasEleHover(e);
            })
            .on('drag', function(e){
              e.stopImmediatePropagation();
              handleCanvasEleHover(e);
              $(this).off('mouseleave');
              $(this).off('mouseenter');
            })
            .on('dragstart', function(e, ui){
              oldX = ui.helper.offset().left - $('#nodeCanvas').offset().left;
              oldY = ui.helper.offset().top - $('#nodeCanvas').offset().top;
              if($(this).attr('class').indexOf('ui-selected') == -1)
              {
                clearSelectedCanvas();
              }
            });
            
            var text = theDoc.createElement('label');
            text.innerHTML = $('#nodeNumber').val();
            text.style.fontSize = '18px';
            text.id = eleCount + 'text';
            div.appendChild(text);

            $topology.append(div);

            var push = {x:x, y:y, count:$('#nodeNumber').val()};
            drawElements[eleCount] = push;
            eleCount += 1;
          }
          else
          {
            var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
            var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
            var index = ui.draggable.attr('id');
            
            var push = {x:x, y:y, count:drawElements[index].count};
            drawElements[index] = push;
          }
        });
  
        for(var i in nodeList)
        {
          if(nodeCount[nodeList[i].pfile] == undefined)
          {
            nodeCount[nodeList[i].pfile] = 1;
          }
          else
          {
            nodeCount[nodeList[i].pfile] += 1;
          }
        }
              
        repopulateProfilesList(function(){
          prepopulateCanvasWithNodes();
        });
      });
      setTimeout(function(){adjustColumns();}, 1000);
    });
    
    $(window).resize(function(){
      handleOffscreenIndicators();
    });
    
block content
  div#pageWrap(onmouseover='hideProfileInfo(event)')
    h1 Haystack WYSIWYG
    div#profileInfo
      div#pres
        label#name
        br
        br
        label Port Sets
        select#portSets
        br
        label Ethernet Vendors
        select#vendors
        br
        label Ethernet Interfaces
        select#interfaces
        br
        label Ip Address Allocation Type
        select#allocationType(onchange='showIpBlock()')
          option DHCP
          option IP Range
        br
        div#ipBlock(style='display: none;')
          input#ip1(type='number', min='0', max='255', value='0', step='1')
          input#ip2(type='number', min='0', max='255', value='0', step='1')
          input#ip3(type='number', min='0', max='255', value='0', step='1')
          input#ip4(type='number', min='0', max='255', value='0', step='1')
        br
        button(onclick='saveSelectedParameters()') Save Parameters
    div#container
      div#dragBar(class='sameHeight')
        bre
        label Configurations
        br
        select#configurations(onchange='repopulateProfilesList()')
        br
        br
        label Number of nodes 
        input#nodeNumber(type='number', min='1', max='50', value='1', onchange='updateDragHeader()')
        br
        label Profiles
        br
        table
          tbody#profilesHook(onmouseover='showProfileInfo(event)')
        br
        br
        div#dragMe(class='notDraggableYet')
          header#setNumNodes
        button#createNodes(style='margin-top: 20px;', onclick='createNodes()') Save Topology
      div#nodeCanvas(class='sameHeight', onclick='clearSelectedCanvas()')
        div#hoverInfo
          div#pres
            label#hoverName
            br
            br
            label Port Set: 
            div#hoverPortset
            br
            label Ethernet Vendor: 
            div#hoverVendor
            br
            label Ethernet Interface: 
            div#hoverInterface
            br
            label Ip Address Allocation Type: 
            div#hoverAddress
            
