////============================================================================
//// Name        : wysiwyg.jade
//// Copyright   : DataSoft Corporation 2011-2013
////  Nova is free software: you can redistribute it and/or modify
////   it under the terms of the GNU General Public License as published by
////   the Free Software Foundation, either version 3 of the License, or
////   (at your option) any later version.
////
////   Nova is distributed in the hope that it will be useful,
////   but WITHOUT ANY WARRANTY; without even the implied warranty of
////   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
////   GNU General Public License for more details.
////
////   You should have received a copy of the GNU General Public License
////   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
////============================================================================

extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="wysiwyg.css", media="screen")
  script(src='//ajax.googleapis.com/ajax/libs/jqueryui/1.10.1/jquery-ui.min.js')
  script
    window.jQuery.ui || document.write(unescape('%3Cscript src="scripts/jquery-ui-1.10.1.custom.js"%3E%3C%/script%3E'));
    
    var configurationList = !{JSON.stringify(configurations)};
    var nodeList = !{JSON.stringify(nodes)};
    var currentConfig = '#{current}';
    var theDoc = document;
    var profilesArray = new Array();
    var $topology = '';
    var $dragMe = '';
    var clicked = false;
    var selectedProfile = undefined;
    var nodesToCreate = {};
    var eleCount = 0;
    var drawElements = {};
    var oldWidth = 0;
    var oldHeight = 0;
    
    function setUpSelects()
    {
      var configSelect = $('#configurations');
      for(var i in configurationList)
      {
        if(configurationList[i] != '' && configurationList[i] != undefined)
        {
          var option = theDoc.createElement('option');
          option.value = configurationList[i];
          option.innerHTML = configurationList[i];
          option.id = configurationList[i];
          configSelect.append(option);
        }
      }
      
      repopulateProfilesList();
    }
    
    function showProfileInfo(e)
    {
      if(!clicked)
      {
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        $('#name').html(source.innerHTML);
        var pointerCss = {top:($(source).position().top + $(source).height()),
                          left:($(source).position().left + $(source).outerWidth() + 20)}
        $('#profileInfo').css(pointerCss).fadeIn(200, function(){
        });
      }
    }
    
    function hideProfileInfo(e)
    {
      if(!clicked)
      {
        if(e == undefined)
        {
          $('#profileInfo').fadeOut(200, function(){
          });
          return;
        }
        var evt = (e ? e : window.event);
        var source = evt.target || evt.srcElement;
        if($('#profilesHook').find(source) && source.tagName == 'TD')
        {
          return;
        }
        else
        {
          $('#profileInfo').fadeOut(200, function(){
          });
        }
      }
    }
    
    function profileClicked(e)
    {
      if(clicked)
      {
        return;
      }
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      $('#profilesHook').find('td').css('background-color', '');
      $(source).css('background-color', '#E8A02F');
      selectedProfile = source.innerHTML;
      clicked = true;
    }
    
    function updateDragHeader()
    {
      var set = $('#nodeNumber').val();
      $('#setNumNodes').html(set);
    }
  
    function clearProfileSelected()
    {
      selectedProfile = undefined;
      $('#profilesHook').find('td').css('background-color', '');
    }
    
    function repopulateProfilesList()
    {
      currentConfig = $('#configurations').val();
      
      if(typeof now.GetConfigSummary == 'function')
      {
        now.GetConfigSummary(currentConfig, function(scriptProfileBindings, profileObj, profiles, nodes){
          // manipulate elements here (i.e. pi charts, text, tables, etc.)
          // Will all be contained in the object parseMe that will use the 
          // object literal notation of javascript to allow the server side
          // to do the calculations, and then send the exact data required to
          // the browser.
          
          var profHook = $('#profilesHook');
          profHook.empty();
          
          var endDex = profileObj.length;
          
          for(var i in profileObj)
          {
            var profile = {};
            profile.name = profileObj[i].name;
            profile.parent = profileObj[i].parent;
            profile.children = [];
            profile.isSelected = false;
            profile.listElement = null;
            profilesArray[profile.name] = profile;
            var append = theDoc.createElement('tr');
            var td0 = theDoc.createElement('td');
            td0.innerHTML = profile.name;
            td0.onclick = profileClicked;
            append.appendChild(td0);
            profHook.append(append);
          }
          
          profHook.find('td').first().toggleClass('first');
          if(profHook.find('td').size() >= 3)
          {
            profHook.find('td').slice(1, -1).toggleClass('middle');
          }
          profHook.find('td').last().toggleClass('last');
          
          for(var i in profilesArray)
          {
            for(var j in profilesArray)
            {
              if(profilesArray[j].parent == profilesArray[i].name)
              {
                profilesArray[i].children.push(profilesArray[j].name);
              }
            }
          }
        });
      }
    }
    
    function createNodes()
    {
      for(var i in nodesToCreate)
      {
        var ipType = 'DHCP';
        var ip1, ip2, ip3, ip4 = '0';
        var profile = nodesToCreate[i].selectedProfile;
        var portset = '';
        var vendor = '';
        var ethInterface = '';
        var count = nodesToCreate[i].count;  
        now.createHoneydNodes(ipType, ip1, ip2, ip3, ip4, profile, portset, vendor, ethInterface, count); 
      }
    }
    
    function saveSelectedParameters()
    {
      clicked = false;
      $dragMe.draggable('enable');
      var dragMeCss = {border:'2px solid black',
                       opacity:'1'};
      $dragMe.css(dragMeCss);
      hideProfileInfo();
      var profileObject = {};
      profileObject.selectedProfile = selectedProfile;
      profileObject.count = $('#nodeNumber').val();
      nodesToCreate[eleCount] = profileObject;
    }
    
    function showIpBlock()
    {
      if($('#allocationType').val() != 'DHCP')
      {
        $('#ipBlock').css('display', 'block');
      }
      else
      {
        $('#ipBlock').css('display', 'none');
      }
    }
    
    function adjustColumns()
    {
      var $sameHeightDivs = $('.sameHeight');
      var maxHeight = 0;
      $sameHeightDivs.each(function(){
        maxHeight = Math.max(maxHeight, $(this).outerHeight());
      });
      $sameHeightDivs.css({height: maxHeight + 'px'});
      oldHeight = $topology.outerHeight();
      oldWidth = $topology.outerWidth();
    }
    
    $(function(){
      $('#profileInfo').hide();
      $topology = $('#nodeCanvas');
      $topology.css('width', '1');
      $dragMe = $('#dragMe');
      now.ready(function(){
        setUpSelects();
        updateDragHeader();
        
        var draggableOptions = {helper:'clone',
                                tolerance: 'pointer',
                                cursorAt: {top:25,left:10},
                                cursor: 'move',
                                containment:'#nodeCanvas',
                                revert: 'invalid'}
        $dragMe.draggable(draggableOptions);
        $dragMe.on('dragstart', function(event, ui){
          var evt = (event ? event : window.event);
          var source = evt.target || evt.srcElement;
          source.style.opacity = '0.4';
        });
        
        $dragMe.on('dragstop', function(event, ui){
          var evt = (event ? event : window.event);
          var source = evt.target || evt.srcElement;
          var dragMeCss = {border:'2px dashed black',
                           opacity:'0.4'};
          $dragMe.css(dragMeCss);
        });
        
        $dragMe.draggable('disable');
        var dragMeCss = {border:'2px dashed black',
                         opacity:'0.4'};
        $dragMe.css(dragMeCss);
        
        var droppableOptions = {accept:'.ui-draggable'};
        $topology.droppable(droppableOptions);
        $topology.on('dropover', function(event, ui){
          $topology.addClass('over');
        });
        
        $topology.on('dropout', function(event, ui){
          $topology.removeClass('over');
        });
        
        $topology.on('drop', function(event, ui){
          $topology.removeClass('over');
          $dragMe.draggable('disable');
          var dragMeCss = {border:'2px dashed black',
                           opacity:'0.4'};
          $dragMe.css(dragMeCss);
          if(ui.draggable.attr('class').indexOf('canvasElement') == -1)
          {
            clearProfileSelected();
            
            var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
            var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
            
            var div = theDoc.createElement('div');
            
            $(div).draggable({tolerance: 'pointer',
                              cursorAt: {top:25,left:10},
                              cursor: 'move',
                              containment:'#nodeCanvas',
                              revert: 'invalid'});
                              
            div.setAttribute('class', 'canvasElement ui-draggable');
            div.style.left = x + 'px';
            div.style.top = y + 'px';
            div.id = eleCount;
            var text = theDoc.createElement('label');
            text.innerHTML = $('#nodeNumber').val();
            text.style.fontSize = '18px';
            text.id = eleCount + 'text';
            div.appendChild(text);

            $topology.append(div);

            var push = {x:x, y:y, count:$('#nodeNumber').val()};
            drawElements[eleCount] = push;
            eleCount += 1;
          }
          else
          {
            var x = ui.helper.offset().left - $('#nodeCanvas').offset().left;
            var y = ui.helper.offset().top - $('#nodeCanvas').offset().top;
            var index = ui.draggable.attr('id');
            
            var push = {x:x, y:y, count:drawElements[index].count};
            drawElements[index] = push;
          }
        });
      });
      setTimeout(function(){adjustColumns();}, 1000);
    });
    
    $(window).resize(function(){
      if($topology.outerWidth() < oldWidth || $topology.outerHeight() < oldHeight)
      {
        for(var i in drawElements)
        {
          if(drawElements[i].x > $topology.outerWidth())
          {
            drawElements[i].x = (drawElements[i].x * ($topology.outerWidth() / oldWidth));
          }
          if(drawElements[i].y > $topology.outerHeight())
          {
            drawElements[i].y = (drawElements[i].y * ($topology.outerHeight() / oldHeight));
          }
          var newCoords = {left:drawElements[i].x, top:drawElements[i].y};
          $('#' + i).css(newCoords);
        }
      }
      oldWidth = $topology.outerWidth();
      oldHeight = $topology.outerHeight();
    });
    
block content
  div#pageWrap(onmouseover='hideProfileInfo(event)')
    h1 Haystack WYSIWYG
    div#profileInfo
      div#pres
        label#name
        br
        br
        label Port Sets
        select#portSets
        br
        label Ethernet Vendors
        select#vendors
        br
        label Ethernet Interfaces
        select#ifaces
        br
        label Ip Address Allocation Type
        select#allocationType(onchange='showIpBlock()')
          option DHCP
          option IP Range
        br
        div#ipBlock(style='display: none;')
          input#ip1(type='number', min='0', max='255', value='0', step='1')
          input#ip2(type='number', min='0', max='255', value='0', step='1')
          input#ip3(type='number', min='0', max='255', value='0', step='1')
          input#ip4(type='number', min='0', max='255', value='0', step='1')
        br
        button(onclick='saveSelectedParameters()') Save Parameters
    div#container
      div#dragBar(class='sameHeight')
        bre
        label Configurations
        br
        select#configurations(onchange='repopulateProfilesList()')
        br
        br
        label Profiles
        br
        table
          tbody#profilesHook(onmouseover='showProfileInfo(event)')
        br
        label Number of nodes 
        input#nodeNumber(type='number', min='1', max='50', value='1', onchange='updateDragHeader()')
        br
        br
        div#dragMe(class='notDraggableYet')
          header#setNumNodes
        button#createNodes(style='margin-top: 20px;', onclick='createNodes()') Save Topology
      div#nodeCanvas(class='sameHeight')
    

