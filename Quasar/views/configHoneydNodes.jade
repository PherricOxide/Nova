//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2012
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaPiChart.js")
  script(type="text/javascript", src="scripts/NovaGrid.js")

  script
    var grid;
    var currentInterface;
    var pfile;
    var interfaces = "#{INTERFACES}".split(',');
    
    function createNodes()
    {
        document.getElementById("createNewNodes").disabled = true;
        document.getElementById("createNewNodes").value = "Please wait. Creating new nodes...";
        var ipType = document.getElementById("ipType").value;
        var ip1 = document.getElementById("ip1").value;
        var ip2 = document.getElementById("ip2").value;
        var ip3 = document.getElementById("ip3").value;
        var ip4 = document.getElementById("ip4").value;
        var portset = document.getElementById("portSetList").value;
        var vendor = document.getElementById("vendorList").value;
        var profile = document.getElementById("profile").value;
        var count = document.getElementById("nodeCount").value;
        var interface = currentInterface;

        try
        {
          now.createHoneydNodes(ipType, ip1, ip2, ip3, ip4, profile, portset, vendor, interface, count, createNodesCallback);
        }
        catch(err)
        {
          alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
          console.log("err was: " + err);
          document.getElementById("createNewNodes").disabled = false;
          document.getElementById("createNewNodes").value = "Create New Nodes";
        }
    }
    
    function profileChanged()
    {
        now.GetProfile(document.getElementById("profile").value, populateVendorList);
    }
    
    function populateVendorList(profile)
    {
        pfile = profile;
        document.getElementById("vendorList").innerHTML = "";
        for (var vendor in profile.ethernet)
        {
            var v = profile.ethernet[vendor].vendor;
            var option = document.createElement('option');
            option.innerHTML = v;
            document.getElementById("vendorList").appendChild(option);
        }
        
        document.getElementById("portSetList").innerHTML = "";
        for (var portset in profile.portSets)
        {
            var v = profile.portSets[portset].setName;
            var option = document.createElement('option');
            option.innerHTML = v;
            document.getElementById("portSetList").appendChild(option);
        }

        portsetSelectionChanged();
    }
    
    function generateDefaultRows(tcp, udp, icmp)
    {
      var tr0 = document.createElement('tr');
      var td0 = document.createElement('td');
      td0.innerHTML = 'default';
      var td1 = document.createElement('td');
      td1.innerHTML = 'tcp';
      var td2 = document.createElement('td');
      td2.innerHTML = tcp;
      tr0.appendChild(td0);
      tr0.appendChild(td1);
      tr0.appendChild(td2);
      document.getElementById('portsetHook').appendChild(tr0);
      
      var tr1 = document.createElement('tr');
      var td3 = document.createElement('td');
      td3.innerHTML = 'default';
      var td4 = document.createElement('td');
      td4.innerHTML = 'udp';
      var td5 = document.createElement('td');
      td5.innerHTML = udp;
      tr1.appendChild(td3);
      tr1.appendChild(td4);
      tr1.appendChild(td5);
      document.getElementById('portsetHook').appendChild(tr1);
      
      var tr2 = document.createElement('tr');
      var td6 = document.createElement('td');
      td6.innerHTML = 'default';
      var td7 = document.createElement('td');
      td7.innerHTML = 'icmp';
      var td8 = document.createElement('td');
      td8.innerHTML = icmp;
      tr2.appendChild(td6);
      tr2.appendChild(td7);
      tr2.appendChild(td8);
      document.getElementById('portsetHook').appendChild(tr2);
    }
    
    function generateExceptionRow(num, proto, behav)
    {
      var tr0 = document.createElement('tr');
      var td0 = document.createElement('td');
      td0.innerHTML = num;
      var td1 = document.createElement('td');
      td1.innerHTML = proto;
      var td2 = document.createElement('td');
      td2.innerHTML = behav;
      tr0.appendChild(td0);
      tr0.appendChild(td1);
      tr0.appendChild(td2);
      document.getElementById('portsetHook').appendChild(tr0);
    }
    
    function portsetSelectionChanged()
    {
      while(document.getElementById('portsetHook').hasChildNodes())
      {
        document.getElementById('portsetHook').removeChild(document.getElementById('portsetHook').lastChild);
      }
      var desired = document.getElementById('portSetList').options[document.getElementById('portSetList').selectedIndex].value;
      var lightboxProfile = document.getElementById('profile').options[document.getElementById('profile').selectedIndex].value;
      now.GetPortSets(lightboxProfile, function(portset){
        for(var i in portset)
        {
          if(desired == portset[i].setName)
          {
            generateDefaultRows(portset[i].TCPBehavior, portset[i].UDPBehavior, portset[i].ICMPBehavior);
            for(var port in portset[i].TCPExceptions)
            {
              generateExceptionRow(portset[i].TCPExceptions[port].portNum, portset[i].TCPExceptions[port].protocol, portset[i].TCPExceptions[port].behavior);
            }
            for(var port in portset[i].UDPExceptions)
            {
              generateExceptionRow(portset[i].UDPExceptions[port].portNum, portset[i].UDPExceptions[port].protocol, portset[i].UDPExceptions[port].behavior);
            }
          }
        }
      });
    }

    function createNodesCallback(err)
    {
        if (err)
        {
            alert("Unable to create nodes due to error: " + err);
        } else {
            now.IsHaystackUp(checkIfRestartNeeded); 
        }
    }

    function checkIfRestartNeeded(haystackUp)
    {
      if (haystackUp)
      {
        var restartHaystack = confirm("You must restart the haystack for this to take effect. Restart it now?");
        if (restartHaystack)
        {
          now.RestartHaystack();
        }
      }
      location.reload(true);
    }
    
    function ipTypeChanged()
    {
      var ipEditEnabled;
      if (document.getElementById("ipType").value == "DHCP")
      {
        ipEditEnabled = true;
      } else {
        ipEditEnabled = false;
      }
      document.getElementById("ip1").disabled = ipEditEnabled;
      document.getElementById("ip2").disabled = ipEditEnabled;
      document.getElementById("ip3").disabled = ipEditEnabled;
      document.getElementById("ip4").disabled = ipEditEnabled;
     }
    
    function deleteSelectedItems()
    {
      var items = grid.GetSelected();
     
      for(var i in items)
      {
        grid.DeleteRow(items[i]);
      }
     
      try
      {
        now.deleteNodes(items, errorMessageCallback);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }   
      grid.Render();
    }

    function errorMessageCallback(success, message)
    {
      if(success != true)
      {
        alert("Unable to complete operation due to error: " + message);
        location.reload(true);
        return;
      }
      now.IsHaystackUp(checkIfRestartNeeded); 
    }

    function deleteAllNodes()
    {
      var gridElements = grid.GetElements();
      var passToDeleteNodes = [];
      
      for(var i in gridElements)
      {
        passToDeleteNodes.push(i);
      }
      try
      {
        now.deleteNodes(passToDeleteNodes, errorMessageCallback);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }
    }

    function checkOnlyOne(checkedBox)
    {
      var checkedBox = document.getElementById(checkedBox);
      var forLength = document.getElementById("length").getAttribute("value");
      
      var checkAgainst = checkedBox.getAttribute("id");
      
      var checkedInterface = checkedBox.value;
      currentInterface = checkedBox.value;
      try {
          var ip = now.GetLocalIP(checkedInterface, UpdateIpField);
      } catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }   
      
      if(forLength == 1)
      {
        checkedBox.checked = true;
        return;
      }
      
      for(var i = 0; i < forLength; i++)
      {
        if(checkAgainst !== ("if" + i))
        {
          document.getElementById("if" + i).checked = false;
        }
      }
      
      if(!checkedBox.checked)
      {
        checkedBox.checked = true; 
      }
    }

    function UpdateIpField(ip)
    {
      if (ip != undefined)
      {
        var ipParts = ip.split(".");
        document.getElementById("ip1").value = ipParts[0];
        document.getElementById("ip2").value = ipParts[1];
        document.getElementById("ip3").value = ipParts[2];
        document.getElementById("ip4").value = ipParts[3];
      } else {
        document.getElementById("ip1").value = 0;
        document.getElementById("ip2").value = 0;
        document.getElementById("ip3").value = 0;
        document.getElementById("ip4").value = 0;
      }

    }

    function changeSelectedInterfaces()
    {
      var items = grid.GetSelected();
      if(items != '' && items != undefined)
      {
        var newInterface = prompt("Change selected nodes' interface to ", 'new interface');
        if(newInterface == '' || newInterface == undefined)
        {
          return;
        }
        else
        {
          var change = false;
          for(var i in interfaces)
          {
            if(newInterface == interfaces[i])
            {
              change = true;
            }
          }
          if(change == true)
          {
            now.ChangeNodeInterfaces(items, newInterface, function(){
              location.reload(true);
            }); 
          }
          else
          {
            alert('That is not a valid interface! The choices are ' + interfaces.join());
            changeSelectedInterfaces();
          }
        }
      }
      else
      {
        alert('Must select some nodes first!');
      }
    }

    function editSelectedItem()
    {
      var items = grid.GetSelected();
      if (items.length != 1)
      {
        alert('You can only edit one node at a time');
        return;
      }

      var nodeName = items[0];

      if (nodeName == "Doppelganger") 
      {
        alert('The Doppelganger node can not be edited here');
        return; 
      }
      window.location.href = "editHoneydNode?node=" + nodeName;
    }

    function configurationRestored()
    {
        now.IsHaystackUp(checkIfRestartNeeded); 
    }
    
    function onGridRendered()
    {
       var tablePages = document.getElementById("tablePages");
       tablePages.innerHTML = "";
       grid.populateTablePages(tablePages);   
    }
    
    function deleteByProfile(profileName)
    {
      var gridElements = grid.GetElements();
      var passToDeleteNodes = [];
      for(var i in gridElements)
      {
        if(gridElements[i][2] === profileName)
        {
          passToDeleteNodes.push(gridElements[i][1]);
          grid.DeleteRow(gridElements[i][1]);
        }
      }
      try
      {
        now.deleteNodes(passToDeleteNodes, errorMessageCallback);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }
    }

    function dhcpStatusCallback(dhcpNodes)
    {
        for (var i in dhcpNodes)
        {
            var mac = dhcpNodes[i].mac.replace(/ /, '');
            if (grid.GetElements()[mac] !== undefined)
            {
                var oldRow = grid.m_elements[mac];
                oldRow[1] = "DHCP (currently " + dhcpNodes[i].ip + ")";
                grid.PushEntry(oldRow);
                grid.Render();
            }
        }
    }
    
    function Init()
    {
      var gridStructure = [];
      gridStructure.push({name: "Enabled"});
      gridStructure.push({name: "IP"});
      gridStructure.push({name: "Interface"});
      gridStructure.push({name: "MAC"});
      gridStructure.push({name: "Profile"});
      
      grid = new NovaGrid(gridStructure, 3, document.getElementById('nodeTable'), 'grid', true);
      
      grid.SetSortByKey(1);
      grid.SetRowsPerPage(50);
      grid.SetRenderCallback(onGridRendered);
      
      var nodeList = !{JSON.stringify(nodes)};
      var interfaces = !{JSON.stringify(INTERFACES)};
      var interfaceAliases = !{JSON.stringify(interfaceAliases)}

      for(var i in nodeList)
      {
        var row = [];
        row.push(String(nodeList[i].enabled));
        
        if(nodeList[i].ip != "DHCP") 
        {
          row.push(String(nodeList[i].ip));
        } 
        else 
        {
          row.push("DHCP");
        }
        
        var alias = "";
        for(var j = 0; j < interfaces.length; j++) 
        {
          if(interfaces[j] == nodeList[i].interface) 
          {
            alias = interfaceAliases[j];
          }
        }

        if(alias != "" && alias != nodeList[i].interface) 
        {
          row.push(nodeList[i].interface + " (alias: " + alias + ")"); 
        } 
        else 
        {
          row.push(nodeList[i].interface); 
        }

        row.push(String(nodeList[i].mac));
        row.push(String(nodeList[i].pfile));

        grid.PushEntry(row);
      }
      
      grid.Render();
      
      var gridElements = grid.GetElements();
      
      var nodesPerProfile = {};
      var piChartRender = [];
      
      for(var i in gridElements)
      {
        var pfile = gridElements[i][4];
        if(nodesPerProfile[pfile] === undefined)
        {
          nodesPerProfile[pfile] = 1;
        }
        else
        {
          nodesPerProfile[pfile]++;
        }
      }
      
      for(var pfile in nodesPerProfile)
      {
        var p = {};
        p.name = pfile;
        p.value = nodesPerProfile[pfile];
        piChartRender.push(p);
      }
      
      var pi = new NovaPiChart('piChart', 200, 'deleteByProfile');
      pi.Render(piChartRender);
    }
    
    function repopulateSelect(src)
    {
      var clear = document.getElementById('profile');
      while(clear.hasChildNodes())
      {
        clear.removeChild(clear.lastChild);
      }
      if(src.checked)
      {
        populateProfileSelectLeaf();
      }
      else
      {
        populateProfileSelectAll();
      }
    }
    
    function populateProfileSelectAll()
    {
      try
      {
        now.GetProfileNames(function(names){
          for(var i in names)
          {
            var option = document.createElement('option');
            option.value = names[i];
            option.innerHTML = names[i];
            document.getElementById('profile').appendChild(option);
          } 
        });
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }
    }
    
    function populateProfileSelectLeaf()
    {
      try
      {
        now.GetLeafProfileNames(function(names){
          for(var i in names)
          {
            var option = document.createElement('option');
            option.value = names[i];
            option.innerHTML = names[i];
            document.getElementById('profile').appendChild(option);
          }
        });
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }
    }

    function checkForEditInterface()
    {
      if(interfaces.length > 1)
      {
        var button = document.createElement('button');
        button.setAttribute('onclick', 'changeSelectedInterfaces()');
        button.innerHTML = 'Change Node Interfaces';
        document.getElementById('generateHook').appendChild(button);
      }
    }
    
    window.onload = function()
    {
      document.onselectstart = function()
      {
        return false;
      }
    }

    function init()
    {
      now.ready(function() {
        Init();
        checkOnlyOne('if0');
        profileChanged();
        now.GetHaystackDHCPStatus(dhcpStatusCallback);
        checkForEditInterface();
      });

    }

block content
  h1 Current Haystack Node Configuration
  div#piChart
  br
  div#node_header
    br
    div#tablePages
    br
  div.novaGrid
    div#nodeTable
  br
  br

  button(onclick="deleteSelectedItems()") Delete Selected Nodes
  button(onclick="deleteAllNodes()") Delete All Nodes 
  button(onclick="editSelectedItem()") Edit Selected Node

  br
  br
  div#generateHook
    a.button(href="/editHoneydNode?node=doppelganger") Edit Doppelganger
  br
  br
  h2 Create Honeyd Nodes
  label Show Only Leaf Profiles?
  input(type='checkbox', checked=true, onclick='repopulateSelect(this)')
  br
  br
  label Profile
  select#profile(name="profile", onchange='profileChanged()')
    each profile, i in profiles
      option #{profile}
  br
  label Portset
  select#portSetList(name="profile", onchange='portsetSelectionChanged()')
  br
  br
  div(style="margin-left: 300px; height: 200px; overflow-y: scroll;")
    table(border='1')
      thead
        th(style='background-color: #d0e9fc;') Port Number
        th(style='background-color: #d0e9fc;') Protocol
        th(style='background-color: #d0e9fc;') Behavior
      tbody#portsetHook
  br
  
  label Ethernet Vendor
  select#vendorList(name"vendorList")
  br

  label Number of nodes to create
  input#nodeCount(type="number", name="nodeCount", min="1", value="1")
  
  br
  label Network Interface
  table
    thead
      tr 
    tbody
    - if(INTERFACES.length == 1)
      tr 
        td
          input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne('if0')")
          #{INTERFACES[0]} (Alias: #{interfaceAliases[0]})
    - else
      tr 
        td
          input(type="checkbox", value=INTERFACES[0], id="if0", name="interface", width=10, checked, onclick="checkOnlyOne('if0')")
          #{INTERFACES[0]} (Alias: #{interfaceAliases[0]})
      - for (var i = 1; i < INTERFACES.length; i++)
          tr 
            td
              input(type="checkbox", value=INTERFACES[i], id="if#{i}", name="interface", width=10, onclick="checkOnlyOne('if#{i}')")
              #{INTERFACES[i]} (Alias: #{interfaceAliases[i]})
  hidden(id="length", value=INTERFACES.length)
  br
  label IP Address Range Type
  select#ipType(name="ipType", onChange="ipTypeChanged()")
    option DHCP
    option IP Range

  br
  label Starting IP address
  input.ip#ip1(type="number", name="ip1", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip2(type="number", name="ip2", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip3(type="number", name="ip3", min="0", max="255", value="0", disabled="disabled")
  input.ip#ip4(type="number", name="ip4", min="0", max="255", value="0", disabled="disabled")
  
  br
  br
  input#createNewNodes(type="Submit",value="Create New Nodes", onclick="createNodes()")
