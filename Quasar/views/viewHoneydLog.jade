//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block content
  h1 Watching Honeyd Log
  p
    a.button(href="/downloadHoneydLog.log")
      img.buttonIcon(src="images/save.png")
      span.buttonSpan Download Entire Log
  input#showAdvanced(type="checkbox", onchange="showAdvancedChanged()")
  label Show Debugging Information
  br
  span#logTable(style="display: inline-block;")
  p#rawLog(style="display: none")= log

block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")

  style(type="text/css")
    td.novaGrid {
        text-align: left;
    }
  
  script
    var line;
    var logGrid;
        
    function formatLogEntry(entry) {
        entry.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        entry = "<span style='font-weight: bold;'>" + entry + "</span>";
        entry = entry.replace(/#012/g, "<BR>");
        return entry;
    }
    
    function showAdvancedChanged()
    {
        if($('#showAdvanced').is(':checked'))
        {
            logGrid.m_columns[2].isDisabled = false;
        }
        else
        {
            logGrid.m_columns[2].isDisabled = true;
        }

        logGrid.GenerateTableHeader();
        logGrid.Render();
    }
    
    var index = 0;
    function AddLogEntry(line)
    {
        line = line.replace(/ +(?= )/g, '');
        var match = line.match(/(\\S+ \\S+ \\S+) ([^:]+): (.*)/);

        if(match != null)
        {
            match.splice(0,1,Number(index));
            index++;
            
            match[3] = "<span style='font-weight: bold;'>" + match[3] + "</span>";
            match.style = "background-color: #E4F2FF";
            
            logGrid.PushEntry(match);
        }
        else
        {
            console.log("No match for entry '" + line + "'");
        }
    }


    function init()
    {
        var log = $('#rawLog').html();
        var gridStructure = new Array();
        var gridStructure = new Array();
        gridStructure.push({name: "Message #", isDisabled: false});
        gridStructure.push({name: "Timestamp", isDisabled: false});
        gridStructure.push({name: "Machine Info", isDisabled: true});
        gridStructure.push({name: "Message", isDisabled: false, formatter: formatLogEntry});
        logGrid = new NovaGrid(gridStructure, 0, $('#logTable')[0], 'logGrid');
        logGrid.SetRowsPerPage(25);
        
        var log = log.toString().split(/\\r\\n|\\n\\r|\\n|\\r/);

        for(var i in log)
        {
            line = String(log[i]);

            AddLogEntry(line);
        }

        logGrid.Render();
    
    
        now.ready(function()
        {
            now.newHoneydLogLine = function (lineNum, line)
            {
               AddLogEntry(line);
               logGrid.Render();
            }
        });
    }
