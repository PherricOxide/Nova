//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block content
  h1 Details for suspect

  div#genericInfo
  
  div(style="width: 1024px;")
    div#tcpPortChart(style='display: inline-block; width: 30%; margin: 10px')
    div#tcpIpChart(style='display: inline-block; width: 30%; margin: 10px')
    div#tcpIpPortChart(style='display: inline-block; width: 30%; margin: 10px')

  br
  div(style="width: 1024px;")
    div#udpPortChart(style='display: inline-block; width: 30%; margin: 10px')
    div#udpIpChart(style='display: inline-block; width: 30%; margin: 10px')
    div#udpIpPortChart(style='display: inline-block; width: 30%; margin: 10px')
  
  br
  div(style="width: 1024px;")
    div#icmpPortChart(style='display: inline-block; width: 30%; margin: 10px')
    div#icmpIpChart(style='display: inline-block; width: 30%; margin: 10px')
    div#icmpIpPortChart(style='display: inline-block; width: 30%; margin: 10px')
  
  
  br
  h1 Detailed counts of connections from !{suspect}
  div(style="width: 1024px")
    div(style="float: left; margin-right: 100px")
      div.novaGrid
        div#packetCountTable
      div#tablePages
    div
      div.novaGrid
        div#packetSizeTable
      div#packetSizeTablePages
  
  br



block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  script(type='text/javascript', src='scripts/NovaPiChart.js')


  style
    .innerVertBar {
        height: 60%;
        position: absolute;
        bottom: 0px;
        left: 0px;
        width: 20px;
        margin: 0px;
        
        background-image: url('images/gradient.jpg');
        background-repeat: repeat-x;
        background-color: #ABD6FF;
        border: 0;
    }

    .outerVertBar {
        height: 100px;
        width: 20px;
        border: 1px solid black;
        position: relative;
        background-color: #F5F5F9;
    }

    .containerVertBar {
        display: inline-block;
        margin-right: 10px;
    }

  script
    var grid;
    var protocolChart, tcpPortChart, udpPortChart, tcpIpChart, udpIpChart, tcpIpPortChart, udpIpPortChart, icmpIpChart, icmpIpPortChart, icmpPortChart;

    // For converting numeric icmp code to something nicer to display to the user
    var icmpTypes = {
          0:"Echo Reply", 
          1:"Unassigned", 
          2:"Unassigned", 
          3:"Destination Unreachable", 
          4:"Source Quench", 
          5:"Redirect", 
          6:"Alternate Host Address", 
          7:"Unassigned", 
          8:"Echo", 
          9:"Router Advertisement", 
          10:"Router Selection", 
          11:"Time Exceeded", 
          12:"Parameter Problem", 
          13:"Timestamp", 
          14:"Timestamp Reply", 
          15:"Information Request", 
          16:"Information Reply", 
          17:"Address Mask Request", 
          18:"Address Mask Reply", 
          19:"Reserved (for Security)", 
          20:"Reserved (for Robustness Experiment)", 
          30:"Traceroute", 
          31:"Datagram Conversion Error", 
          32:"Mobile Host Redirect",
          33:"IPv6 Where-Are-You",
          34:"IPv6 I-Am-Here",
          35:"Mobile Registration Request",
          36:"Mobile Registration Reply",
          37:"Domain Name Request"
    };

    function numberWithCommas(x) {
        var x = String(x);
        var out = String();
        
        for (var i = (x.length - 1); i >= 0; i--) {
            out += x[(x.length - 1) - i];
            if (i % 3 == 0 && i != 0) {
                out += ",";
            }
        }

        return out;
    }

    function init(ready){
        tcpIpChart = new NovaPiChart('tcpIpChart', 'TCP Connections by IP', 200);
        tcpPortChart = new NovaPiChart('tcpPortChart', 'TCP Connections by port', 200);
        tcpIpPortChart = new NovaPiChart('tcpIpPortChart', 'TCP Packets by IP and port', 200);
        
        udpIpChart = new NovaPiChart('udpIpChart', 'UDP Packets by IP', 200);
        udpPortChart = new NovaPiChart('udpPortChart', 'UDP Packets by port', 200);
        udpIpPortChart = new NovaPiChart('udpIpPortChart', 'UDP Packets by IP and port', 200);
        
        icmpIpChart = new NovaPiChart('icmpIpChart', 'ICMP Packets by IP', 200);
        icmpPortChart = new NovaPiChart('icmpPortChart', 'ICMP Packets by type', 200);
        icmpIpPortChart = new NovaPiChart('icmpIpPortChart', 'ICMP Packets by IP and type', 200);
        
        tcpIpChart.m_disableLegend = true;
        tcpPortChart.m_disableLegend = true;
        tcpIpPortChart.m_disableLegend = true;
        udpIpChart.m_disableLegend = true;
        udpPortChart.m_disableLegend = true;
        udpIpPortChart.m_disableLegend = true;
        icmpIpChart.m_disableLegend = true;
        icmpPortChart.m_disableLegend = true;
        icmpIpPortChart.m_disableLegend = true;
        
        var columns = new Array();
        columns.push({name: "Dst IP:Port:Protocol", isDisabled: true});
        columns.push({name: "Dst IP"});
        columns.push({name: "Details"});
        columns.push({name: "Protocol"});
        columns.push({name: "Packets"});

        grid = new NovaGrid(columns, 0, "packetCountTable", "grid");
        grid.SetSortByKey(4);
        grid.SetRowsPerPage(20);
        grid.SetPageNumberDiv($('#tablePages').get(0));
        grid.Render();

        
        var columns = new Array();
        columns.push({name: "Packet Size (in bytes)"});
        columns.push({name: "Packets seen"});
       
        sizeGrid = new NovaGrid(columns, 0, "packetSizeTable", "sizeGrid");
        sizeGrid.SetSortByKey(1);
        sizeGrid.SetRowsPerPage(20);
        sizeGrid.SetPageNumberDiv($('#packetSizeTablePages').get(0));
        sizeGrid.Render();


        now.ready(function()
        {
            now.GetSuspect('!{suspect}', '!{interface}', OnNewSuspect);
            now.GetIpPortsContacted('!{suspect}', '!{interface}', OnIpPorts);
            now.GetPacketSizes('!{suspect}', '!{interface}', OnPacketSizes);
        });
    }

    function OnNewSuspect(err, suspect) {
        if (err) {
            alert("Unable to fetch suspect details. See Javascript console for detailed errors.");
            console.log(err);
            return;
        }

    
        var info = "<table>";
        info += "<TR><TD> IP Address </TD> <TD>" + suspect.ip + "</TD></TR>";
        info += "<TR><TD> Interface </TD> <TD>" + suspect.interface + "</TD></TR>";
        info += "</TABLE>";
       
       
        info += "<div style='display: inline-block; float: left; margin-right: 20px'><H1>Packet Count Totals</H1>";
        info += "<TABLE>";
        info += "<TR><TD> # Bytes </TD> <TD>" + numberWithCommas(suspect.count_bytes) + "</TD></TR>";
        info += "<TR><TD> # TCP Packets </TD> <TD>" + numberWithCommas(suspect.count_tcp)  + "</TD></TR>";
        info += "<TR><TD> # UDP Packets </TD> <TD>" + numberWithCommas(suspect.count_udp)  + "</TD></TR>";
        info += "<TR><TD> # ICMP Packets </TD> <TD>" + numberWithCommas(suspect.count_icmp) + "</TD></TR>";
        info += "<TR><TD> # Other Packets </TD> <TD>" + numberWithCommas(suspect.count_other) + "</TD></TR>";
      
      
        info += "<TR><TD></TD></TR>";
        info += "<TR><TD></TD></TR>";
        info += "<TR><TD> # TCP SYN Packets </TD> <TD>" + numberWithCommas(suspect.count_tcpSyn) + "</TD></TR>";
        info += "<TR><TD> # TCP ACK Packets </TD> <TD>" + numberWithCommas(suspect.count_tcpAck) + "</TD></TR>";
        info += "<TR><TD> # TCP SYN/ACK Packets </TD> <TD>" + numberWithCommas(suspect.count_tcpSynAck) + "</TD></TR>";
        info += "<TR><TD> # TCP FIN Packets </TD> <TD>" + numberWithCommas(suspect.count_tcpFin) + "</TD></TR>";
        info += "<TR><TD> # TCP RST Packets </TD> <TD>" + numberWithCommas(suspect.count_tcpRst) + "</TD></TR>";
        info += "</TABLE>";
        
        
        info += "</div><div style='display: inline-block;'><H1>Packet Count Summaries</H1>";
        info += '<div id="ProtocolPiChart"></div></div>';
        
        info += "<H2>Percent of TCP packets with flags set</H2>";
        info += "<TABLE>";
        var num = 100*(suspect.count_tcpSyn || 0) / (1.0 * suspect.count_tcp);
        info += '<TR><TD> Percent with SYN </TD> <TD> <div class="classification_entry"><div style="width: ' + num.toFixed(0) + '%" class="progressBar">&nbsp;</div><div class="progressText">' + num.toFixed(2) + '</div></div> </TD></TR>';
        var num = 100*(suspect.count_tcpAck || 0) / (1.0 * suspect.count_tcp);
        info += '<TR><TD> Percent with ACK </TD> <TD> <div class="classification_entry"><div style="width: ' + num.toFixed(0) + '%" class="progressBar">&nbsp;</div><div class="progressText">' + num.toFixed(2) + '</div></div> </TD></TR>';
        var num = 100*(suspect.count_tcpFin || 0) / (1.0 * suspect.count_tcp);
        info += '<TR><TD> Percent with FIN </TD> <TD> <div class="classification_entry"><div style="width: ' + num.toFixed(0) + '%" class="progressBar">&nbsp;</div><div class="progressText">' + num.toFixed(2) + '</div></div> </TD></TR>';
        var num = 100*(suspect.count_tcpRst || 0) / (1.0 * suspect.count_tcp);
        info += '<TR><TD> Percent with RST </TD> <TD> <div class="classification_entry"><div style="width: ' + num.toFixed(0) + '%" class="progressBar">&nbsp;</div><div class="progressText">' + num.toFixed(2) + '</div></div> </TD></TR>';
        info += "</TABLE>";
        
        
        
     
        info += "<H1>Computed KNN Classification Features </H1>";
        info += "<TABLE>";
        
        info += "<TR><TD></TD></TR>";
        info += "<TR><TD></TD></TR>";
        info += "<TR><TD> IP Traffic Distribution </TD> <TD>" + suspect.ip_traffic_distribution + "</TD></TR>";
        info += "<TR><TD> Port Traffic Distribution </TD> <TD>" + suspect.port_traffic_distribution + "</TD></TR>";
        info += "<TR><TD> Packet Size Mean </TD> <TD>" + suspect.packet_size_mean + "</TD></TR>";
        info += "<TR><TD> Packet Size Deviation </TD> <TD>" + suspect.packet_size_deviation + "</TD></TR>";
        info += "<TR><TD> Distinct IPs Contacted </TD> <TD>" + suspect.distinct_ips + "</TD></TR>";
        info += "<TR><TD> Distinct TCP Ports Contacted </TD> <TD>" + suspect.distinct_tcp_ports + "</TD></TR>";
        info += "<TR><TD> Distinct UDP Ports Contacted </TD> <TD>" + suspect.distinct_udp_ports + "</TD></TR>";
        info += "<TR><TD> Average TCP Ports Per Host</TD> <TD>" + suspect.avg_tcp_ports_per_host + "</TD></TR>";
        info += "<TR><TD> Average UDP Ports Per Host</TD> <TD>" + suspect.avg_udp_ports_per_host + "</TD></TR>";
        info += "<TR><TD> Percent TCP SYN Packets </TD> <TD>" + suspect.tcp_percent_syn * 100 + "%</TD></TR>";
        info += "<TR><TD> Percent TCP SYN ACK Packets </TD> <TD>" + suspect.tcp_percent_synack * 100 + "%</TD></TR>";
        info += "<TR><TD> Percent TCP FIN Packets </TD> <TD>" + suspect.tcp_percent_fin * 100 + "%</TD></TR>";
        info += "<TR><TD> Percent TCP RST Packets </TD> <TD>" + suspect.tcp_percent_rst * 100 + "%</TD></TR>";
        info += "<TR><TD> Percent Haystack Contacted </TD> <TD>" + suspect.haystack_percent_contacted * 100 + "%</TD></TR>";
        info += "</TABLE>";
        
     
        info += "<H1>Output of KNN classification engine </H1>";
        info += "<TABLE>";
        info += "<TR><TD> Classification </TD> <TD>" + suspect.classification + "</TD></TR>";
        info += "<TR><TD> Hostile KNN neighbors </TD> <TD>" + suspect.hostileNeighbors + "</TD></TR>";
        info += "<TR><TD> Classification Notes </TD> <TD>" + String(suspect.classificationNotes).replace(/\\n/g, "<BR />") + "</TD></TR>";
        
        info += "</TABLE><BR><BR>";
        $('#genericInfo').html(info);
        
        
        arr = new Array();
        arr.push({name: 'TCP Packets', value: suspect.count_tcp});
        arr.push({name: 'UDP Packets', value: suspect.count_udp});
        arr.push({name: 'ICMP Packets', value: suspect.count_icmp});
        arr.push({name: 'Other', value: suspect.count_other});
        arr = arr.sort(function(a,b) {return b.value - a.value});
        protocolChart = new NovaPiChart('ProtocolPiChart', '', 200);
        protocolChart.Render(arr);
    }

    function OnPacketSizes(err, results) {
        if (err) {
            alert("Unable to fetch suspect details. See Javascript console for detailed errors.");
            console.log(err);
            return;
        }

        for (var r in results) {
            var row = new Array();
            row.push(results[r].packetSize);
            row.push(results[r].count);
            sizeGrid.PushEntry(row);
        }
        sizeGrid.Render();

    }

    function OnIpPorts(err, results) {
        if (err) {
            alert("Unable to fetch suspect details. See Javascript console for detailed errors.");
            console.log(err);
            return;
        }

        var tcparr = new Array(); 
        var udparr = new Array(); 
        var icmparr = new Array();

        var tcpPortCounts = {};
        var tcpIpCounts = {};
        var udpPortCounts = {};
        var udpIpCounts = {};
        var icmpTypeCodeCounts = {};
        var icmpIpCounts = {};

        for (var r in results) {
            var row = new Array();
            row.push(results[r].dstip + String(results[r].port) + results[r].type);
            row.push(results[r].dstip);

            if (results[r].type == "tcp") {
                row.push("Dst port: " + results[r].port);
               
               if (!tcpPortCounts[results[r].port]) {tcpPortCounts[results[r].port] = 0;}
                if (!tcpIpCounts[results[r].dstip]) {tcpIpCounts[results[r].dstip] = 0;}

                tcpPortCounts[results[r].port] += results[r].count;
                tcpIpCounts[results[r].dstip] += results[r].count;

                tcparr.push({name: results[r].dstip + " " + results[r].port, value: results[r].count});
            } else if (results[r].type == "udp") { 
                row.push("Dst port: " + results[r].port);
                if (!udpPortCounts[results[r].port]) {udpPortCounts[results[r].port] = 0;}
                if (!udpIpCounts[results[r].dstip]) {udpIpCounts[results[r].dstip] = 0;}
                
                udpPortCounts[results[r].port] += results[r].count;
                udpIpCounts[results[r].dstip] += results[r].count;
                udparr.push({name: results[r].dstip + " " + results[r].port, value: results[r].count});
            } else if (results[r].type == "icmp") {
                var icmpType = results[r].port & 0xF;
                var icmpCode = (results[r].port & 0x0F) >> 8;

                // Replace with string version if we have it
                if (icmpTypes[icmpType]) {
                    icmpType = icmpTypes[icmpType];
                }
                var icmp = "Type: " + icmpType + " | Code: " + icmpCode;
                row.push(icmp);
                
                if (!icmpTypeCodeCounts[icmp]) {icmpTypeCodeCounts[icmp] = 0;}
                if (!icmpIpCounts[results[r].dstip]) {icmpIpCounts[results[r].dstip] = 0;}
                
                icmpTypeCodeCounts[icmp] += results[r].count;
                icmpIpCounts[results[r].dstip] += results[r].count;
                icmparr.push({name: results[r].dstip + " " + icmp, value: results[r].count});
            }
            
            
            row.push(results[r].type);
            row.push(results[r].count);
            
            grid.PushEntry(row);

        }

        tcparr = tcparr.sort(function(a,b) {return b.value - a.value});
        tcpIpPortChart.Render(tcparr);
        
        udparr = udparr.sort(function(a,b) {return b.value - a.value});
        udpIpPortChart.Render(udparr);
        
        icmparr = icmparr.sort(function(a,b) {return b.value - a.value});
        icmpIpPortChart.Render(icmparr);

        
        var arr = new Array();
        for (var r in tcpPortCounts) {arr.push({name: r, value: tcpPortCounts[r]});}
        arr = arr.sort(function(a,b) {return b.value - a.value});
        tcpPortChart.Render(arr);
        
        var arr = new Array();
        for (var r in tcpIpCounts) {arr.push({name: r, value: tcpIpCounts[r]});}
        arr = arr.sort(function(a,b) {return b.value - a.value});
        tcpIpChart.Render(arr);
       

        var arr = new Array();
        for (var r in udpIpCounts) {arr.push({name: r, value: udpIpCounts[r]});}
        arr = arr.sort(function(a,b) {return b.value - a.value});
        udpIpChart.Render(arr);
        
        var arr = new Array();
        for (var r in udpPortCounts) {arr.push({name: r, value: udpPortCounts[r]});}
        arr = arr.sort(function(a,b) {return b.value - a.value});
        udpPortChart.Render(arr);
       

        var arr = new Array();
        for (var r in icmpIpCounts) {arr.push({name: r, value: icmpIpCounts[r]});}
        arr = arr.sort(function(a,b) {return b.value - a.value});
        icmpIpChart.Render(arr);
        
        var arr = new Array();
        for (var r in icmpTypeCodeCounts) {arr.push({name: r, value: icmpTypeCodeCounts[r]});}
        arr = arr.sort(function(a,b) {return b.value - a.value});
        icmpPortChart.Render(arr);

        
        grid.Render();
    };
