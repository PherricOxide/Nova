//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

doctype 5
html(lang="en", onclick='removeContextMenu();')
  head
    meta(charset="utf-8")
    link(rel="stylesheet", type="text/css", href="style.css", media="screen")
    link(rel="stylesheet", type="text/css", href="/dojo/dijit/themes/claro/claro.css", media="screen")
    link(rel="shortcut icon", href="/favicon.ico")

    script(type="text/javascript", src="/nowjs/now.js")
    script(type="text/javascript", src="/scripts/knockout.js")
    script(src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js")
    script(type="text/javascript", src="/dojo/dojo/dojo.js", data-dojo-config="async:true, parseOnLoad:true")
    script
      // CDN fallback for jQuery
      window.jQuery || document.write('<script src="scripts/jquery.js"><\\/script>');
      
      // This function should be replaced in other jade files, and will be called when the DOM is ready
      function init() {};

      // This function should be replaced
      function isNovadUpChanged(isNovadUp) {};

      now.HaystackStartFailed = function()
      {
        alert('The haystack failed to start!');
      }

      function removeContextMenu()
      {
        if($('#contextMenu') != undefined)
        {
          $('#contextMenu').remove();
        }
      }

      var lastNovadStatus = "unknown";

      // Wrappers for now.js calls with some try/catches
      var StartNovad = function()
      {
          try
          {
            now.StartNovad();
          }
          catch(err)
          {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
          } 
      }
      var StopNovad = function()
      {
          try
          {
            now.StopNovad(function(result){
              if(result == 'false')
              {
                now.HardStopNovad();   
              }
            });
          }
          catch(err)
          {
              alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
              console.log("err was: " + err);
          } 
      }
  
      var StartHaystack = function()
      {
          try
          {
            now.StartHaystack();
          }
          catch(err)
          {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
          } 
      }
  
      var StopHaystack = function()
      {
          try 
          {
            now.StopHaystack();
          }
          catch(err)
          {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
          } 
      }
 
      var updateNovadStatus = function (isNovadUp){
        if(lastNovadStatus == "unknown" || lastNovadStatus != isNovadUp) 
        {
          lastNovadStatus = isNovadUp;

          $("#nova_status_icon_red").css('display', 'none');
          $("#nova_status_icon_green").css('display', 'none');
          $("#nova_status_icon_orange").css('display', 'none');
          
          if(isNovadUp) 
          {
            $("#nova_status_icon_green").css('display', 'block');
          } 
          else 
          {
            $("#nova_status_icon_red").css('display', 'block');
          }

          var ternaryLabel = isNovadUp ? "Online" : "Offline";
          var ternarySrc = isNovadUp ? "/images/novaIconBlinking.gif" : "/images/novaIcon.png";
          $("#nova_status").html(ternaryLabel);
          $("#eyeIcon").attr('src', ternarySrc);
          isNovadUpChanged(isNovadUp);
        }
      };

      var updateHaystackStatus = function (isHaystackUp){
        $("#haystack_status_icon_red").css('display', 'none');
        $("#haystack_status_icon_green").css('display', 'none');
        $("#haystack_status_icon_orange").css('display', 'none');
        
        if(isHaystackUp)
        {
          $("#haystack_status_icon_green").css('display', 'block');
        } 
        else
        {
          $("#haystack_status_icon_red").css('display', 'block');
        }
        
        var ternaryLabel = isHaystackUp ? "Online" : "Offline";
        $("#haystack_status").html(ternaryLabel);
      };

      function fixConsole(alertFallback)
      {    
          if(typeof console === "undefined")
          {
            console = {}; // define it if it doesn't exist already
          }
          if(typeof console.log === "undefined") 
          {
            if(alertFallback) { console.log = function(msg){ alert(msg); }; } 
            else { console.log = function() {}; }
          }
          if(typeof console.dir === "undefined") 
          {
            if(alertFallback) 
            { 
              // THIS COULD BE IMPROVED. maybe list all the object properties?
              console.dir = function(obj){ alert("DIR: "+obj); }; 
            }
            else
            {
              console.dir = function(){};
             }
          }
      }
    
    block headerAdditions

    script
      require(["dijit/layout/BorderContainer", "dijit/layout/TabContainer", "dijit/layout/ContentPane", "dijit/form/Button", "dojo/parser", "dojo/domReady!", "dojo"],
        function(){
          dojo.addOnLoad(function(){
            // Some logging of nowjs stuff
            now.core.on('disconnect', function() {console.log('Warning: Disconnected from nowjs server.');});
            
            dojo.style("appLayout", "opacity", 0);
            dojo.fadeOut({node:"splash", delay:0}).play();
            dojo.style("appLayout", "visibility", "visible");
            dojo.fadeIn({node:"appLayout", delay:0}).play();

            var sideBarButtons = $(".sideBarButton");
            for(var i in sideBarButtons)
            {
              if(!sideBarButtons[i].pathname)
              {
                continue;
              }
              if(sideBarButtons[i].pathname == window.location.pathname)
              {
                sideBarButtons[i].className += ' active';
                console.log("Enabled button " + sideBarButtons[i]);
              }
            }
          });

          now.ready(function()
          {
            now.updateHaystackStatus = updateHaystackStatus;
            now.updateNovadStatus = updateNovadStatus;
            now.IsHaystackUp(updateHaystackStatus);
            now.IsNovadUp(updateNovadStatus);
          });

          fixConsole(false);
          init();
        }
      );

  div#hook(style="position:absolute;left:0px;top:0px;width:100%;height:100%;style='z-index:1001;opacity:0;'")
  body.claro
    div#splash(style="position:absolute;left:0px;top:0px;width:100%;height:100%; text-align: center;")
    div#appLayout.demoLayout(data-dojo-type="dijit.layout.BorderContainer", data-dojo-props="design: 'headline', region: 'center'", style="visibility: hidden")
      div.centerPanel(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'center', tabPosition: 'bottom'")
        div(data-dojo-type="dijit.layout.ContentPane",title="Nova", data-dojo-props="splitter: false")
          block content
      // Header panel
      div.edgePanel(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'top', splitter: false", style="padding: 2px 2px 2px 2px")
        div(data-dojo-type="dijit.layout.BorderContainer",data-dojo-props="design: 'sidebar', splitter: false",style="height: 140px;")
          // Header center
          div(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'center', splitter: false", style="padding: 2px 2px 2px 2px")
            div    
              a(href="/", style='text-decoration: none; width: 530px; display: block;')
                img#eyeIcon(src="images/novaIcon.png",class="align-left", width="100px", height="100px")
                h1(style="margin-top: 6px; margin-bottom: 6px; width: 530px") DataSoft Nova Anti-reconnaissance System
            
            // This is so the browser will cache all 3 pics when it first loads
            table(style="float: left; font-size: 16px;")
              tr
                td(style="text-align: right; font-weight: bold;") Packet Classifier:&nbsp 
                td(style="padding: 0;")
                  img#nova_status_icon_orange(src="/images/orangedot.png", width="20px", height="20px")
                  img#nova_status_icon_red(src="/images/reddot.png", width="20px", height="20px", style="display: none;")
                  img#nova_status_icon_green(src="/images/greendot.png", width="20px", height="20px", style="display: none;")
                td
                  div#nova_status(style='font-weight: bold;') Checking
              tr
                td(style="text-align: right; font-weight: bold;") Haystack&nbsp Status:&nbsp  
                td(style="padding: 0;")
                  img#haystack_status_icon_orange(src="/images/orangedot.png", width="20px", height="20px")
                  img#haystack_status_icon_red(src="/images/reddot.png", width="20px", height="20px", style="display: none;")
                  img#haystack_status_icon_green(src="/images/greendot.png", width="20px", height="20px", style="display: none;")
                td
                  div#haystack_status(style='font-weight: bold;') Checking
            table(style="float: right;")
              tr
                td
                  button(type="button", style="width:170px; float: right; margin-right: 4px", onclick='StartNovad()')
                    img.buttonIcon(src="images/start.png")
                    span.buttonSpan Start Packet Classifier
                td
                  button(type="button", style="width:170px; float: right; margin-right: 4px", onclick='StopNovad()')
                    img.buttonIcon(src="images/stop.png")
                    span.buttonSpan Stop Packet Classifier
              tr
                td
                  button(type="button", style="width:170px; float: right; margin-right: 4px", onclick='StartHaystack()')
                    img.buttonIcon(src="images/start.png")
                    span.buttonSpan Start Haystack
                td
                  button(type="button", style="width:170px; float: right; margin-right: 4px", onclick='StopHaystack()')
                    img.buttonIcon(src="images/stop.png")
                    span.buttonSpan Stop Haystack
            br
    
      // Left panel
      div#leftCol.edgePanel(data-dojo-type="dijit.layout.ContentPane", data-dojo-props="region: 'left', splitter: false")
        block buttonPannelAdditions
      
       
        div.sideBarHeader Status
          a.sideBarButton(href='/suspects', title='View current packet classification and analysis data') Packet Classifier
          a.sideBarButton(href='/newSuspects', title='information that's changed since the last visit') New Information
        
        div.sideBarHeader Logs
          a.sideBarButton(href='/events', title='View suspects that were logged as hostile at some point') Hostile Events
          a.sideBarButton(href="/viewNovadLog", title='View the main log file for the Nova tools') Nova Log
          a.sideBarButton(href="/viewHoneydLog", title='View the log file for honeypots') Haystack Log
         
        div.sideBarHeader Configuration
          a.sideBarButton(href="/honeydConfigManage", title='Configure honeypots') Haystack Settings
          a.sideBarButton(href="/basicOptions", title='Configure basic Nova options') Basic Options
          a.sideBarButton(href="/advancedOptions", title='Configure advanced Nova options') Advanced Options
          a.sideBarButton(href="/customizeTraining", title='Choose training data to use for suspect classification') Classification Training
          a.sideBarButton(href="/interfaceAliases", title='Give ethernet interfaces nicknames') Interface Aliases
          a.sideBarButton(href="/configWhitelist", title='Add IP addresses to the whitelist to be ignored during classification and packet analysis') Whitelist
       
        div.sideBarHeader Users
          a.sideBarButton(href="/createNewUser", title='Create a new user for the Quasar login') New User
          a.sideBarButton(href="/editUsers", title='Edit users for the Quasar login') Edit User
        
        div.sideBarHeader Documentation
          a.sideBarButton(href='/about', title='About Nova') About
        
