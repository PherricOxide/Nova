//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  
  style(type="text/css")
    td.novaGrid {
        text-align: left;
    }

    .gridButton {
        margin: 0;
        border: 1;
        padding: 0;
        font-size: 12px;
    }

    img.gridIcon {
        height: 10px;
        width: 10px;
    }
  
  script
    var newSuspectGrid;
    var newSuspectDataGrid;
        
    function formatLogEntry(entry) {
        entry.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        entry = "<span style='font-weight: bold;'>" + entry + "</span>";
        entry = entry.replace(/#012/g, "<BR>");
        return entry;
    }

    function newNovaLogWidget() {
        var self = this;
        this.markSeen = function(linenum)
        {
            now.MarkNovaLogEntrySeen(linenum);
            newNovaLogGrid.DeleteRow(linenum);
        }

        this.markAllSeen = function()
        {
            now.MarkAllNovaLogEntriesSeen();
            newNovaLogGrid.Clear();
        }

        this.addRow = function(linenum, line)
        {
          line = line.replace(/ +(?= )/g, '');
          var match = line.match(/(\S+ \S+ \S+) ([^:]+): (\S+) File (.+) at line (\d+): (.*)/);

          if(match != null)
          {
              match.splice(0, 1, Number(linenum));
              match[6] = "<span style='font-weight: bold;'>" + match[6] + "</span>";
              
              switch (match[3])
              {
                  case "DEBUG":
                  case "INFO":
                  case "NOTICE":
                      match.style = "background-color: #99FF99";
                      break;
                  case "ERROR":
                  case "CRITICAL":
                      match.style = "background-color: #FF9999";
                      break;
                  case "WARNING":
                      match.style = "background-color: orange";
                      break;
                  case "ALERT":
                  case "EMERGENCY":
                      match.style = "background-color: #9999FF";
                      break;
              }
            
              var buttonString = "<button class='gridButton' onclick='widget3.markSeen(";
              buttonString += '"' + linenum + '"';
              buttonString += ")'><img src='images/delete.png' class='gridIcon'/> <span class='buttonSpan'>Mark as seen</span></button>";
              match.unshift(buttonString);
            
              newNovaLogGrid.PushEntry(match);
          } 
          else 
          {
              console.log("No match for entry '" + line + "'");
          }
        }

       
        this.renderTimeout = null;
        this.addRowAndRender = function(linenum, line) {
            self.addRow(linenum, line);
            // Use a timer to only render once a second even if we get a bunch of suspects. Keeps things from rendering too often from new data.
            if (self.renderTimeout == null) {
                self.renderTimeout = setTimeout(function() {newNovaLogGrid.Render(); self.renderTimeout = null;}, 1000);
            }
        }
        

        this.init = function()
        {
            var gridStructure = new Array();
            gridStructure.push({name: "Mark as seen", isDisabled: false, noEscape: true});
            gridStructure.push({name: "Message #", isDisabled: false});
            gridStructure.push({name: "Timestamp", isDisabled: false});
            gridStructure.push({name: "Machine Info", isDisabled: true});
            gridStructure.push({name: "Level", isDisabled: false});
            gridStructure.push({name: "File", isDisabled: true});
            gridStructure.push({name: "Line", isDisabled: true});
            gridStructure.push({name: "Message", isDisabled: false, formatter: formatLogEntry});


            newNovaLogGrid = new NovaGrid(gridStructure, 1, document.getElementById("newNovaLogGrid"), 'newNovaLogGrid', false);
            newNovaLogGrid.SetSortByKey(1);
            newNovaLogGrid.SetSortByKey(1);
            newNovaLogGrid.GenerateTableHeader();
            newNovaLogGrid.SetRowsPerPage(10);
            
            now.newLogLine = self.addRowAndRender;


            now.GetUnseenNovaLogs(function(err, entries) 
            {
                if (err)
                {
                    alert("Error fetching unseen nova log entries: " + err);
                    return;
                }

                for (var i in entries)
                {
                    self.addRow(entries[i].linenum, entries[i].line.replace(/#012/g, "<BR>"));
                }
                
                newNovaLogGrid.Render();
            }
        )}
    }


    function newHoneydLogWidget() {
        var self = this;
        this.markSeen = function(linenum)
        {
            now.MarkHoneydLogEntrySeen(linenum);
            newHoneydLogGrid.DeleteRow(linenum);
        }

        this.markAllSeen = function()
        {
            now.MarkAllHoneydLogEntriesSeen();
            newHoneydLogGrid.Clear();
        }


    
        this.addRow = function(linenum, line)
        {
            line = line.replace(/ +(?= )/g, '');
            var match = line.match(/(\S+ \S+ \S+) ([^:]+): (.*)/);

            if(match != null)
            {
                match.splice(0,1,Number(linenum));
                
                match[3] = "<span style='font-weight: bold;'>" + match[3] + "</span>";
                match.style = "background-color: #E4F2FF";
                
                var buttonString = "<button class='gridButton' onclick='widget4.markSeen(";
                buttonString += '"' + linenum + '"';
                buttonString += ")'><img src='images/delete.png' class='gridIcon'/> <span class='buttonSpan'>Mark as seen</span></button>";
                match.unshift(buttonString);
            
                newHoneydLogGrid.PushEntry(match);
            }
            else
            {
                console.log("No match for entry '" + line + "'");
            }
        }
       
        this.renderTimeout = null;
        this.addRowAndRender = function(linenum, line) {
            self.addRow(linenum, line);
            // Use a timer to only render once a second even if we get a bunch of suspects. Keeps things from rendering too often from new data.
            if (self.renderTimeout == null) {
                self.renderTimeout = setTimeout(function() {newHoneydLogGrid.Render(); self.renderTimeout = null;}, 1000);
            }
        }

        this.init = function()
        {
            var columns = new Array();

            columns.push({name: "Mark as seen", noEscape: true});
            columns.push({name: "Message #", isDisabled: false});
            columns.push({name: "Timestamp", isDisabled: false});
            columns.push({name: "Machine Info", isDisabled: true});
            columns.push({name: "Message", isDisabled: false, formatter: formatLogEntry});

            newHoneydLogGrid = new NovaGrid(columns, 1, document.getElementById("newHoneydLogGrid"), 'newHoneydLogGrid', false);
            newHoneydLogGrid.SetSortByKey(1);
            newHoneydLogGrid.SetSortByKey(1);
            newHoneydLogGrid.GenerateTableHeader();
            newHoneydLogGrid.SetRowsPerPage(10);
            
            now.newHoneydLogLine = self.addRowAndRender;


            now.GetUnseenHoneydLogs(function(err, entries) 
            {
                if (err)
                {
                    alert("Error fetching unseen nova log entries: " + err);
                    return;
                }

                for (var i in entries)
                {
                    self.addRow(entries[i].linenum, entries[i].line);
                }
                
                newHoneydLogGrid.Render();
            }
        )}
    }


    var widget1;
    var widget2;
    var widget3;
    var widget4;
    var img;
    function init(){
        // Trick to preload the delete.png image
        img = new Image();
        img.src = "images/delete.png";

        //widget1 = new newSuspectWidget();
        //widget1.initNewSuspects();

        //widget2 = new newSuspectDataWidget();
        //widget2.initNewSuspects();

        widget3 = new newNovaLogWidget();
        widget3.init();
        
        widget4 = new newHoneydLogWidget();
        widget4.init();

    };
  
block content
  div.contentBox#newNovaLogs
    h1 New Nova Log Entries

    span#newNovaLogGrid(style="display: inline-block;")
    br
    
    button.button(onclick = 'widget3.markAllSeen()')
      img.buttonIcon(src='images/delete.png');
      span.buttonSpan Mark all as seen
  br
  div.contentBox#newHoneydLogs
    h1 New Honeyd Log Entries

    span#newHoneydLogGrid(style="display: inline-block;")
    br
    
    button.button(onclick = 'widget4.markAllSeen()')
      img.buttonIcon(src='images/delete.png');
      span.buttonSpan Mark all as seen

