//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

include mixins/headers.jade

extends layout

block headerAdditions
  link(rel='stylesheet', type='text/css', href='configstyle.css', media='screen')
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")

  script(type="text/javascript", src="scripts/NovaGrid.js")

  script.
    var grid;
    
    function deleteSelectedItems()
    {
      var names = grid.GetSelected();

      if (names.length == 0) {
        alert("Must select at least one entry to delete");
      }
      
      try {
        now.deleteWhitelistEntry(names, errorMessageCallback);
      } catch(err)
      {
        alert('Action failed! Unable to connect to server. Try refreshing the page.');
        console.log('Caught error was: ' + err);
      }
    }

    function addNewItem()
    {
        var value = $('#newEntry').val();
        var interface = $('#interfaceDropdown').val();

        var individualIp = new RegExp('^((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2}))$');
        individualIp.global = false;
        var subnetRangeIp = new RegExp('^((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\/[1-3]?[0-9])$');
        subnetRangeIp.global = false;
        var slashSubnetMaskIp = new RegExp('^((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2}))\/((((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3,3})(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2}))$');
        slashSubnetMaskIp.global = false;
        
        // only add the value to the ipWhitelist if value is either an individual IP or a subnet-style ip 'range'
        if(individualIp.test(value) || subnetRangeIp.test(value) || slashSubnetMaskIp.test(value))
        {
          try 
          {
            now.addWhitelistEntry(interface, value, errorMessageCallback);
          } 
          catch(err) 
          {
            alert('Action failed! Unable to connect to server. Try refreshing the page.');
            console.log('Caught error was: ' + err);
          }
          $('#errorLabel').html('Valid entry found. Adding to the whitelist.');
        }
        else
        {
          $('#errorLabel').html('Invalid IP string');
        }
    }

    
    function errorMessageCallback(success, message)
    {
      if(success != true)
      {
        var dialog = new dijit.Dialog({title: 'Error', content: 'Unable to complete operation due to error: ' + message});
        dialog.show();
        return;
      }
      location.reload(true);
    }

    function init()
    {

        var ips = !{JSON.stringify(whitelistedIps)};
        var subnets = !{JSON.stringify(whitelistedRanges)};
        var whitelistEntries = ips.concat(subnets);
        
        var columns = [
            {name: "id", isDisabled: true},
            {name: "Interfaces"},
            {name: "IP Addresses"},
        ];
        grid = new NovaGrid(columns, 0, document.getElementById("gridDiv"), "grid", true);
        
        for (var i = 0; i < whitelistEntries.length; i++) {
            var row = [];
            row.push(whitelistEntries[i]);
            row = row.concat(whitelistEntries[i].split(","));
            
            grid.PushEntry(row);
        }

        grid.Render();
    }
  
block content
  +headerWithHelp("Whitelist New Entry", "whitelist")
    label Interface
    select(id='interfaceDropdown', name='interfaceDropdown')
      option(value='All Interfaces') All Interfaces
      each interface, i in INTERFACES
        option(value='#{INTERFACES[i]}') #{interfaceAliases[i]}
    br
    label IP Address or IP/netmask combination
    input#newEntry(type='text', placeholder='x.x.x.x/xx', onkeypress='if(event.keyCode == 13){addNewItem()}')
    br

    button.button(onClick='addNewItem()')
      img.buttonIcon(src='images/add.png')
      span.buttonSpan Add to Whitelist
 
  br 
  +headerWithHelp("Current Whitelisted IPs", "whitelist")
    span#gridDiv(style='display: inline-block;')
    br
    button.button(onClick='deleteSelectedItems()')
      img.buttonIcon(src='images/delete.png')
      span.buttonSpan Delete Selected Entry
    
    br
    br
    label(id='errorLabel', style='color:red')
    br
  
