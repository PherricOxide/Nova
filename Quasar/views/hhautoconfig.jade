//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2012
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block headerAdditions
  script(src="scripts/spin.js")
  script
    var subnetsArray = [];
    var Interfaces = "#{INTERFACES}";
   
    var interfaceList = Interfaces.split(',');
    
    var interfaceLength;
    if(interfaceList[0].length == 1)
    {
        interfaceLength = parseInt("1");
    }
    else if(interfaceList[0].length > 1)
    {
        interfaceLength = parseInt(interfaceList.length);
    }
  
    function validateAndAdd(id, errLabel, dest)
    {
      var toValidate = document.getElementById(id).value;
    
      var regex = new RegExp("^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\/[1-3]?[0-9]$");
    
      if((toValidate[toValidate.length - 2] >= 3 && toValidate[toValidate.length - 1] > 2)
        || (toValidate[toValidate.length - 3] != '/' && toValidate[toValidate.length - 2] != '/'))
      {
        document.getElementById(errLabel).style.color = 'red';
        document.getElementById(errLabel).innerHTML = "Invalid subnet bit value (e.g. 33 or higher)";
        return;
      }
    
      if(noSubnetRepeats(toValidate) == 'false')
      {
        document.getElementById(errLabel).style.color = 'red';
        document.getElementById(errLabel).innerHTML = "That subnet is already in the subnets list";
        return;
      }
    
      if(regex.test(toValidate))
      {
        document.getElementById(errLabel).style.color = 'green';
        document.getElementById(errLabel).innerHTML = "Valid subnet found!";
        // add here
        var tr = document.createElement("tr");
        tr.id = toValidate;
        var td0 = document.createElement("td");
        var td1 = document.createElement("td");
        
        var input = document.createElement("input");
        input.setAttribute("type", "text");
        input.setAttribute("readonly", "true");
        input.setAttribute("name", "subnets");
        input.setAttribute("value", toValidate);
        input.innerHTML = toValidate;
        
        var deleteButton = document.createElement("button");
        deleteButton.setAttribute("onclick", 'deleteSubnet("' + toValidate + '")');
        deleteButton.innerHTML = 'Remove Subnet';
        
        td0.appendChild(input);
        td1.appendChild(deleteButton);
        tr.appendChild(td0);
        tr.appendChild(td1);
        
        document.getElementById(dest).appendChild(tr);
        
        document.getElementById(id).value = 'Format: XXX.XXX.XXX.XXX/##';
        document.getElementById(id).blur();
        
        subnetsArray.push(toValidate);
        
        document.getElementById('showTable').style.display = 'block';
      }
      else
      {
        document.getElementById(errLabel).innerHTML = "That is not a valid subnet.";
        return;
      }
    }
    
    function deleteSubnet(source)
    {
      if(document.getElementById(source) != undefined)
      {
        for(var i in subnetsArray)
        {
          if(subnetsArray[i] == source)
          {
            subnetsArray.splice(i, 1);
          }
        }
        document.getElementById('subnetsList').removeChild(document.getElementById(source));
        if(subnetsArray.length == 0)
        {
          document.getElementById('showTable').style.display = 'none';
        }
      }
    }
    
    function noSubnetRepeats(test)
    {
      for(var i in subnetsArray)
      {
        if(subnetsArray[i] == test)
        {
          return 'false';
        }
      }
      return 'true';
    }
    
    function checkAtLeastOne()
    {
      var atLeastOneChecked = false;
      
      // check that there is at least one subnet or one interface selected here
      for(var i = 0; i < document.getElementById("length").getAttribute("value"); i++)
      {
        if(document.getElementById('if' + i) != undefined && document.getElementById('if' + i) != null)
        {
          if(document.getElementById("if" + i).checked)
          {
            atLeastOneChecked = true;
          }
        }
      }
      
      if(document.getElementById("subnetsList").childNodes["length"] > 0)
      {
        atLeastOneChecked = true;
      }
      
      if(!atLeastOneChecked)
      {
        document.getElementById("errorLabel").innerHTML = "Must select at least one interface or add one subnet.";
      }
      
      return atLeastOneChecked;
    }

    function RunScan()
    {
      var checkGroupName = GetGroupName();

      if(GetNumNodes() == -1)
      {
        alert('There is a problem with your value for number of nodes!');
        return;
      }
      if(GetGroupName() == '*' && GetAppend() == '*')
      {
        alert('Must enter a group name, or select a group to append to if a group other than "default" has previously been created!');
        return;          
      }
      else if(GetGroupName() == '#')
      {
        alert('No special characters in group name! Alphanumeric only.');
        return;
      }
      if(checkAtLeastOne())
      { 
        disableBackground(document.getElementById('setup'));
        document.getElementById("startScan").value='Scanning...'; 
        document.getElementById("startScan").setAttribute('disabled', 'true');
        document.getElementById("lightbox").style.display='block';
        document.getElementById("setup").style.opacity='0.5';
        var opts = {
            lines: 17,
            length: 0,
            width: 4,
            radius: 27,
            corners: 0.6,
            rotate: 0,
            color: '#E8A02F',
            speed: 1,
            trail: 34,
            shadow: false,
            hwaccel: false,
            className: 'spinner',
            zIndex: 1003,
            top: 20,
            left: 'auto'
        };
        
        var spinner = new Spinner(opts).spin(document.getElementById('spinnerDiv'));
        document.getElementById('spinnerDiv').style.height = ((opts.radius * 2) + 30)+ 'px';
        var divWidth = document.getElementById('lightbox').scrollWidth;
        document.getElementById('appendText').style.width = divWidth + 'px';
        try 
        {
            var element = document.getElementById("nodeCountType");
            var count = element.options[element.selectedIndex].value;
            now.ShowAutoConfig(count, GetNumNodes(), GetInterfaces(), GetSubnets(), GetGroupName(), GetAppend(), autoscancb, routeToReview); 
        } 
        catch(err) 
        {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        }   
      } 
      else
      {
          return false;
      }
    }

    function disableBackground(source)
    {
      var disableUs = source.childNodes;
      for(var i in disableUs)
      {
        if(typeof disableUs[i] == 'object' && disableUs[i].tagName != undefined)
        {
          disableUs[i].disabled = true;
          if(disableUs[i].hasChildNodes())
          {
            disableBackground(disableUs[i]);
          }
        }
      }
    }

    function enableBackground(source)
    {
      var enableUs = source.childNodes;
      for(var i in enableUs)
      {
        if(typeof enableUs[i] == 'object' && enableUs[i].tagName != undefined)
        {
          enableUs[i].disabled = false;
          if(enableUs[i].hasChildNodes())
          {
            enableBackground(enableUs[i]);
          }
        }
      }
    }

    function GetNumNodes()
    {
        var num;
        var element = document.getElementById("nodeCountType");
        var count = element.options[element.selectedIndex].value;
        if(count == "fixed") 
        {
          num = parseInt(document.getElementById("numNodes").value);
        } 
        else if(count == 'ratio')
        {
          num = parseFloat(document.getElementById("numNodes").value);
        }
        else if(count == 'range')
        {
          num = document.getElementById('numNodes').value;
          var regex = new RegExp('^([0-255]\\.){3}([0-255])\\-([0-255]\\.){3}([0-255])$');
          if(regex.test(num) == 'false')
          {
            num = -1;
          }
        }
        return num;
    }
    
    function GetInterfaces()
    {
        var length = interfaceLength;
        
        var returnString = "";
        
        for(var i = 0; i < length; i++)
        {
          if(document.getElementById("if" + i) != undefined && document.getElementById('if' + i) != null)
          {
            if(document.getElementById("if" + i).checked)
            {
                returnString += document.getElementById("if" + i).value;
                if(i != (length - 1))
                {
                    returnString += ",";
                }
            }
          }
        }
        
        return returnString;
    }
    
    function GetSubnets()
    {
        var returnString = "";
        
        for(var i in subnetsArray)
        {
            returnString += subnetsArray[i];
            if(subnetsArray[i + 1] != undefined)
            {
                returnString += ",";
            }
        }       
        
        return returnString;
    }

    function GetGroupName()
    {
      var group = document.getElementById('newGroup').value;
      if(document.getElementById('newGroupCheck').checked == false)
      {
        return '*';
      }
      if((group == undefined || group == '') && (document.getElementById('newGroupCheck').checked == true))
      {
        return '*';
      }
      if((new RegExp('^[a-zA-Z0-9]+$')).test(group))
      {
        return group;
      }
      else
      {
        alert('Unacceptable characters in group name!');
        return '#';
      }
    }

    function GetAppend()
    {
      var appendToTemp = document.getElementById('groupSelect');
      if(document.getElementById('newGroupCheck').checked == true)
      {
        return '*';
      }
      if(appendToTemp.options[appendToTemp.selectedIndex] == undefined)
      {
          return '*';
      }
      var appendTo = appendToTemp.options[appendToTemp.selectedIndex].value;
      if(appendTo != '' && appendTo != undefined && (document.getElementById('newGroupCheck').checked == false))
      {
        return appendTo;
      }      
      else
      {
        return '*';
      }
    }

    function autoscancb(text)
    {
        var p = document.createElement('p');
        p.value = text;
        p.innerHTML = text;
        document.getElementById('appendText').appendChild(p);
        document.getElementById('appendText').scrollTop = document.getElementById('appendText').scrollHeight;
    }
    
    function routeToReview(redirect)
    {
      window.location = redirect.toString();
    }

    function nodeNumberTypeChanged()
    {
       var element = document.getElementById("nodeCountType");
       var count = element.options[element.selectedIndex].value;
       if(count == "fixed") 
       {
         document.getElementById("numNodesLabel").innerHTML = "Number of Haystack Nodes to create";
         document.getElementById('numNodes').value = '1';
         document.getElementById('numNodes').placeholder = ''; 
         document.getElementById('numNodes').style.width = '170px';
       } 
       else if(count == 'ratio')
       {
         document.getElementById("numNodesLabel").innerHTML = "Ratio of nodes to create versus nodes found during scan";
         if (navigator.userAgent.indexOf("MSIE") == "-1") {
                document.getElementById('numNodes').type = 'number';
         }
         document.getElementById('numNodes').value = '1';
         document.getElementById('numNodes').placeholder = ''; 
         document.getElementById('numNodes').style.width = '170px';
       }
       else if(count == 'range')
       {
         document.getElementById("numNodesLabel").innerHTML = "Range of IP Addresses to fill";
         document.getElementById('numNodes').type = 'text';
         document.getElementById('numNodes').value = '';
         document.getElementById('numNodes').placeholder = '###.###.###.###-###.###.###.###'; 
         document.getElementById('numNodes').style.width = '205px';
       }
    }

    function cancelScan()
    {
      if(typeof now.CancelAutoScan == 'function')
      {
        var group = document.getElementById("newGroup").value;
        now.CancelAutoScan(group);
      }
      else
      {
        alert('*** DEBUG *** Error: now.CancelAutoScan not defined (should not see this)');
      }
    }

    function newOrAppend()
    {
      var check = document.getElementById('newGroupCheck').checked;
      if(check == true)
      {
        document.getElementById('newGroup').value = '';
        document.getElementById('newGroup').style.display = 'block';
        document.getElementById('groupSelect').style.display = 'none';
        document.getElementById('nameLabel').innerHTML = 'New Haystack Group Name';
      }
      else
      {
        document.getElementById('newGroup').value = '';
        document.getElementById('newGroup').style.display = 'none';
        document.getElementById('groupSelect').style.display = 'block';
        document.getElementById('nameLabel').innerHTML = 'Select Group to Append to:';
      }
    }

    function populateTable()
    {
      var table = document.getElementById('appendHook');
      var checked = true;
      for(var i in interfaceList)
      {
        now.GetSubnetFromInterface(interfaceList[i], i, function(iface, subnet, index){
          if(subnet == '')
          {
            console.log('subnet string is empty; failed to get IP/netmask for interface ' + iface);
            return;
          }
          var tr = document.createElement('tr');
          var td = document.createElement('td');
          var div = document.createElement('div');
          var input = document.createElement('input');
          var label = document.createElement('label');
          input.type = 'checkbox';
          input.value = iface;
          input.name = 'interfaces';
          input.style.width = 10;
          if(checked)
          {
            input.checked = checked;
            checked = false;
          }
          input.id = 'if' + index;
          label.innerHTML = iface + ' (' + subnet + ')';
                    
          td.appendChild(input);
          td.appendChild(label);
          div.appendChild(td);
          tr.appendChild(div);
          table.appendChild(tr);
        });
      } 
    }
    
    now.ready(function(){
      populateTable();
    });

block content
  if(SCANERROR !== undefined)
    label(id="scanError", style="color: red;") #{SCANERROR}
    
  div#setup
    h1 Haystack Autoconfig
    br
    input(id='newGroupCheck', type='checkbox', onclick='newOrAppend()', checked='true') 
    label(style='font-weight: bold;') New Group?
    br
    br
    label(id='nameLabel', style='font-weight: bold') New Haystack Group Name
    br
    br
    input(type='text', id='newGroup', placeholder='Required Field', style='display: block;')
    select(id='groupSelect', style='display: none;')
      - for(var i = 0; i < GROUPS.length; i++)
        - if(GROUPS[i] != '' && GROUPS[i] != undefined && GROUPS[i] != 'default')
          option #{GROUPS[i]}
    br
    hidden(id="length", value=INTERFACES.length)
    br    
    label#numNodesLabel(style='font-weight: bold') Number of Haystack Nodes to create
    br
    br
    select#nodeCountType(onchange="nodeNumberTypeChanged()")
      option(value="fixed", selected='selected') Fixed
      option(value="ratio") Ratio
      option(value="range") IP Range
    input(type="number", name="numNodes", id="numNodes", min="1", value="1")
    br
    table
      thead
        tr 
          th Interfaces connected to Server
      tbody(id='appendHook')
    
    br
    label(style="font-weight: bold;") Additional Subnets to Scan
    br
    label(id="errorLabel", style="color:red;")  
    br
    input(type="text", style="width:200px", id="subnetToAdd", width="20", onkeydown="if(event.keyCode == 13){document.getElementById('addSubnet').click(); document.getElementById('subnetToAdd').value=''; event.returnValue=false; event.cancel=true; }", placeholder="xxx.xxx.xxx.xxx/##") 
    button(type="button", id="addSubnet", style="width:160px", onclick="validateAndAdd(\"subnetToAdd\", \"errorLabel\", \"subnetsList\");") Add Subnet  
    br
    table(id='showTable', style='display:none;')
      thead
        tr
          th
            label Subnets
      tbody(id="subnetsList")
      
    br
    br
    input(type="submit", id="startScan", value="Start Scanning", onclick="RunScan()")
    
  div(id="lightbox", class="white_content")
    label(style="font-size: 1.2em;") Scan Commencing...
    div(id='spinnerDiv', style="height: 30px; padding-botton: 30px;")
    div(id='appendText', style="height: 60%; width: auto; overflow-y: scroll; overflow-x: hidden")
    button(id='cancelscan', onclick='cancelScan()') Cancel Scan
    
