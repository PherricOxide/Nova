//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block content
  table
    tr
      td Suspect IP Address:
      td
        b #{suspectIp}
    tr
      td Suspect Interface:
      td
        b #{suspectInterface}
    tr
      td Reverse DNS: 
      td
        b#domain Waiting for reply...

  a(class='button', href='#', onclick='markClassificationAs(1)') Train as Hostile
  a(class='button', href='#', onclick='markClassificationAs(0)') Train as Benign
  div
    div#ProtocolPiChart(style='display: inline-block;float: left; margin: 10px;')
    div#tcpPiChart(style='display: inline-block; margin: 20px')
  input#enableGridLines(type='checkbox', onclick='toggleGridLines()')
  span Enable Graph Point Lines
  br
  input#enableAutoScale(type='checkbox', onclick='toggleAutoscale()')
  span Enable Auto Scaling
  br
  
  div(style='display: inline-block; margin: 8px; float: left')
    h3 Classification
    canvas(id = 'classificationChart', width='200px', height='200px', style='border: 1px solid black')
    p(id = 'classificationChartP')     
  - for (var i = 0; i < 14; i++) {
    div(style='display: inline-block; margin: 8px')
      h3 #{String(featureNames).split(',')[i]}
      canvas(id = 'chart#{i}', width='200px', height='200px', style='border: 1px solid black')
      p(id = 'p#{i}')     
  -}

block headerAdditions
  script(type='text/javascript', src='scripts/NovaPiChart.js')
  script
    var tcpChart;
    var protocolChart;
    var lastSuspectObject = null;
    var initialized = true;
    var data = new Array();
    var classificationData = new Array();

    var gridLinesEnabled = false;
    var autoscale = false;

    function redrawGraphs()
    {
        for(var i = 0; i < 14; i++)
        {
            drawGraph('chart' + i, 'p' + i, data, i);
        }
    
        drawGraph('classificationChart', 'classificationChartP', classificationData, 0); 
    }

    function toggleGridLines()
    {
        gridLinesEnabled = $('#enableGridLines').is(':checked');
        redrawGraphs();
    }

    function toggleAutoscale()
    {
        autoscale = $('#enableAutoScale').is(':checked');
        redrawGraphs();
    }

    function markClassificationAs(hostility)
    {
        'use strict';
        var hostilityString;
        if(hostility == '1')
        {
            hostilityString = 'hostile';
        }
        else
        {    
            hostilityString = 'benign';
        }

        if(!confirm("This will train the classifiaction engine to match all suspects looking like this one's current state as " + hostilityString + ". Are you sure you want to do this?"))
        {
            return;
        }
        if(lastSuspectObject == null)
        {
            alert('No data recieved for suspect yet');
            return;
        }

        var features = String(lastSuspectObject.GetFeatures).split(',').join(' ');
 
        try
        {
           now.addTrainingPoint(lastSuspectObject.GetIpString, lastSuspectObject.GetInterface, features, hostility, addedCb);
        }
        catch(err)
        {
            console.log('Error was: ' + err);
            alert('Unable to contact server. Try refreshing the page');
        }
    }

    function addedCb(err)
    {
        if(err)
        {
            alert('There was and error adding the new training point: ' + err);
        }
        else
        {
            alert('Added suspect point to training data');
        }
    }
    
    function reverseDNScb(err, domains)
    {
        var prefix = '';
        var suffix = '';
        if(err != null)
        {
            var errorString;
            if(err.code == 'ENOTFOUND')
            {
                errorString = 'No domain name found';
            }
            else
            {
                errorString = 'Unable to get domain name because of error: ' + err.code;
            }
            $('#domain').html(prefix + errorString + suffix);
        }
        else
        {
            $('#domain').html(prefix + domains + suffix);
        }
    }

    function OnNewSuspect(suspect)
    {
        // We throw the first suspect in the graphs twice so it'll have a line instead of nothing
        if(initialized)
        {
            initialized = false;
            OnNewSuspect(suspect);
        }
        
        if(suspect.GetIpString == '#{suspectIp}' && suspect.GetInterface == '#{suspectInterface}')
        {
            lastSuspectObject = suspect;
            data.push(suspect.GetFeatures);

            var classificationArrayWrapper = new Array();
            classificationArrayWrapper.push(suspect.GetClassification);
            classificationData.push(classificationArrayWrapper);

            var maxNumberOfPoints = 100;
            if(data.length > maxNumberOfPoints)
            {
                data.shift();
            }

            if(classificationData.length > maxNumberOfPoints)
            {
                classificationData.shift();
            }

            redrawGraphs();

            arr = new Array();
            arr.push({name: 'SYN Packets', value: suspect.GetSynCount});
            arr.push({name: 'RST Packets', value: suspect.GetRstCount});
            arr.push({name: 'ACK Packets', value: suspect.GetAckCount});
            arr.push({name: 'FIN Packets', value: suspect.GetFinCount});
            arr.push({name: 'SYN ACK Packets', value: suspect.GetSynAckCount});
            arr = arr.sort(function(a,b) {return b.value - a.value});
            tcpChart.Render(arr);



            arr = new Array();
            arr.push({name: 'TCP Packets', value: suspect.GetTcpPacketCount});
            arr.push({name: 'UDP Packets', value: suspect.GetUdpPacketCount});
            arr.push({name: 'ICMP Packets', value: suspect.GetIcmpPacketCount});
            arr.push({name: 'Other', value: suspect.GetOtherPacketCount});
            arr = arr.sort(function(a,b) {return b.value - a.value});
            protocolChart.Render(arr);


        }

    };

    function drawGraph(canvas, pID, data, index)
    {
        var m_width = 200;
        var m_height = 200;
        var border = 15;

        var width = m_width;
        var height = m_height - border*2;
        
        var c = $('#' + canvas)[0];
        var p = $('#' + pID)[0];
        var ctx = c.getContext('2d');
        ctx.clearRect (0, 0,m_width ,m_height);
       
        ctx.fillSTyle='#0000FF';

        var minY;
        var maxY;
        if(autoscale)
        {
            minY = data[0][index];
            maxY = data[0][index];
        } else {
            // Hard coded fixed scale charts between 0 and 1
            if(canvas == 'classificationChart'
            || canvas == 'chart0'
            || canvas == 'chart1'
            || canvas == 'chart0'
            || canvas == 'chart9'
            || canvas == 'chart10'
            || canvas == 'chart11'
            || canvas == 'chart12'
            || canvas == 'chart13')
            {
                minY = 0;
                maxY = 1;
            } else {
                minY = data[0][index];
                maxY = data[0][index];
            }
                
        }
        
        if(data.length == 1)
        {
            p.innerHTML = '<br> Current: ' + data[0][index].toFixed(12);
            return;
        }


        var points = new Array();
        for (var i = 0; i < data.length; i++)
        {
            if(data[i][index] > maxY)
            {
                maxY = data[i][index];
            }

            if(data[i][index] < minY)
            {
                minY = data[i][index];
            }
        }

         
        for (var i = 0; i < data.length; i++)
        {
            var point = new Object();
            point.x = (width/(data.length - 1))*i;

            if(maxY == minY)
            {
                point.y = height/2;
            } else {
                point.y = border + height - ((1.0*data[i][index] - minY)/(maxY-minY) * height);
            }
            points.push(point);
        }
       
        // Draw grid lines
        if(gridLinesEnabled)
        {
            ctx.strokeStyle='#A1A1A1';
            ctx.beginPath();
            ctx.moveTo(0, border);
            ctx.lineTo(width, border);
            ctx.stroke();
            ctx.beginPath();
            ctx.moveTo(0, height+border);
            ctx.lineTo(width, height+border);
            ctx.stroke();
            for (var i = 0; i < points.length; i++)
            {
                ctx.beginPath();
                ctx.moveTo(points[i].x,border);
                ctx.lineTo(points[i].x,height+border);
                ctx.stroke();
                
                ctx.beginPath();
                ctx.moveTo(0, points[i].y);
                ctx.lineTo(width, points[i].y);
                ctx.stroke();
            }
        }
        
        ctx.fillStyle = 'blue';
        ctx.font = '10px Arial';
        ctx.fillText(minY, 0, m_height); 
        ctx.fillText(maxY, 0, 10);
        

        
        ctx.strokeStyle='#FF0000';
        for (var i = 1; i < points.length; i++)
        {
            ctx.beginPath();
            ctx.moveTo(points[i-1].x, points[i-1].y);
            ctx.lineTo(points[i].x, points[i].y);
            ctx.stroke();
        }

        ctx.fillStyle='#0000FF';
        for (var i = 0; i < points.length; i++)
        {
            ctx.beginPath();
            ctx.arc(points[i].x,points[i].y,2,0,2*Math.PI);
            ctx.fill();
        }
        
        
        var trendString = '';
        var trendStringCutoff = 25;
        for (var i = points.length - 2; i >= 0; i--)
        {
            if(trendString.length > trendStringCutoff)
            {
                break;
            }

            if(points[i].y > points[i+1].y)
            {
                trendString = '+' + trendString;
            } else if(points[i].y < points[i+1].y)
            {
                trendString = '-' + trendString;
            } else {
                trendString = '=' + trendString;
            }
        }

        p.innerHTML = trendString;
        p.innerHTML += '<br> Current: ' + data[data.length-1][index].toFixed(12);
        p.innerHTML += '<br> Delta: ' + (data[data.length-1][index]- data[data.length-2][index]).toFixed(12);
    }



    function init(ready){
        tcpChart = new NovaPiChart('tcpPiChart', 'TCP Flags', 200);
        protocolChart = new NovaPiChart('ProtocolPiChart', 'Protocols Used', 200);
        
        now.ready(function()
        {
            now.OnNewSuspect = OnNewSuspect;
            now.sendSuspect('#{suspectIp}', '#{suspectInterface}', OnNewSuspect)
            now.reverseDNS('#{suspectIp}', reverseDNScb);
        });
    };


