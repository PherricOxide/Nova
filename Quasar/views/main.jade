//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block content
  div#setup(onclick='handleOnclick(event)')
    div#nova_suspects_header(style="width:600px; display: none")
      br
      
      button(onclick="toggleFilterBlock()", title='Only show rows that match a certain specific criteria')
        img.buttonIcon(src="images/edit.png")
        span.buttonSpan Filtering Options
      button(type="button", title="Clear all data the packet classifier has gathered", onclick='if(confirm("Are you sure you want to clear all gathered suspect data? This is irreversible.")){ClearAllSuspects(); suspectGrid.Clear()}else{return;}')
        img.buttonIcon(src="images/erase.png")
        span.buttonSpan Clear All Suspects

      button(onclick="window.location='/novaState.csv'")
        img.buttonIcon(src="images/save.png")
        span.buttonSpan Save as CSV file
  
      br
    div#nova_suspects(style="display: none;")      
      input#liveGridUpdate(type="checkbox", checked, onchange="LiveUpdateChanged()")
      label Live Grid Update
      br
      
      input#showAdvanced(type="checkbox", onchange="showAdvancedChanged()")
      label Show Advanced Suspect Statistics
      br
      
      input#showUnclassified(type="checkbox", onchange="showUnclassifiedChanged()")
      label Show Unclassified Suspects
      br
      br
      div#tablePages(style="width: 100%;")
      p Right click suspects for more options
      div.novaGrid
        div#suspectTable
    div(data-dojo-type="dijit.layout.ContentPane", title="Suspects", id="nova_suspects_error_view", style="display: block; width: 600px; margin: 0 auto; text-align: center")
      h4 The Packet Classifier is not currently connected or running. If the status shows as offline, try starting it.
      
  div#lightbox(class="white_content", style="display:none;")
    div#advancedFiltering
      br
      p Filter by IP (supports standard regular expressions. Example: "192\.168\.10\..*|192\.168\.3\..*")
      input#ipFilter(type="text", name="ipFilter", value="")
      br
      p Use 'x' in expressions to denote the specified feature value. Example: "x > 0 && x != 17"
      -var count = 0;
      each feature in featureNames
        label #{feature}
        br
        input(type="text", id="advancedFilter#{count}")
        br
      - count++;
      br
      button(onclick='applyAdvancedFilter()')
        img.buttonIcon(src="images/benign.png")
        span.buttonSpan Apply Advanced Filters
      br
      button(onclick='disableAdvancedFilter()')
        img.buttonIcon(src="images/alert.png")
        span.buttonSpan Disable Advanced Filters
    br
    br
    button#closeLB(onclick='closeLightbox()')
     img.buttonIcon(src="images/cancel.png")
     span.buttonSpan Cancel
   
block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  script
    // Performance boost accessing local var over document lookup
    var suspectGrid;
    var liveUpdate = true;

    var advancedFilters = new Object();
    var advancedFilterEnabled = false;
    var advancedIpFilter = null;

    require(["dijit/form/TextBox"]);

    var rmLb = false;
    
    function handleOnclick(e)
    {
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      var loc = document.location.href;
      if(loc.indexOf('/suspects') != -1)
      {
        removeContextMenu(); 
      }
      if(rmLb && checkIfLightboxChild(source) == 'false' && (loc.indexOf('/autoConfig') == -1))
      {
        closeLightbox();
      }
      else if($('#lightbox').css('display') == 'block')
      {
        rmLb = true;
      }
    }
    
    function checkIfLightboxChild(source)
    {
      if(source.id != 'lightbox' && source.tagName != 'HTML')
      {
        return checkIfLightboxChild(source.parentNode);
      }        
      else if(source.id == 'lightbox')
      {
        return 'true';
      }
      else if(source.tagName == 'HTML')
      {
        return 'false';
      }
    }

    function isNovadUpChanged(isNovadUp)
    {
        $("#nova_suspects_header").css('display', (isNovadUp ? "block" : "none"));
        $("#nova_suspects").css('display', (isNovadUp ? "block" : "none"));
        $("#nova_suspects_error_view").css('display', (isNovadUp ? "none" : "block"));
    }

    var LiveUpdateChanged = function()
    {
      liveUpdate = $("#liveGridUpdate").is(':checked');
      console.log("Toggled live update to " + liveUpdate);
    }

    var toggleFilterBlock = function()
    {
      $('#setup').css('opacity', '0.5');
      $('#lightbox').css('display', 'block');
      disableBackground($('#setup')[0]);
    }

    var closeLightbox = function()
    {
      $('#lightbox').css('display', 'none');
      $('#setup').css('opacity', '1');
      enableBackground($('#setup')[0]);
      rmLb = false;
    }

    function disableBackground(source)
    {
      var disableUs = source.childNodes;
      for(var i in disableUs)
      {
        if(typeof disableUs[i] == 'object' && disableUs[i].tagName != undefined)
        {
          disableUs[i].disabled = true;
          if(disableUs[i].hasChildNodes())
          {
            disableBackground(disableUs[i]);
          }
        }
      }
    }

    function enableBackground(source)
    {
      var enableUs = source.childNodes;
      for(var i in enableUs)
      {
        if(typeof enableUs[i] == 'object' && enableUs[i].tagName != undefined)
        {
          enableUs[i].disabled = false;
          if(enableUs[i].hasChildNodes())
          {
            enableBackground(enableUs[i]);
          }
        }
      }
    }

    var ClearAllSuspects = function()
    {
      try
      {
        now.ClearAllSuspects();
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      } 
    }
    
    function showUnclassifiedChanged()
    {
        resendSuspects();
    }

    var AllSuspectsCleared = function()
    {
        suspectGrid.Clear();
    }
    
    var SuspectCleared = function(suspect)
    {
        console.log("Cleared suspect ");
        console.log(suspect);
        suspectGrid.DeleteRow(buildLink(suspect.ip, suspect.interface));
        suspectGrid.Render();
        return;
    }
      
    function pad(num)
    {
        return ("0" + num.toString()).slice(-2);
    }
    
    function ClearSuspect(ip, interface, idString)
    {
      console.log('in ClearSuspect with ' + ip + ' ' + interface);
      now.ClearSuspect(ip, interface);
      suspectGrid.DeleteRow(buildLink(ip, interface));
    }

    function MonitorSuspect(ip, interface, idString)
    {
        var path = "/monitor?ip=" + ip + "&interface=" + interface;
        window.open(path);
    }
    
    function SuspectDetails(ip, interface, idString)
    {
        var path = "/GetSuspectDetails?ip=" + ip + "&interface=" + interface;
        window.open(path);
    }

    function buildLink(ip, interface)
    {
      var res = "<div style='display: none;'>" + interface + "</div><div oncontextmenu='replacementContextMenu(event)'>" + ip + "</div>";
      return res;
    }

    var OnNewSuspect = function(suspect){
       if(!$('#showUnclassified').is(':checked'))
       {
         if(suspect.GetClassification < 0) {return;}
       }

      var d = new Date(suspect.GetLastPacketTime*1000);
      var dString = pad(d.getMonth() + 1) + "/" + pad(d.getDate()) + " " + pad(d.getHours()) + ":" + pad(d.getMinutes()) + ":" + pad(d.getSeconds());
      suspect.LastPacketString = dString;
      
      var row = new Array();
        
      var ip = suspect.GetIpString;
    
      var suspectLink = buildLink(ip, suspect.GetInterface);

      var imgSrc;
      if(suspect.GetIsHostile)
      {
        imgSrc = "images/alert.png";
      } 
      else
      {
        imgSrc = "images/benign.png";
      }

      row.push("<img src='" + imgSrc + "' class='buttonIcon'/>");
      row.push(String(suspect.interfaceAlias));
      row.push(String(suspectLink));
      row.push(suspect.GetClassification);
      row.push(String(suspect.LastPacketString));

      for(var i in suspect.GetFeatures)
      {
        suspect[i] = suspect.GetFeatures[i];
        row.push(Number(suspect.GetFeatures[i])); 
      }
       
      if(advancedFilterEnabled)
      {
        for(var i in advancedFilters)
        {
          var x = String(suspect[i]);
          var expr = String(advancedFilters[i]);
          if(!eval(expr))
          {
            return;
          }
        }

        if(advancedIpFilter != null)
        {
          if(!advancedIpFilter.test(suspect.GetIdString))
          {
            return;
          }
        }
      }
      suspectGrid.PushEntry(row);
    };

    var applyAdvancedFilter = function(){
        var patt = new RegExp("^[1234567890x\. ()<>=!&|]+$");
        var featureNames = String("#{featureNames}").split(",");
        for(var i = 0; i < featureNames.length; i++)
        {
          var filter = "";
          var id = "advancedFilter" + String(i);
          var element = $('#' + id)[0];
          if(element != null)
          {
            filter = element.value;
          }

          if(filter == "")
          {
            continue;
          }

          if(!patt.test(filter))
          {
            alert("Invalid filter: " + filter);
            return;
          }
          else
          {
            try
            {
              var x = 2.5;
              eval(filter);
              advancedFilters[i] = filter;
            } 
            catch(err)
            {
              alert("Invalid filter: " + filter);
              return;
            }
          }
        }

        var filter = $('#ipFilter').val();
        if(filter != "")
        {
          try
          {
            advancedIpFilter = new RegExp(filter);
          }
          catch(err)
          {
            alert("Invalid filter: " + filter);
            return;
          }
        }

        advancedFilterEnabled = true;
        closeLightbox();
        resendSuspects();
    };

    function resendSuspects()
    {
      suspectGrid.Clear();
      try
      {
        now.sendAllSuspects(OnNewSuspect);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }   
    }

    var disableAdvancedFilter = function()
    {
        $('#lightbox').css('display', 'none');
        
        advancedFilterEnabled = false;
        var advancedFilters = new Object();
        
        resendSuspects();
    }

    function showAdvancedChanged()
    {
        if($('#showAdvanced').is(':checked'))
        {
            for(var i = 5; i < suspectGrid.m_columns.length; i++)
            {
                suspectGrid.m_columns[i].isDisabled = false;
            }
        } 
        else 
        {
            for(var i = 5; i < suspectGrid.m_columns.length; i++)
            {
                suspectGrid.m_columns[i].isDisabled = true;
            }
            
        }

        suspectGrid.GenerateTableHeader();
        suspectGrid.Render();
    }
              
    function featureFormatter(d)
    {
        var num = new Number(d);
        return (num.toFixed(2));
    }

    function classificationFormatter(d)
    {
        if(d === null)
        {
            return "NULL";
        }
        else if(d == -1)
        {
            return "Invalid";
        }
        else if(d == -2)
        {
            return "Not Enough Data";
        }
        else if(d >= 0 && d <= 1)
        {
            var num = 100 * d;
            return '<div class="classification_entry" oncontextmenu="replacementContextMenu(event);"><div style="width: ' + num.toFixed(0) + '%" class="progressBar">&nbsp;</div><div class="progressText">' + num.toFixed(2) + '</div></div>';
        }
        else
        {
            return "Error (" + d + ")";
        }
    }

    function Init()
    {
        var gridStructure = [];
        gridStructure.push({name: "Hostility", isDisabled: false});
        gridStructure.push({name: "Interface", isDisabled: false});
        gridStructure.push({name: "Address", isDisabled: false});
        gridStructure.push({name: "Classification", isDisabled: false, formatter: classificationFormatter});
        gridStructure.push({name: "Last Seen", isDisabled: false});
   
        var featureNames = String("#{featureNames}").split(",");
        for(var i = 0; i < featureNames.length; i++)
        {
            gridStructure.push({name:featureNames[i], isDisabled: true, formatter: featureFormatter});
        }
   
        suspectGrid = new NovaGrid(gridStructure, 2, $('#suspectTable')[0], 'suspectGrid', false);
        
        suspectGrid.SetRightClickEventListener("replacementContextMenu(event);");
    
        // Sort by classification by default
        suspectGrid.SetSortByKey(3);
        suspectGrid.SetRowsPerPage(20);
        suspectGrid.SetPageNumberDiv($('#tablePages').get(0));

        suspectGrid.SetRenderCallback(function() {
            $(".newRow").css({backgroundColor:"#E4F2FF"}).animate({backgroundColor:"transparent"}, 2500, null, 
                function() { this.style.backgroundColor='transparent'; });
        });

        resendSuspects();

        setInterval(function(){
            if(!liveUpdate || lastNovadStatus == false) {return;}
           
            var start = new Date().getTime();
            suspectGrid.Render(); 
            console.log("Time to render grid of size " + suspectGrid.Size() + ": " + (new Date().getTime() - start) + "ms");
        }, 3000);
    }

    function replacementContextMenu(e)
    {
      if($('#contextMenu')[0] != undefined)
      {
        $('#contextMenu').remove();
      }
      
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      
      if(source.tagName == 'DIV')
      {
        if(source.getAttribute('class') != null && source.getAttribute('class').indexOf('progress') != -1)
        {
          source = source.parentNode;
        }
        else if(source.parentNode.tagName == 'TD')
        {
          
        } 
      }
      else if(source.tagName != 'TD' && source.parentNode.tagName != 'TD')
      {
        evt.returnValue = false || evt.preventDefault();
        return false;
      }
      
      if(source.tagName == 'TD')
      {
        source = source.parentNode;
      }
      else if(source.parentNode.tagName == 'TD')
      {
        source = source.parentNode;
        source = source.parentNode;
      }
      
      var ip = source.childNodes[2].childNodes[1].innerHTML;
      var iface = source.childNodes[2].childNodes[0].innerHTML;
      
      function trim(string)
      {
        var ret = string;
        if(string[0] == ' ')
        {
          ret = ret.substr(1);
        }
        if(string[string.length] == ' ')
        {
          ret = ret.substr(0, string.length - 1);
        }
        return ret;
      }
      
      ip = trim(ip);
      iface = trim(iface);
      
      function getFeatureSetOf(ip)
      {
        var iter = suspectGrid.GetElements();
        var ret = '';
        var check = '';
        
        for(var i in iter)
        {
          check = i;
          check = check.substring(0, i.lastIndexOf("<"));
          check = check.substring(check.lastIndexOf(">") + 1);
          if(check == ip)
          {
            ret = iter[i][5];
            for(var j = 6; j < 19; j++)
            {
              ret += ' ' + iter[i][j];
            }
          }
        }
        return ret;
      }

      var features = getFeatureSetOf(ip);
      
      var clickX = 0;
      var clickY = 0;
      if((evt.clientX || evt.clientY) &&
        document.body &&
        document.body.scrollLeft != null) 
      {
        clickX = evt.clientX + document.body.scrollLeft;
        clickY = evt.clientY + document.body.scrollTop;
      }
      
      if((evt.clientX || evt.clientY) &&
         document.compatMode == 'CSS1Compat' && 
         document.documentElement && 
         document.documentElement.scrollLeft != null) 
      {
        clickX = evt.clientX + document.documentElement.scrollLeft;
        clickY = evt.clientY + document.documentElement.scrollTop;
      }
      
      if(evt.pageX || evt.pageY) 
      {
        clickX = evt.pageX;
        clickY = evt.pageY;
      }
      
      var contextMenuDiv = document.createElement('div');
      contextMenuDiv.setAttribute('style', 'border-radius: 5px; box-shadow: 0 0 5px #AAA; width: 250px; z-index: 1002; position: absolute; top: ' + clickY + 'px; left:' + clickX + 'px; opacity: 1;');
      contextMenuDiv.id = 'contextMenu';
      
      var monitor = document.createElement('div');
      monitor.setAttribute('class', 'topcontainer');
      monitor.innerHTML = '<img class="buttonIcon" src="images/details.png"/> Live Monitor ' + ip;
      monitor.setAttribute('onclick', 'MonitorSuspect("' + ip + '", "' + iface + '")');
      monitor.setAttribute('oncontextmenu', 'MonitorSuspect("' + ip + '", "' + iface + '"); removeContextMenu(); return false;');
      contextMenuDiv.appendChild(monitor);
      
      var details = document.createElement('div');
      details.setAttribute('class', 'topcontainer');
      details.innerHTML = '<img class="buttonIcon" src="images/details.png"/> Detailed Report ' + ip;
      details.setAttribute('onclick', 'SuspectDetails("' + ip + '", "' + iface + '")');
      details.setAttribute('oncontextmenu', 'SuspectDetails("' + ip + '", "' + iface + '"); removeContextMenu(); return false;');
      contextMenuDiv.appendChild(details);
     
      var markAsHostile = document.createElement('div');
      markAsHostile.setAttribute('class', 'middlecontainer');
      markAsHostile.innerHTML = '<img class="buttonIcon" src="images/alert.png"/> Train ' + ip + ' as Hostile';
      markAsHostile.setAttribute('onclick', 'if(confirm("This will train the classification engine to match all suspects looking like this one as hostile. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "1" , addedCb)}');
      markAsHostile.setAttribute('oncontextmenu', 'if(confirm("This will train the classification engine to match all suspects looking like this one as hostile. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "1" , addedCb)}; removeContextMenu(); return false;');
      contextMenuDiv.appendChild(markAsHostile);
      
      var markAsBenign = document.createElement('div');
      markAsBenign.setAttribute('class', 'middlecontainer');
      markAsBenign.innerHTML = '<img class="buttonIcon" src="images/benign.png"/> Train ' + ip + ' as Benign';
      markAsBenign.setAttribute('onclick', 'if(confirm("This will train the classification engine to match all suspects looking like this one as benign. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "0" , addedCb)}');
      markAsBenign.setAttribute('oncontextmenu', 'if(confirm("This will train the classification engine to match all suspects looking like this one as benign. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "0" , addedCb)}; removeContextMenu(); return false;');
      contextMenuDiv.appendChild(markAsBenign);

      var clearSuspect = document.createElement('div');
      clearSuspect.setAttribute('class', 'bottomcontainer');
      clearSuspect.innerHTML = '<img src="images/erase.png" class="buttonIcon"/>Clear Suspect ' + ip;
      clearSuspect.setAttribute('onclick', 'ClearSuspect("' + ip + '", "' + iface + '")');
      clearSuspect.setAttribute('oncontextmenu', 'ClearSuspect("' + ip + '", "' + iface + '"); removeContextMenu(); return false;');
      contextMenuDiv.appendChild(clearSuspect);
      
      document.getElementById('hook').appendChild(contextMenuDiv);
      evt.returnValue = false || evt.preventDefault();
      return false;
    }

    function addedCb(err) 
    {
      if(err) 
      {
          alert("There was and error adding the new training point: " + err);
      } 
      else 
      {
          alert("Added suspect point to training data");
      }
    }

    function init()
    {
        var initialized = false;
        now.ready(function()
        {
            if (!initialized)
            {
                initialized = true;
                now.updateHaystackStatus = updateHaystackStatus;
                now.updateNovadStatus = updateNovadStatus;
                now.IsHaystackUp(updateHaystackStatus);
                now.IsNovadUp(updateNovadStatus);

                now.AllSuspectsCleared = AllSuspectsCleared;
                now.SuspectCleared = SuspectCleared;
                now.OnNewSuspect = OnNewSuspect;

                Init();
            }
        });
    };

