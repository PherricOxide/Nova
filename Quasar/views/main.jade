extends layout

block topPannelAdditions

block content
  div#setup
    div#nova_suspects_header(style="width:600px; display: none")
      br
      
      button(onclick="toggleFilterBlock()") Filtering Options
      button(type="button", style="width:160px;", onclick='if(confirm("Are you sure you want to clear all gathered suspect data? This is irreversible.")){ClearAllSuspects(); suspectGrid.Clear()}else{return;}') Clear All Suspects
      button(onclick="window.location='/novaState.csv'") Suspects as CSV file
  
      br
    div#nova_suspects(style="display: none;")      
      input#liveGridUpdate(type="checkbox", checked, onchange="LiveUpdateChanged()")
      label Live Grid Update
      br
      
      input#showAdvanced(type="checkbox", onchange="showAdvancedChanged()")
      label Show Advanced Suspect Statistics
      br
      
      input#showUnclassified(type="checkbox", onchange="showUnclassifiedChanged()")
      label Show Unclassified Suspects
      br
      br
      div#tablePages(style="width: 100%;")
      br
      div.novaGrid
        table.novaGrid#suspectTable
    div(data-dojo-type="dijit.layout.ContentPane", title="Suspects", id="nova_suspects_error_view", style="display: block; width: 600px; margin: 0 auto; text-align: center")
      h4 The Packet Classifier is not currently connected or running. If the status shows as offline, try starting it.
      
  div#lightbox(class="white_content", style="display:none;")
    div#advancedFiltering
      br
      p Filter by IP (supports standard regular expressions. Example: "192\.168\.10\..*|192\.168\.3\..*")
      input#ipFilter(type="text", name="ipFilter", value="")
      br
      p Use 'x' in expressions to denote the specified feature value. Example: "x > 0 && x != 17"
      -var count = 0;
      each feature in featureNames
        if enabledFeatures.charAt(count) == '1'
          label #{feature}
          br
          input(type="text", id="advancedFilter#{count}")
          br
        - count++;
      br
      button(onclick='applyAdvancedFilter()') Apply Advanced Filters
      button(onclick='disableAdvancedFilter()') Disable Advanced Filters
    button#closeLB(onclick='closeLightbox()') Close
   
block headerAdditions
  link(rel="stylesheet", type="text/css", href="novagrid.css", media="screen")
  script(type="text/javascript", src="scripts/NovaGrid.js")
  script
    // Performance boost accessing local var over document lookup
    var theDoc = document;

    var suspectGrid;
    var liveUpdate = true;

    var advancedFilters = new Object();
    var advancedFilterEnabled = false;
    var advancedIpFilter = null;

    require(["dijit/form/TextBox"]);

    function isNovadUpChanged(isNovadUp) {
        document.getElementById("nova_suspects_header").style.display = isNovadUp ? "block" : "none";
        document.getElementById("nova_suspects").style.display = isNovadUp ? "block" : "none";
        document.getElementById("nova_suspects_error_view").style.display = isNovadUp ? "none" : "block";
    }

    var LiveUpdateChanged = function() {
      liveUpdate = document.getElementById("liveGridUpdate").checked;
      console.log("Toggled live update to " + liveUpdate);
    }

    var toggleFilterBlock = function()
    {
      document.getElementById('setup').style.opacity = '0.5';
      document.getElementById('lightbox').style.display = 'block';
      disableBackground(document.getElementById('setup'));
    }

    var closeLightbox = function()
    {
      document.getElementById('lightbox').style.display = 'none';
      document.getElementById('setup').style.opacity = '1';
      enableBackground(document.getElementById('setup'));
    }

    function disableBackground(source)
    {
      var disableUs = source.childNodes;
      for(var i in disableUs)
      {
        if(typeof disableUs[i] == 'object' && disableUs[i].tagName != undefined)
        {
          disableUs[i].disabled = true;
          if(disableUs[i].hasChildNodes())
          {
            disableBackground(disableUs[i]);
          }
        }
      }
    }

    function enableBackground(source)
    {
      var enableUs = source.childNodes;
      for(var i in enableUs)
      {
        if(typeof enableUs[i] == 'object' && enableUs[i].tagName != undefined)
        {
          enableUs[i].disabled = false;
          if(enableUs[i].hasChildNodes())
          {
            enableBackground(enableUs[i]);
          }
        }
      }
    }

    var ClearAllSuspects = function() {
      try 
      {
        now.ClearAllSuspects();
      } 
      catch(err) 
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      } 
    }
    
    function showUnclassifiedChanged() {
        resendSuspects();
    }

    var AllSuspectsCleared = function() {
      suspectGrid.Clear();
    }
    
    var SuspectCleared = function(suspect) {
        console.log("Cleared suspect ");
        console.log(suspect);
        suspectGrid.DeleteRow(buildLink(suspect.ip, suspect.interface));
        suspectGrid.Render();
        return;
    }
      
    function pad(num) {
        return ("0" + num.toString()).slice(-2);
    }
    
    function ClearSuspect(ip, interface, idString) {
      console.log('in ClearSuspect with ' + ip + ' ' + interface);
      now.ClearSuspect(ip, interface);
      suspectGrid.DeleteRow(buildLink(ip, interface));
    }

    function MonitorSuspect(ip, interface, idString) {
        window.open("/monitor?ip=" + ip + "&interface=" + interface, 'Monitoring ' + ip);
    }

    function buildLink(ip, interface) {
      var res = "<a  href='javascript:void(0)' onclick='getSuspectDetails(";
      res += '"' + ip + '","' + interface + '")' + "'" + '> ' + ip + '</a>';
      return res;
    }

    function getSuspectDetails(ip, interface) {
        window.open('/GetSuspectDetails?ip=' + ip + '&interface=' + interface, 'Details for suspect ' + ip);
    }
    
    var OnNewSuspect = function(suspect){
       if(!document.getElementById("showUnclassified").checked)
       {
         if(suspect.GetClassification < 0) {return;}
       }

       //if(!liveUpdate) {return;}
      
      var d = new Date(suspect.GetLastPacketTime*1000);
      var dString = pad(d.getMonth() + 1) + "/" + pad(d.getDate()) + " " + pad(d.getHours()) + ":" + pad(d.getMinutes()) + ":" + pad(d.getSeconds());
      suspect.LastPacketString = dString;
      
      var row = new Array();
        
      var ip = suspect.GetIpString;
    
      var suspectLink = buildLink(ip, suspect.GetInterface);
      row.push(String(suspect.interfaceAlias));
      row.push(String(suspectLink));
      row.push(suspect.GetClassification);
      row.push(String(suspect.LastPacketString));
      row.push(String(suspect.GetIsHostile));
      var enabledFeatures = "#{enabledFeatures}";
      for(var i in suspect.GetFeatures)
      {  
        suspect[i] = suspect.GetFeatures[i];
        if(enabledFeatures.charAt(i) == "1") row.push(Number(suspect.GetFeatures[i])); 
      }
       
      if(advancedFilterEnabled)
      {
        for(var i in advancedFilters)
        {
          var x = String(suspect[i]);
          var expr = String(advancedFilters[i]);
          if(!eval(expr))
          {
            return;
          }
        }

        if(advancedIpFilter != null)
        {
          if(!advancedIpFilter.test(suspect.GetIdString))
          {
            return;
          }
        }
      }
      suspectGrid.PushEntry(row);
    };

    var applyAdvancedFilter = function() {
        var patt = new RegExp("^[1234567890x\. ()<>=!&|]+$");
        var featureNames = String("#{featureNames}").split(",");
        for (var i = 0; i < featureNames.length; i++) {
            var filter = "";
            var id = "advancedFilter" + String(i);
            var element = theDoc.getElementById(id);
            if (element != null) {
                filter = element.value;
            }

            if (filter == "") {
                continue;
            }

            if (!patt.test(filter)) {
                alert("Invalid filter: " + filter);
                return;
            } else {
                // Can we evaluate the expression?
                try {
                    var x = 2.5;
                    eval(filter);
                    advancedFilters[i] = filter;
                } catch (err) {
                    alert("Invalid filter: " + filter);
                    return;
                }
            }
        }

        var filter = theDoc.getElementById("ipFilter").value;
        if (filter != "") {
            try {
                advancedIpFilter = new RegExp(filter);
            } catch (err) {
                alert("Invalid filter: " + filter);
                return;
            }
        }

        advancedFilterEnabled = true;
        closeLightbox();
        resendSuspects();
    };

    function resendSuspects() {
        suspectGrid.Clear();
        try {
            now.sendAllSuspects(OnNewSuspect);
        } catch(err) {
            alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
            console.log("err was: " + err);
        }   
    }

    var disableAdvancedFilter = function() {
        theDoc.getElementById('advancedFiltering').style.display='none';
        
        advancedFilterEnabled = false;
        var advancedFilters = new Object();
        
        resendSuspects();
    }

    function showAdvancedChanged() {
        if (document.getElementById("showAdvanced").checked) {
            for (var i = 7; i < suspectGrid.m_columns.length - 1; i++) {
                suspectGrid.m_columns[i].isDisabled = false;
            }
        } else {
            for (var i = 7; i < suspectGrid.m_columns.length - 1; i++) {
                suspectGrid.m_columns[i].isDisabled = true;
            }
            
        }

        suspectGrid.GenerateTableHeader();
        suspectGrid.Render();
    }
              
    function featureFormatter(d) {
        var num = new Number(d);
        return (num.toFixed(2));
    }

    function classificationFormatter(d) {
        if (d === null) {
            return "NULL";
        } else if (d == -1) {
            return "Invalid";
        } else if (d == -2) {
            return "Not Enough Data";
        } else if (d >= 0 && d <= 1) {
            var num = 100 * d;
            // Minor performance boost, don not bother with coloring those < than 5% hostile, barely shows anyway
            if (num > 5) {
                return '<div style="background: rgba(255, 0, 0, ' + d.toFixed(2) + ');">' + num.toFixed(2) + "%</div>";
            } else {
                return num.toFixed(2) + "%";
            }
        } else {
             return "Error (" + d + ")";
        }
    }

    function onGridRendered() {
       var tablePages = document.getElementById("tablePages");
       tablePages.innerHTML = "";
       suspectGrid.populateTablePages(tablePages);   
    }
    
    function Init() {
        theDoc = document;
        var enabledFeatures = "#{enabledFeatures}";
        var gridStructure = [];
        gridStructure.push({name: "Interface", isDisabled: false});
        gridStructure.push({name: "Address", isDisabled: false});
        gridStructure.push({name: "Classification", isDisabled: false, formatter: classificationFormatter});
        gridStructure.push({name: "Last Seen", isDisabled: false});
        gridStructure.push({name: "Hostile", isDisabled: false});
   
        var featureNames = String("#{featureNames}").split(",");
        for (var i = 0; i < featureNames.length; i++) {
            if (enabledFeatures.charAt(i) == "1") gridStructure.push({name:featureNames[i], isDisabled: true, formatter: featureFormatter});
        }
   
        suspectGrid = new NovaGrid(gridStructure, 1, theDoc.getElementById('suspectTable'), 'suspectGrid', false);
        
        suspectGrid.SetRightClickEventListener("replacementContextMenu(event);");
    
        // Sort by classification by default
        suspectGrid.SetSortByKey(2);
        suspectGrid.SetRowsPerPage(20);
        suspectGrid.SetRenderCallback(onGridRendered);

        resendSuspects();

        setInterval(function(){
            if(!liveUpdate || lastNovadStatus == false) {return;}
           
            var start = new Date().getTime();
            suspectGrid.Render(); 
            console.log("Time to render grid of size " + suspectGrid.Size() + ": " + (new Date().getTime() - start) + "ms");
        },3000);
    }

    function replacementContextMenu(e)
    {
      if(document.getElementById('contextMenu') != undefined)
      {
        document.getElementById('hook').removeChild(document.getElementById('contextMenu'));
      }
      
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      
      if(source.tagName != 'TD')
      {
        evt.returnValue = false || evt.preventDefault();
        return false;
      }
      
      source = source.parentNode;
      
      var ip = source.childNodes[1].childNodes[0].innerHTML;
      var iface = source.childNodes[0].innerHTML;
      
      function trim(string)
      {
        var ret = string;
        if(string[0] == ' ')
        {
          ret = ret.substr(1);
        }
        if(string[string.length] == ' ')
        {
          ret = ret.substr(0, string.length - 1);
        }
        return ret;
      }
      
      ip = trim(ip);
      iface = trim(iface);
      
      function getFeatureSetOf(ip)
      {
        var iter = suspectGrid.GetElements();
        var ret = '';
        var check = '';
        
        for(var i in iter)
        {
          var split0 = parseInt(i.toString().indexOf(">")) + 2;
          var split1 = parseInt(i.toString().lastIndexOf("<"));
          check = i.toString().substring(split0, split1);
          
          if(check == ip)
          {
            ret = iter[i][5];
            for(var j = 6; j < 19; j++)
            {
              ret += ' ' + iter[i][j];
            }
            console.log('ret ' + ret);
          }
        }
        return ret;
      }

      var features = getFeatureSetOf(ip);
      
      var clickX = 0;
      var clickY = 0;
      if((evt.clientX || evt.clientY) &&
        document.body &&
        document.body.scrollLeft != null) 
      {
        clickX = evt.clientX + document.body.scrollLeft;
        clickY = evt.clientY + document.body.scrollTop;
      }
      
      if((evt.clientX || evt.clientY) &&
         document.compatMode == 'CSS1Compat' && 
         document.documentElement && 
         document.documentElement.scrollLeft != null) 
      {
        clickX = evt.clientX + document.documentElement.scrollLeft;
        clickY = evt.clientY + document.documentElement.scrollTop;
      }
      
      if(evt.pageX || evt.pageY) 
      {
        clickX = evt.pageX;
        clickY = evt.pageY;
      }
      
      var contextMenuDiv = document.createElement('div');
      contextMenuDiv.setAttribute('style', 'border-radius: 5px; box-shadow: 0 0 5px #AAA; width: 200px; z-index: 1002; position: absolute; top: ' + clickY + 'px; left:' + clickX + 'px; opacity: 1;');
      contextMenuDiv.id = 'contextMenu';
      
      var monitor = document.createElement('div');
      monitor.setAttribute('class', 'topcontainer');
      monitor.innerHTML = 'Monitor ' + ip;
      monitor.setAttribute('onclick', 'MonitorSuspect("' + ip + '", "' + iface + '")');
      monitor.setAttribute('oncontextmenu', 'MonitorSuspect("' + ip + '", "' + iface + '")');
      contextMenuDiv.appendChild(monitor);
      
      var markAsHostile = document.createElement('div');
      markAsHostile.setAttribute('class', 'middlecontainer');
      markAsHostile.innerHTML = 'Mark ' + ip + ' as Hostile';
      markAsHostile.setAttribute('onclick', 'if(confirm("This will train the classification engine to match all suspects looking like this one as hostile. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "1" , addedCb)}');
      markAsHostile.setAttribute('oncontextmenu', 'if(confirm("This will train the classification engine to match all suspects looking like this one as hostile. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "1" , addedCb)}');
      contextMenuDiv.appendChild(markAsHostile);
      
      var markAsBenign = document.createElement('div');
      markAsBenign.setAttribute('class', 'middlecontainer');
      markAsBenign.innerHTML = 'Mark ' + ip + ' as Benign';
      markAsBenign.setAttribute('onclick', 'if(confirm("This will train the classification engine to match all suspects looking like this one as benign. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "0" , addedCb)}');
      markAsBenign.setAttribute('oncontextmenu', 'if(confirm("This will train the classification engine to match all suspects looking like this one as benign. Are you sure you want to do this?")){now.addTrainingPoint("' + ip + '", "' + iface + '", "' + features + '", "0" , addedCb)}');
      contextMenuDiv.appendChild(markAsBenign);

      var clearSuspect = document.createElement('div');
      clearSuspect.setAttribute('class', 'bottomcontainer');
      clearSuspect.innerHTML = 'Clear Suspect ' + ip;
      clearSuspect.setAttribute('onclick', 'ClearSuspect("' + ip + '", "' + iface + '")');
      clearSuspect.setAttribute('oncontextmenu', 'ClearSuspect("' + ip + '", "' + iface + '")');
      contextMenuDiv.appendChild(clearSuspect);
      
      document.getElementById('hook').appendChild(contextMenuDiv);
      evt.returnValue = false || evt.preventDefault();
      return false;
    }

    function addedCb(err) 
    {
      if(err) 
      {
          alert("There was and error adding the new training point: " + err);
      } 
      else 
      {
          alert("Added suspect point to training data");
      }
    }

    function init() {
        now.ready(function() {
            now.updateHaystackStatus = updateHaystackStatus;
            now.updateNovadStatus = updateNovadStatus;
            now.IsHaystackUp(updateHaystackStatus);
            now.IsNovadUp(updateNovadStatus);

            now.AllSuspectsCleared = AllSuspectsCleared;
            now.SuspectCleared = SuspectCleared;
            now.OnNewSuspect = OnNewSuspect;
            

            Init();
            
        });
    };

