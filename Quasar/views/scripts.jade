//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block headerAdditions
  script
    var scriptList = !{JSON.stringify(scripts)};
    var scriptBindings = !{JSON.stringify(bindings)};
    var theDoc = document;

    function closeLightbox()
    {
      enableBackground();
      
      theDoc.getElementById('lightbox').style.display = 'none';
      theDoc.getElementById('setup').style.opacity = '1.0'; 
      while(theDoc.getElementById('appendHook').hasChildNodes())
      {
        theDoc.getElementById('appendHook').removeChild(theDoc.getElementById('appendHook').lastChild); 
      }
      
      rmLb = false;
    }

    var rmLb = false;
    
    function handleOnclick(e)
    {
      var evt = (e ? e : window.event);
      var source = evt.target || evt.srcElement;
      var loc = document.location.href;
      if(loc.indexOf('/suspects') != -1)
      {
        removeContextMenu(); 
      }
      if(rmLb && checkIfLightboxChild(source) == 'false' && (loc.indexOf('/autoConfig') == -1))
      {
        closeLightbox();
      }
      else if(document.getElementById('lightbox').style.display == 'block')
      {
        rmLb = true;
      }
    }
    
    function checkIfLightboxChild(source)
    {
      if(source.id != 'lightbox' && source.tagName != 'HTML')
      {
        return checkIfLightboxChild(source.parentNode);
      }        
      else if(source.id == 'lightbox')
      {
        return 'true';
      }
      else if(source.tagName == 'HTML')
      {
        return 'false';
      }
    }

    function setUpScriptTable()
    {
      var append = theDoc.getElementById('addAnchor');
      for(var i in scriptList)
      {
        var disable = false;
        var tr = theDoc.createElement('tr');
        tr.id = scriptList[i].script;
        var td0 = theDoc.createElement('td');
        var label0 = theDoc.createElement('label');
        label0.innerHTML = scriptList[i].script;
        var td1 = theDoc.createElement('td');
        var label1 = theDoc.createElement('label');
        label1.innerHTML = (scriptBindings[scriptList[i].script] != undefined ? scriptBindings[scriptList[i].script] : '');
        if(label1.innerHTML !== scriptBindings[scriptList[i].script])
        {
          disable = true;
        }
        var td2 = theDoc.createElement('td');
        var label2 = theDoc.createElement('label');
        label2.innerHTML = scriptList[i].path;

        var td4 = theDoc.createElement('td');
        
        if (scriptList[i].configurable) {
          var editButton = theDoc.createElement('button');
          editButton.innerHTML = '<span style="width: 50px; display: block" class="buttonSpan"><img class="buttonIcon" src="images/edit.png"/>Edit</span>';
          editButton.setAttribute('onclick', 'editOptions("' + scriptList[i].script + '")');

          td4.appendChild(editButton);
        }
        
        
        var td5 = theDoc.createElement('td');
        var removeButton = theDoc.createElement('button');
        removeButton.innerHTML = '<span style="width: 70px; display: block" class="buttonSpan"><img class="buttonIcon" src="images/delete.png"/>Remove</span>';
        removeButton.setAttribute('onclick', 'RemoveScriptFromMap("' + scriptList[i].script + '")');
        removeButton.setAttribute('class', 'button');
        
        td0.appendChild(label0);
        td1.appendChild(label1);
        td2.appendChild(label2);
        td5.appendChild(removeButton);
        tr.appendChild(td0);
        tr.appendChild(td1);
        tr.appendChild(td2);
        tr.appendChild(td4);
        tr.appendChild(td5);
        append.appendChild(tr);
      }
    }
    
    function RemoveScriptFromMap(scriptName)
    {
      ClearScriptFromProfiles(scriptName, '', false);
      
      if(typeof now.RemoveScript == 'function')
      {
        now.RemoveScript(scriptName, function(){
          location.reload(true);
        });
      }
    }

    function addScriptOptionValue()
    {
        // TODO Internet Explore Support
        var key = document.getElementById("optionKeys").value;
        var value = document.getElementById("newOptionName").value;
        document.getElementById("newOptionName").value = "";
        now.addScriptOptionValue(currentlyEditedScript.GetName, key, value, function() {editOptions(currentlyEditedScript.GetName)});
    }

    function deleteScriptOptionValue(script, key, value)
    {
        console.log("Deleting " + script + " " + key + " " + value);
        now.deleteScriptOptionValue(currentlyEditedScript.GetName, key, value, function() {editOptions(script)});

    }

    function selectedKeyChanged()
    {
        document.getElementById("newOptionName").value = "";
        dojo.empty("optionValues"); 
        // TODO Internet Explore Support
        var currentKey = document.getElementById("optionKeys").value;
        for (var i = 0; i < currentlyEditedScript.GetOptions[currentKey].length; i++)
        {
           var tr = document.createElement("tr");
          
          var td1 = document.createElement("td");
           tr.appendChild(td1);
           
           var td2 = document.createElement("td");
           tr.appendChild(td2);
           
           var value = currentlyEditedScript.GetOptions[currentKey][i];
           td1.innerHTML = value;
         
           var deleteButton = document.createElement("button");
           deleteButton.innerHTML = "Delete";
           deleteButton.onclick = function()
           {    
                var key = currentKey;
                var innerValue = value;
                return function() {
                    deleteScriptOptionValue(currentlyEditedScript.GetName, key, innerValue);
                }
           }();
           td2.appendChild(deleteButton);
           
           document.getElementById("optionValues").appendChild(tr); 
        }
    }

    function editOptions(scriptName)
    {
       dojo.empty("optionKeys"); 
       dojo.empty("optionValues"); 
       now.GetScript(scriptName, function(script)
       {
            currentlyEditedScript = script;
            var count = 0;
            for (var key in script.GetOptions)
            {
                var option = document.createElement("option");
                option.innerHTML = key;
                document.getElementById("optionKeys").add(option);
                count++;
            }

            if (count == 0)
            {
                alert("No editable options for this script");         
            }
            else
            {
                showLightBox('2'); 
            }


            selectedKeyChanged();
       });
    }
    
    function ClearScriptWrapper(scriptName)
    { 
      var profilesForScript = scriptBindings[scriptName].split(',');
      
      if(profilesForScript.length > 1)
      {
        showLightBox('1');
        for(var i in profilesForScript)
        {
          var tr = theDoc.createElement('tr');
          var td0 = theDoc.createElement('td');
          var checkbox = theDoc.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.value = profilesForScript[i];
          checkbox.id = profilesForScript[i];
          checkbox.checked = true;
          var td1 = theDoc.createElement('td');
          var label = theDoc.createElement('label');
          label.innerHTML = profilesForScript[i];
          
          td0.appendChild(checkbox);
          td1.appendChild(label);
          tr.appendChild(td0);
          tr.appendChild(td1);
          theDoc.getElementById('appendHook').appendChild(tr);
        }
        theDoc.getElementById('changeOnclick').setAttribute('onclick', 'ClearScriptFromProfiles("' + scriptName + '", getProfileExceptions("' + profilesForScript.join() + '"), true)');
      }
      else
      {
        ClearScriptFromProfiles(scriptName, '', true);
      }
    }
    
    function getProfileExceptions(ids)
    {
      var exceptions = ids.split(',');
      var ret = [];
      
      for(var i in exceptions)
      {
        if(exceptions[i] != undefined && exceptions[i] != '')
        {
          if(theDoc.getElementById(exceptions[i]).checked == false)
          {
            ret.push(exceptions[i]);
          }
        }
      }
      
      return ret;
    }
    
    function ClearScriptFromProfiles(scriptName, exceptions, reload)
    {
      if(scriptBindings[scriptName] == undefined)
      {
        console.log('The script ' + scriptName + ' is not linked to any profiles');
        return;
      }
      var profilesIter = scriptBindings[scriptName].split(',');
      if(profilesIter == '' || profilesIter == undefined || profilesIter == null)
      {
        console.log('found only one profile');
        profilesIter = scriptBindings[scriptName];
      }
      
      if(exceptions != '' && exceptions != undefined)
      {
        for(var i in profilesIter)
        {
          for(var j in exceptions)
          {
            if(profilesIter[i].substring(0, profilesIter[i].indexOf(':')) == exceptions[j])
            {
              profilesIter[i] = null;
            }
          }
        }
      }
      
      if(typeof now.RemoveScriptFromProfiles == 'function' && (reload == 'true' || reload == true))
      {
        now.RemoveScriptFromProfiles(scriptName, function(){
          location.reload(true);
        });
      }
      else if(typeof now.RemoveScriptFromProfiles == 'function' && (reload == 'false' || reload == false))
      {
        now.RemoveScriptFromProfiles(scriptName, profilesIter); 
      }
      else
      {
        alert('Could not complete action, function RemoveScriptFromProfiles not found');
        return;
      }
    }

    function showLightBox(divIndex)
    {
      disableBackground();
      
      theDoc.getElementById('setup').style.opacity='0.5';
      theDoc.getElementById('lightbox').style.display='block';
      if(divIndex == '0')
      {
        theDoc.getElementById('addScriptForm').style.display='block';
        theDoc.getElementById('selectClearProfiles').style.display='none';
        theDoc.getElementById('editScriptForm').style.display='none';
      }
      else if(divIndex == '1')
      {
        theDoc.getElementById('addScriptForm').style.display='none';
        theDoc.getElementById('selectClearProfiles').style.display='block';
        theDoc.getElementById('editScriptForm').style.display='none';
      }
      else if (divIndex == '2')
      {
        theDoc.getElementById('addScriptForm').style.display='none';
        theDoc.getElementById('selectClearProfiles').style.display='none';
        theDoc.getElementById('editScriptForm').style.display='block';
      }
    }
    
    function checkParams(callback)
    {
      var sName = theDoc.getElementById('scriptFile').value;
      // I'm wondering if we shouldn't enforce some sort of regulation regarding
      // what file extensions people can submit with the file dialog; I can't seem
      // to find any documentation regarding limiting what types of files an input
      // can take to a smaller subset outside of back-end magickry.
      var sFile = theDoc.getElementById('scriptName').value;
      var sShell = theDoc.getElementById('scriptShell').value;
      var sArgs = theDoc.getElementById('scriptArgs').value;
      
      if(sName == '' || sFile == '' || sName == undefined || sFile == undefined)
      {
        alert('Must select both a file and supply a name for the new script');
      }
      // For now this is not necessarily required. When we have an actual mechanism
      // for standardizing the submittal and format of scripts (i.e. what arguments
      // to take from Honeyd, entries in the example.conf file/any other file within the
      // /usr/share/honeyd/scripts/strings/ folder) this will be come important. As I 
      // understand it, the strings folder holds version strings, etc. and we still have
      // more desired work to do on it.
      /*if(sArgs == '' || sArgs == undefined)
      {
        alert('Arguments for the script must be included (read Script guidelines for more details)');
      }*/
      else
      {
        if(typeof callback == 'function')
        {
          callback();
        }
      }
    }
   
    function disableBackground()
    {
      var disableUs = document.getElementById('setup').childNodes;
      for(var i in disableUs)
      {
        disableUs[i].disabled = true;
      }
    }

    function enableBackground()
    {
      var enableUs = document.getElementById('setup').childNodes;
      for(var i in enableUs)
      {
        enableUs[i].disabled = false;
      }
    }
   
    function init()
    {
        now.ready(function(){
          setUpScriptTable();
        });
    }

block content
  div#setup(onclick='handleOnclick(event)')
    h1 Honeyd Scripts
  
    button(onclick='showLightBox("0")')
      img.buttonIcon(src="images/add.png")
      span.buttonSpan Add New Honeyd Script
    br
    br
  
    table(border='1', style='border: solid black 2px;')
      thead
        tr
          th(style='background-color: #d0e9fc;') Name
          th(style='background-color: #d0e9fc;') Profiles
          th(style='background-color: #d0e9fc;') Path And Parameters
          th(style='background-color: #d0e9fc;') Edit
          th(style='background-color: #d0e9fc;') Remove
      tbody#addAnchor
    br
  
  div(id='lightbox', class='white_content')
    div(id='editScriptForm', style='display: none')
      label Key
      select#optionKeys(onchange='selectedKeyChanged()');
      table#optionValues(style='border: 1px solid black')
      input#newOptionName(type="text")
      button(onclick='addScriptOptionValue()') Add
    div(id='addScriptForm', style='display: none')
      form(id='submitMe', method='post', enctype="multipart/form-data")
        table
          tbody
            tr
              td 
                label Script to Upload
              td 
                input(type='file', name='script', id='scriptFile')
            tr
              td
                label Shell Type
              td
                input(name='shell', id='scriptShell')
            tr 
              td
                label Args
              td
                input(name='args', id='scriptArgs')
            tr
              td
                label Name of Script
              td
                input(name='name', id='scriptName')
      button(onclick='checkParams(function(){document.getElementById("submitMe").submit();})') Add Script
    div(id='selectClearProfiles', style='display: none')
      table
        thead
          tr
            th Profiles To Remove Script From
        tbody(id='appendHook')
      button(id='changeOnclick') Clear Scripts From Profile
    br
    button(onclick='closeLightbox()') Close
