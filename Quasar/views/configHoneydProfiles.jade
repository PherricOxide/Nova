//- ============================================================================
//-  Copyright   : DataSoft Corporation 2011-2013
//-  Nova is free software: you can redistribute it and/or modify
//-   it under the terms of the GNU General Public License as published by
//-   the Free Software Foundation, either version 3 of the License, or
//-   (at your option) any later version.
//-
//-   Nova is distributed in the hope that it will be useful,
//-   but WITHOUT ANY WARRANTY; without even the implied warranty of
//-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//-   GNU General Public License for more details.
//-
//-   You should have received a copy of the GNU General Public License
//-   along with Nova.  If not, see <http://www.gnu.org/licenses/>.
//- ============================================================================

extends layout

block headerAdditions
  link(rel="stylesheet", type="text/css", href="configstyle.css", media="screen")

  style(type="text/css")
    a.selectedProfile, a.unselectedProfile {
        display: block;
        font-size: 12px;
        font-weight: bold;
        border: 1px solid black;
        padding: 2px;
        margin: 5px;
        height: 100%;
    }

    a.unselectedProfile:hover {
        background-color: #F1CC91;
        clear: both;
    }

    a.selectedProfile {
        background-color: #E8A02F;
    }

    a.unselectedProfile {
        background-color: #E4F2FF;
    }

    ul {
        margin-bottom: 20px;
        display: block; 
        list-style-type:disc;
    }

    #treeDiv {
        display: inline-block;
        padding: 2px;
        border-style: solid;
        border-color: black;
    }

    li {
        -moz-user-select: none;
        -webkit-user-select: none;
    }

  script
    var profilesArray = {};

    function ipTypeChanged()
    {
      var ipEditEnabled;
      if (document.getElementById("ipType").value == "DHCP")
      {
        ipEditEnabled = true;
      } else {
        ipEditEnabled = false;
      }
      document.getElementById("ip1").disabled = ipEditEnabled;
      document.getElementById("ip2").disabled = ipEditEnabled;
      document.getElementById("ip3").disabled = ipEditEnabled;
      document.getElementById("ip4").disabled = ipEditEnabled;
     }
    
    function deleteSelectedItems()
    {
      var names = GetSelectedProfiles();
     
      try 
      {
        now.deleteProfiles(names, errorMessageCallback);
      }
      catch(err)
      {
        alert("Action failed because unable to connect to server! Please try refreshing the page and trying again.");
        console.log("err was: " + err);
      }
    }

    
    function errorMessageCallback(success, message)
    {
      if(success != true)
      {
        var dialog = new dijit.Dialog({title: "Error", content: "Unable to complete operation due to error: " + message});
        dialog.show();
        return;
      }

     now.IsHaystackUp(checkIfRestartNeeded); 
    }

    function checkIfRestartNeeded(haystackUp)
    {
      if (haystackUp)
      {
        var restartHaystack = confirm("You must restart the haystack for this to take effect. Restart it now?");
        if (restartHaystack)
        {
          now.RestartHaystack();
        }
      }

      location.reload(true);
    }

    function editSelectedItem()
    {
      var items = GetSelectedProfiles();
      if (items.length != 1)
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "Please select only 1 profile for editing"});
        dialog.show();
        return;
      }
      window.location.href = "editHoneydProfile?profile=" + items[0];
    }

    function addChildSelectedItem()
    {
      var items = GetSelectedProfiles();
      if (items.length != 1)
      {
        var dialog = new dijit.Dialog({title: "Invalid Selection", content: "Please select only 1 profile for parenting"});
        dialog.show();
        return;
      }
      window.location.href = "addHoneydProfile?parent=" + items[0];
    }

    function SetHighlighted(element)
    {
        element.className = "selectedProfile";
    }

    function UnsetHighlighted(element)
    {
        element.className = "unselectedProfile";
    }

    function GetSelectedProfiles()
    {
        var selected = new Array();
        for (profile in profilesArray)
        {
            if (profilesArray[profile].isSelected)
            {
                selected.push(profile);
            }
        }
        return selected;
    }

    function configurationRestored()
    {
        now.IsHaystackUp(checkIfRestartNeeded); 
    }

    function onProfileClicked(profile)
    {
        var ctrlKeyPressed = true;
        if (typeof(event) !== 'undefined')
        {
                if (!event.ctrlKey)
                {
                        ctrlKeyPressed = false;
                } else {
                        ctrlKeyPressed = true;
                }
        }

        if (!ctrlKeyPressed)
        {
            for (entry in profilesArray)
            {
                profilesArray[entry].isSelected = false;
                UnsetHighlighted(profilesArray[entry].listElement);
            }
        }

        profilesArray[profile].isSelected = !profilesArray[profile].isSelected;
        if (profilesArray[profile].isSelected)
        {
            SetHighlighted(profilesArray[profile].listElement);
        } else {
            UnsetHighlighted(profilesArray[profile].listElement);
        }
    }


    require(["dijit/Dialog"],

    function init(){
        var children = document.getElementById("profileTableBody").children;

        for (var i = 0; i < children.length; i++)
        {
            var profile = {};
            profile.name = children[i].children[0].innerHTML;
            profile.parent = children[i].children[1].innerHTML;
            profile.children = new Array();
            profile.isSelected = false;
            profile.listElement = null;
            profilesArray[profile.name] = profile;
        }
       
        // build it into a tree
        for (i in profilesArray)
        {
            for (j in profilesArray)
            {
                if (profilesArray[j].parent == profilesArray[i].name)
                {
                    profilesArray[i].children.push(profilesArray[j].name);
                }
             }
        }
        
        var treeDiv = document.getElementById("treeDiv");

        var drawNode = function(profile, parentDOMNode)
        {
            var li = document.createElement('li');
            var a = document.createElement('a');
            profilesArray[profile].listElement = a;
            a.innerHTML = profile;
            a.className = "unselectedProfile";
            a.setAttribute("onclick", "onProfileClicked('" + profile + "')");
            
            li.appendChild(a); 
            parentDOMNode.appendChild(li);
           
            if(profilesArray[profile].children.length)
            {
                var ul = document.createElement('ul'); 
                li.appendChild(ul);
            }

            for(var i = 0; i < profilesArray[profile].children.length; i++)
            {
               drawNode(profilesArray[profilesArray[profile].children[i]].name, ul);
            }



        }

        drawNode("default", treeDiv);
    });
  

block content
  h1 Current Honeyd Profiles
  table#profileTable(style="display: none")
    thead
      tr
        th Name
        th Parent
    tbody#profileTableBody
      each profile, i in profiles
        tr
          td #{profile.GetName()}
          td #{profile.GetParentProfile()}

  div#treeDiv
  br
  br
 

  button(onClick="deleteSelectedItems()")
    img.buttonIcon(src="images/delete.png")
    span.buttonSpan Delete Selected Profiles 
  
  button(onClick="editSelectedItem()")
    img.buttonIcon(src="images/edit.png")
    span.buttonSpan Edit Selected Profile
  
  button(onClick="addChildSelectedItem()") 
    img.buttonIcon(src="images/add.png")
    span.buttonSpan Add Child Profile
